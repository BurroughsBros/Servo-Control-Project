
PD_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002660  08002660  00003660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002690  08002690  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002690  08002690  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002690  08002690  00003690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002694  08002694  00003694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002698  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080026a4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080026a4  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b69  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176f  00000000  00000000  0000bb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0000d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000703  00000000  00000000  0000dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a7c  00000000  00000000  0000e333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b460  00000000  00000000  00026daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090216  00000000  00000000  0003220f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff4  00000000  00000000  000c2468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000c445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002648 	.word	0x08002648

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002648 	.word	0x08002648

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_GPIO_Init+0x2c>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_GPIO_Init+0x2c>)
 800022c:	2180      	movs	r1, #128	@ 0x80
 800022e:	0289      	lsls	r1, r1, #10
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <MX_GPIO_Init+0x2c>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	029b      	lsls	r3, r3, #10
 800023c:	4013      	ands	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b08f      	sub	sp, #60	@ 0x3c
 8000254:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 facd 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f81f 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f7ff ffdf 	bl	8000220 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000262:	f000 f8d1 	bl	8000408 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000266:	f000 f98f 	bl	8000588 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_initEncoder(htim2);
 800026a:	4c0a      	ldr	r4, [pc, #40]	@ (8000294 <main+0x44>)
 800026c:	466b      	mov	r3, sp
 800026e:	0018      	movs	r0, r3
 8000270:	0023      	movs	r3, r4
 8000272:	3310      	adds	r3, #16
 8000274:	2238      	movs	r2, #56	@ 0x38
 8000276:	0019      	movs	r1, r3
 8000278:	f002 f9dc 	bl	8002634 <memcpy>
 800027c:	6820      	ldr	r0, [r4, #0]
 800027e:	6861      	ldr	r1, [r4, #4]
 8000280:	68a2      	ldr	r2, [r4, #8]
 8000282:	68e3      	ldr	r3, [r4, #12]
 8000284:	f000 f850 	bl	8000328 <motor_initEncoder>

  while (1)
  {
	  x = motor_getCount();
 8000288:	f000 f872 	bl	8000370 <motor_getCount>
 800028c:	0002      	movs	r2, r0
 800028e:	4b02      	ldr	r3, [pc, #8]	@ (8000298 <main+0x48>)
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	e7f9      	b.n	8000288 <main+0x38>
 8000294:	200000bc 	.word	0x200000bc
 8000298:	20000028 	.word	0x20000028

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b093      	sub	sp, #76	@ 0x4c
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2414      	movs	r4, #20
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2334      	movs	r3, #52	@ 0x34
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f002 f995 	bl	80025dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	0018      	movs	r0, r3
 80002b6:	2310      	movs	r3, #16
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f002 f98e 	bl	80025dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	0021      	movs	r1, r4
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2201      	movs	r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2210      	movs	r2, #16
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fd19 	bl	8000d14 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002e6:	f000 f819 	bl	800031c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	0018      	movs	r0, r3
 8000308:	f001 f88a 	bl	8001420 <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000310:	f000 f804 	bl	800031c <Error_Handler>
  }
}
 8000314:	46c0      	nop			@ (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b013      	add	sp, #76	@ 0x4c
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000320:	b672      	cpsid	i
}
 8000322:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000324:	46c0      	nop			@ (mov r8, r8)
 8000326:	e7fd      	b.n	8000324 <Error_Handler+0x8>

08000328 <motor_initEncoder>:
#include "motorControl.h"
#include "main.h"

TIM_HandleTypeDef encoderHandle;

void motor_initEncoder(TIM_HandleTypeDef timmerHandler){
 8000328:	b084      	sub	sp, #16
 800032a:	b5b0      	push	{r4, r5, r7, lr}
 800032c:	af00      	add	r7, sp, #0
 800032e:	2510      	movs	r5, #16
 8000330:	197c      	adds	r4, r7, r5
 8000332:	6020      	str	r0, [r4, #0]
 8000334:	6061      	str	r1, [r4, #4]
 8000336:	60a2      	str	r2, [r4, #8]
 8000338:	60e3      	str	r3, [r4, #12]
	encoderHandle = timmerHandler;
 800033a:	4a0c      	ldr	r2, [pc, #48]	@ (800036c <motor_initEncoder+0x44>)
 800033c:	197b      	adds	r3, r7, r5
 800033e:	0010      	movs	r0, r2
 8000340:	0019      	movs	r1, r3
 8000342:	2348      	movs	r3, #72	@ 0x48
 8000344:	001a      	movs	r2, r3
 8000346:	f002 f975 	bl	8002634 <memcpy>
	HAL_TIM_Encoder_Start(&encoderHandle, 1);
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <motor_initEncoder+0x44>)
 800034c:	2101      	movs	r1, #1
 800034e:	0018      	movs	r0, r3
 8000350:	f001 fb02 	bl	8001958 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&encoderHandle, 2);
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <motor_initEncoder+0x44>)
 8000356:	2102      	movs	r1, #2
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fafd 	bl	8001958 <HAL_TIM_Encoder_Start>
}
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bcb0      	pop	{r4, r5, r7}
 8000364:	bc08      	pop	{r3}
 8000366:	b004      	add	sp, #16
 8000368:	4718      	bx	r3
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	2000002c 	.word	0x2000002c

08000370 <motor_getCount>:
void motor_PWMSet(int x){

}
int motor_getCount(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&encoderHandle);
 8000374:	4b02      	ldr	r3, [pc, #8]	@ (8000380 <motor_getCount+0x10>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800037a:	0018      	movs	r0, r3
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000002c 	.word	0x2000002c

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <HAL_MspInit+0x44>)
 800038c:	699a      	ldr	r2, [r3, #24]
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <HAL_MspInit+0x44>)
 8000390:	2101      	movs	r1, #1
 8000392:	430a      	orrs	r2, r1
 8000394:	619a      	str	r2, [r3, #24]
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <HAL_MspInit+0x44>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	2201      	movs	r2, #1
 800039c:	4013      	ands	r3, r2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <HAL_MspInit+0x44>)
 80003a4:	69da      	ldr	r2, [r3, #28]
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <HAL_MspInit+0x44>)
 80003a8:	2180      	movs	r1, #128	@ 0x80
 80003aa:	0549      	lsls	r1, r1, #21
 80003ac:	430a      	orrs	r2, r1
 80003ae:	61da      	str	r2, [r3, #28]
 80003b0:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <HAL_MspInit+0x44>)
 80003b2:	69da      	ldr	r2, [r3, #28]
 80003b4:	2380      	movs	r3, #128	@ 0x80
 80003b6:	055b      	lsls	r3, r3, #21
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d0:	46c0      	nop			@ (mov r8, r8)
 80003d2:	e7fd      	b.n	80003d0 <NMI_Handler+0x4>

080003d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	e7fd      	b.n	80003d8 <HardFault_Handler+0x4>

080003dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003e0:	46c0      	nop			@ (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f4:	f000 fa46 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b096      	sub	sp, #88	@ 0x58
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	2348      	movs	r3, #72	@ 0x48
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	0018      	movs	r0, r3
 8000414:	2310      	movs	r3, #16
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f002 f8df 	bl	80025dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041e:	2340      	movs	r3, #64	@ 0x40
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2308      	movs	r3, #8
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f002 f8d7 	bl	80025dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042e:	2324      	movs	r3, #36	@ 0x24
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	231c      	movs	r3, #28
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 f8cf 	bl	80025dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	0018      	movs	r0, r3
 8000442:	2320      	movs	r3, #32
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f002 f8c8 	bl	80025dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800044c:	4b4b      	ldr	r3, [pc, #300]	@ (800057c <MX_TIM1_Init+0x174>)
 800044e:	4a4c      	ldr	r2, [pc, #304]	@ (8000580 <MX_TIM1_Init+0x178>)
 8000450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000452:	4b4a      	ldr	r3, [pc, #296]	@ (800057c <MX_TIM1_Init+0x174>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000458:	4b48      	ldr	r3, [pc, #288]	@ (800057c <MX_TIM1_Init+0x174>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800045e:	4b47      	ldr	r3, [pc, #284]	@ (800057c <MX_TIM1_Init+0x174>)
 8000460:	4a48      	ldr	r2, [pc, #288]	@ (8000584 <MX_TIM1_Init+0x17c>)
 8000462:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000464:	4b45      	ldr	r3, [pc, #276]	@ (800057c <MX_TIM1_Init+0x174>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800046a:	4b44      	ldr	r3, [pc, #272]	@ (800057c <MX_TIM1_Init+0x174>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000470:	4b42      	ldr	r3, [pc, #264]	@ (800057c <MX_TIM1_Init+0x174>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000476:	4b41      	ldr	r3, [pc, #260]	@ (800057c <MX_TIM1_Init+0x174>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 f91d 	bl	80016b8 <HAL_TIM_Base_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000482:	f7ff ff4b 	bl	800031c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000486:	2148      	movs	r1, #72	@ 0x48
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2280      	movs	r2, #128	@ 0x80
 800048c:	0152      	lsls	r2, r2, #5
 800048e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000490:	187a      	adds	r2, r7, r1
 8000492:	4b3a      	ldr	r3, [pc, #232]	@ (800057c <MX_TIM1_Init+0x174>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fbc8 	bl	8001c2c <HAL_TIM_ConfigClockSource>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004a0:	f7ff ff3c 	bl	800031c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004a4:	4b35      	ldr	r3, [pc, #212]	@ (800057c <MX_TIM1_Init+0x174>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f956 	bl	8001758 <HAL_TIM_PWM_Init>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004b0:	f7ff ff34 	bl	800031c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2140      	movs	r1, #64	@ 0x40
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c2:	187a      	adds	r2, r7, r1
 80004c4:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <MX_TIM1_Init+0x174>)
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 ffcb 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80004d2:	f7ff ff23 	bl	800031c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d6:	2124      	movs	r1, #36	@ 0x24
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2260      	movs	r2, #96	@ 0x60
 80004dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	1879      	adds	r1, r7, r1
 8000504:	4b1d      	ldr	r3, [pc, #116]	@ (800057c <MX_TIM1_Init+0x174>)
 8000506:	2200      	movs	r2, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fac9 	bl	8001aa0 <HAL_TIM_PWM_ConfigChannel>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000512:	f7ff ff03 	bl	800031c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000516:	2324      	movs	r3, #36	@ 0x24
 8000518:	18f9      	adds	r1, r7, r3
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <MX_TIM1_Init+0x174>)
 800051c:	2204      	movs	r2, #4
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fabe 	bl	8001aa0 <HAL_TIM_PWM_ConfigChannel>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000528:	f7ff fef8 	bl	800031c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2280      	movs	r2, #128	@ 0x80
 800054e:	0192      	lsls	r2, r2, #6
 8000550:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <MX_TIM1_Init+0x174>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f001 ffde 	bl	8002520 <HAL_TIMEx_ConfigBreakDeadTime>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000568:	f7ff fed8 	bl	800031c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <MX_TIM1_Init+0x174>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 f8d6 	bl	8000720 <HAL_TIM_MspPostInit>

}
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b016      	add	sp, #88	@ 0x58
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000074 	.word	0x20000074
 8000580:	40012c00 	.word	0x40012c00
 8000584:	0000ffff 	.word	0x0000ffff

08000588 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b08d      	sub	sp, #52	@ 0x34
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800058e:	240c      	movs	r4, #12
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2324      	movs	r3, #36	@ 0x24
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f002 f81f 	bl	80025dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	0018      	movs	r0, r3
 80005a2:	2308      	movs	r3, #8
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f002 f818 	bl	80025dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ac:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <MX_TIM2_Init+0xc0>)
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	05d2      	lsls	r2, r2, #23
 80005b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <MX_TIM2_Init+0xc0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <MX_TIM2_Init+0xc0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005c0:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_TIM2_Init+0xc0>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	4252      	negs	r2, r2
 80005c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_TIM2_Init+0xc0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_TIM2_Init+0xc0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005d4:	0021      	movs	r1, r4
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800060c:	187a      	adds	r2, r7, r1
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_TIM2_Init+0xc0>)
 8000610:	0011      	movs	r1, r2
 8000612:	0018      	movs	r0, r3
 8000614:	f001 f8f8 	bl	8001808 <HAL_TIM_Encoder_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800061c:	f7ff fe7e 	bl	800031c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_TIM2_Init+0xc0>)
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f001 ff16 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800063c:	f7ff fe6e 	bl	800031c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b00d      	add	sp, #52	@ 0x34
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	200000bc 	.word	0x200000bc

0800064c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <HAL_TIM_Base_MspInit+0x38>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d10d      	bne.n	800067a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HAL_TIM_Base_MspInit+0x3c>)
 8000660:	699a      	ldr	r2, [r3, #24]
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_TIM_Base_MspInit+0x3c>)
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	0109      	lsls	r1, r1, #4
 8000668:	430a      	orrs	r2, r1
 800066a:	619a      	str	r2, [r3, #24]
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_TIM_Base_MspInit+0x3c>)
 800066e:	699a      	ldr	r2, [r3, #24]
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	40012c00 	.word	0x40012c00
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b08b      	sub	sp, #44	@ 0x2c
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	2414      	movs	r4, #20
 8000696:	193b      	adds	r3, r7, r4
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f001 ff9c 	bl	80025dc <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d130      	bne.n	8000712 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <HAL_TIM_Encoder_MspInit+0x90>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <HAL_TIM_Encoder_MspInit+0x90>)
 80006b6:	2101      	movs	r1, #1
 80006b8:	430a      	orrs	r2, r1
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <HAL_TIM_Encoder_MspInit+0x90>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4013      	ands	r3, r2
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <HAL_TIM_Encoder_MspInit+0x90>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_TIM_Encoder_MspInit+0x90>)
 80006ce:	2180      	movs	r1, #128	@ 0x80
 80006d0:	0289      	lsls	r1, r1, #10
 80006d2:	430a      	orrs	r2, r1
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <HAL_TIM_Encoder_MspInit+0x90>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	029b      	lsls	r3, r3, #10
 80006de:	4013      	ands	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODE_A_Pin|ENCODE_B_Pin;
 80006e4:	0021      	movs	r1, r4
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2203      	movs	r2, #3
 80006ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2202      	movs	r2, #2
 8000702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	187a      	adds	r2, r7, r1
 8000706:	2390      	movs	r3, #144	@ 0x90
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f989 	bl	8000a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b00b      	add	sp, #44	@ 0x2c
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b089      	sub	sp, #36	@ 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	240c      	movs	r4, #12
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	2314      	movs	r3, #20
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f001 ff52 	bl	80025dc <memset>
  if(timHandle->Instance==TIM1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <HAL_TIM_MspPostInit+0x78>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d125      	bne.n	800078e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <HAL_TIM_MspPostInit+0x7c>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <HAL_TIM_MspPostInit+0x7c>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	0289      	lsls	r1, r1, #10
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_TIM_MspPostInit+0x7c>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	029b      	lsls	r3, r3, #10
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	22c0      	movs	r2, #192	@ 0xc0
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2202      	movs	r2, #2
 800076c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2202      	movs	r2, #2
 800077e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	187a      	adds	r2, r7, r1
 8000782:	2390      	movs	r3, #144	@ 0x90
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f000 f94b 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b009      	add	sp, #36	@ 0x24
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	40012c00 	.word	0x40012c00
 800079c:	40021000 	.word	0x40021000

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f7ff fe2b 	bl	80003fe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f001 ff0d 	bl	80025ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fd3d 	bl	8000250 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	08002698 	.word	0x08002698
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	20000108 	.word	0x20000108

080007f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_COMP_IRQHandler>
	...

080007f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <HAL_Init+0x24>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_Init+0x24>)
 80007fe:	2110      	movs	r1, #16
 8000800:	430a      	orrs	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f809 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080a:	f7ff fdbb 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_InitTick+0x5c>)
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	23fa      	movs	r3, #250	@ 0xfa
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	f7ff fc69 	bl	8000108 <__udivsi3>
 8000836:	0003      	movs	r3, r0
 8000838:	0019      	movs	r1, r3
 800083a:	0020      	movs	r0, r4
 800083c:	f7ff fc64 	bl	8000108 <__udivsi3>
 8000840:	0003      	movs	r3, r0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f8e1 	bl	8000a0a <HAL_SYSTICK_Config>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e00f      	b.n	8000870 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d80b      	bhi.n	800086e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f8be 	bl	80009e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_InitTick+0x64>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	18d2      	adds	r2, r2, r3
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <HAL_IncTick+0x20>)
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000104 	.word	0x20000104

080008a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	20000104 	.word	0x20000104

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80008d0:	d828      	bhi.n	8000924 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000990 <__NVIC_SetPriority+0xd4>)
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	33c0      	adds	r3, #192	@ 0xc0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	589b      	ldr	r3, [r3, r2]
 80008e2:	1dfa      	adds	r2, r7, #7
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	0011      	movs	r1, r2
 80008e8:	2203      	movs	r2, #3
 80008ea:	400a      	ands	r2, r1
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	21ff      	movs	r1, #255	@ 0xff
 80008f0:	4091      	lsls	r1, r2
 80008f2:	000a      	movs	r2, r1
 80008f4:	43d2      	mvns	r2, r2
 80008f6:	401a      	ands	r2, r3
 80008f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	22ff      	movs	r2, #255	@ 0xff
 8000900:	401a      	ands	r2, r3
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	2303      	movs	r3, #3
 800090a:	4003      	ands	r3, r0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	481f      	ldr	r0, [pc, #124]	@ (8000990 <__NVIC_SetPriority+0xd4>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b25b      	sxtb	r3, r3
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	430a      	orrs	r2, r1
 800091c:	33c0      	adds	r3, #192	@ 0xc0
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000922:	e031      	b.n	8000988 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <__NVIC_SetPriority+0xd8>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0019      	movs	r1, r3
 800092c:	230f      	movs	r3, #15
 800092e:	400b      	ands	r3, r1
 8000930:	3b08      	subs	r3, #8
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3306      	adds	r3, #6
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	3304      	adds	r3, #4
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	1dfa      	adds	r2, r7, #7
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	0011      	movs	r1, r2
 8000944:	2203      	movs	r2, #3
 8000946:	400a      	ands	r2, r1
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	21ff      	movs	r1, #255	@ 0xff
 800094c:	4091      	lsls	r1, r2
 800094e:	000a      	movs	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	401a      	ands	r2, r3
 8000954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	22ff      	movs	r2, #255	@ 0xff
 800095c:	401a      	ands	r2, r3
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	0018      	movs	r0, r3
 8000964:	2303      	movs	r3, #3
 8000966:	4003      	ands	r3, r0
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <__NVIC_SetPriority+0xd8>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	001c      	movs	r4, r3
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	3b08      	subs	r3, #8
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	3306      	adds	r3, #6
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	18c3      	adds	r3, r0, r3
 8000984:	3304      	adds	r3, #4
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b003      	add	sp, #12
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	045b      	lsls	r3, r3, #17
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d301      	bcc.n	80009b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ac:	2301      	movs	r3, #1
 80009ae:	e010      	b.n	80009d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <SysTick_Config+0x44>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	3a01      	subs	r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2103      	movs	r1, #3
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff ff7c 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <SysTick_Config+0x44>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <SysTick_Config+0x44>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	210f      	movs	r1, #15
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	1c02      	adds	r2, r0, #0
 80009f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ffbf 	bl	8000998 <SysTick_Config>
 8000a1a:	0003      	movs	r3, r0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a32:	e155      	b.n	8000ce0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d100      	bne.n	8000a4c <HAL_GPIO_Init+0x28>
 8000a4a:	e146      	b.n	8000cda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2203      	movs	r2, #3
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d005      	beq.n	8000a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	43da      	mvns	r2, r3
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2203      	movs	r2, #3
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2203      	movs	r2, #3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2207      	movs	r2, #7
 8000b20:	4013      	ands	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2107      	movs	r1, #7
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	6939      	ldr	r1, [r7, #16]
 8000b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2203      	movs	r2, #3
 8000b74:	401a      	ands	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	23c0      	movs	r3, #192	@ 0xc0
 8000b90:	029b      	lsls	r3, r3, #10
 8000b92:	4013      	ands	r3, r2
 8000b94:	d100      	bne.n	8000b98 <HAL_GPIO_Init+0x174>
 8000b96:	e0a0      	b.n	8000cda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b57      	ldr	r3, [pc, #348]	@ (8000cf8 <HAL_GPIO_Init+0x2d4>)
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	4b56      	ldr	r3, [pc, #344]	@ (8000cf8 <HAL_GPIO_Init+0x2d4>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	619a      	str	r2, [r3, #24]
 8000ba4:	4b54      	ldr	r3, [pc, #336]	@ (8000cf8 <HAL_GPIO_Init+0x2d4>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb0:	4a52      	ldr	r2, [pc, #328]	@ (8000cfc <HAL_GPIO_Init+0x2d8>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	589b      	ldr	r3, [r3, r2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	43da      	mvns	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	2390      	movs	r3, #144	@ 0x90
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d019      	beq.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a47      	ldr	r2, [pc, #284]	@ (8000d00 <HAL_GPIO_Init+0x2dc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0x1ea>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a46      	ldr	r2, [pc, #280]	@ (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d00d      	beq.n	8000c0a <HAL_GPIO_Init+0x1e6>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a45      	ldr	r2, [pc, #276]	@ (8000d08 <HAL_GPIO_Init+0x2e4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d007      	beq.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a44      	ldr	r2, [pc, #272]	@ (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_GPIO_Init+0x1de>
 8000bfe:	2304      	movs	r3, #4
 8000c00:	e008      	b.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000c02:	2305      	movs	r3, #5
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e004      	b.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000c12:	2300      	movs	r3, #0
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	2103      	movs	r1, #3
 8000c18:	400a      	ands	r2, r1
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4093      	lsls	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c24:	4935      	ldr	r1, [pc, #212]	@ (8000cfc <HAL_GPIO_Init+0x2d8>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c32:	4b37      	ldr	r3, [pc, #220]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	035b      	lsls	r3, r3, #13
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c56:	4b2e      	ldr	r3, [pc, #184]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	039b      	lsls	r3, r3, #14
 8000c74:	4013      	ands	r3, r2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	029b      	lsls	r3, r3, #10
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	025b      	lsls	r3, r3, #9
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	40da      	lsrs	r2, r3
 8000ce8:	1e13      	subs	r3, r2, #0
 8000cea:	d000      	beq.n	8000cee <HAL_GPIO_Init+0x2ca>
 8000cec:	e6a2      	b.n	8000a34 <HAL_GPIO_Init+0x10>
  } 
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b006      	add	sp, #24
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f000 fb76 	bl	8001414 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d100      	bne.n	8000d34 <HAL_RCC_OscConfig+0x20>
 8000d32:	e08e      	b.n	8000e52 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d34:	4bc5      	ldr	r3, [pc, #788]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	220c      	movs	r2, #12
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d00e      	beq.n	8000d5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d40:	4bc2      	ldr	r3, [pc, #776]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	220c      	movs	r2, #12
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d117      	bne.n	8000d7c <HAL_RCC_OscConfig+0x68>
 8000d4c:	4bbf      	ldr	r3, [pc, #764]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	23c0      	movs	r3, #192	@ 0xc0
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	401a      	ands	r2, r3
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	025b      	lsls	r3, r3, #9
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d10e      	bne.n	8000d7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	4bbb      	ldr	r3, [pc, #748]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	4013      	ands	r3, r2
 8000d68:	d100      	bne.n	8000d6c <HAL_RCC_OscConfig+0x58>
 8000d6a:	e071      	b.n	8000e50 <HAL_RCC_OscConfig+0x13c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d000      	beq.n	8000d76 <HAL_RCC_OscConfig+0x62>
 8000d74:	e06c      	b.n	8000e50 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f000 fb4c 	bl	8001414 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d107      	bne.n	8000d94 <HAL_RCC_OscConfig+0x80>
 8000d84:	4bb1      	ldr	r3, [pc, #708]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4bb0      	ldr	r3, [pc, #704]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d8a:	2180      	movs	r1, #128	@ 0x80
 8000d8c:	0249      	lsls	r1, r1, #9
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e02f      	b.n	8000df4 <HAL_RCC_OscConfig+0xe0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10c      	bne.n	8000db6 <HAL_RCC_OscConfig+0xa2>
 8000d9c:	4bab      	ldr	r3, [pc, #684]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4baa      	ldr	r3, [pc, #680]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000da2:	49ab      	ldr	r1, [pc, #684]	@ (8001050 <HAL_RCC_OscConfig+0x33c>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	4ba8      	ldr	r3, [pc, #672]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4ba7      	ldr	r3, [pc, #668]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dae:	49a9      	ldr	r1, [pc, #676]	@ (8001054 <HAL_RCC_OscConfig+0x340>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e01e      	b.n	8000df4 <HAL_RCC_OscConfig+0xe0>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b05      	cmp	r3, #5
 8000dbc:	d10e      	bne.n	8000ddc <HAL_RCC_OscConfig+0xc8>
 8000dbe:	4ba3      	ldr	r3, [pc, #652]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4ba2      	ldr	r3, [pc, #648]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	02c9      	lsls	r1, r1, #11
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	4b9f      	ldr	r3, [pc, #636]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b9e      	ldr	r3, [pc, #632]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dd2:	2180      	movs	r1, #128	@ 0x80
 8000dd4:	0249      	lsls	r1, r1, #9
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e00b      	b.n	8000df4 <HAL_RCC_OscConfig+0xe0>
 8000ddc:	4b9b      	ldr	r3, [pc, #620]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b9a      	ldr	r3, [pc, #616]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000de2:	499b      	ldr	r1, [pc, #620]	@ (8001050 <HAL_RCC_OscConfig+0x33c>)
 8000de4:	400a      	ands	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	4b98      	ldr	r3, [pc, #608]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b97      	ldr	r3, [pc, #604]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000dee:	4999      	ldr	r1, [pc, #612]	@ (8001054 <HAL_RCC_OscConfig+0x340>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d014      	beq.n	8000e26 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fd54 	bl	80008a8 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fd4f 	bl	80008a8 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	@ 0x64
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e2fd      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e18:	4b8c      	ldr	r3, [pc, #560]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	4013      	ands	r3, r2
 8000e22:	d0f0      	beq.n	8000e06 <HAL_RCC_OscConfig+0xf2>
 8000e24:	e015      	b.n	8000e52 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fd3f 	bl	80008a8 <HAL_GetTick>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fd3a 	bl	80008a8 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	@ 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e2e8      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	4b82      	ldr	r3, [pc, #520]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	029b      	lsls	r3, r3, #10
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x11c>
 8000e4e:	e000      	b.n	8000e52 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d100      	bne.n	8000e5e <HAL_RCC_OscConfig+0x14a>
 8000e5c:	e06c      	b.n	8000f38 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	220c      	movs	r2, #12
 8000e64:	4013      	ands	r3, r2
 8000e66:	d00e      	beq.n	8000e86 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e68:	4b78      	ldr	r3, [pc, #480]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d11f      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x1a0>
 8000e74:	4b75      	ldr	r3, [pc, #468]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	23c0      	movs	r3, #192	@ 0xc0
 8000e7a:	025b      	lsls	r3, r3, #9
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d116      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e86:	4b71      	ldr	r3, [pc, #452]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x188>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d001      	beq.n	8000e9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e2bb      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	22f8      	movs	r2, #248	@ 0xf8
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	00da      	lsls	r2, r3, #3
 8000eac:	4b67      	ldr	r3, [pc, #412]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	e041      	b.n	8000f38 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d024      	beq.n	8000f06 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ebc:	4b63      	ldr	r3, [pc, #396]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b62      	ldr	r3, [pc, #392]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fcee 	bl	80008a8 <HAL_GetTick>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fce9 	bl	80008a8 <HAL_GetTick>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e297      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	4b59      	ldr	r3, [pc, #356]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	d0f1      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eee:	4b57      	ldr	r3, [pc, #348]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	22f8      	movs	r2, #248	@ 0xf8
 8000ef4:	4393      	bics	r3, r2
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	00da      	lsls	r2, r3, #3
 8000efe:	4b53      	ldr	r3, [pc, #332]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f00:	430a      	orrs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e018      	b.n	8000f38 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f06:	4b51      	ldr	r3, [pc, #324]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b50      	ldr	r3, [pc, #320]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	438a      	bics	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fcc9 	bl	80008a8 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fcc4 	bl	80008a8 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e272      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	4b47      	ldr	r3, [pc, #284]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2202      	movs	r2, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	d1f1      	bne.n	8000f1c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d036      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d019      	beq.n	8000f7e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4a:	4b40      	ldr	r3, [pc, #256]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fca7 	bl	80008a8 <HAL_GetTick>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fca2 	bl	80008a8 <HAL_GetTick>
 8000f64:	0002      	movs	r2, r0
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e250      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f76:	2202      	movs	r2, #2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d0f1      	beq.n	8000f60 <HAL_RCC_OscConfig+0x24c>
 8000f7c:	e018      	b.n	8000fb0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7e:	4b33      	ldr	r3, [pc, #204]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f82:	4b32      	ldr	r3, [pc, #200]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	438a      	bics	r2, r1
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fc8d 	bl	80008a8 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f94:	f7ff fc88 	bl	80008a8 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e236      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	4b29      	ldr	r3, [pc, #164]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000faa:	2202      	movs	r2, #2
 8000fac:	4013      	ands	r3, r2
 8000fae:	d1f1      	bne.n	8000f94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d100      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2a8>
 8000fba:	e0b5      	b.n	8001128 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fbc:	201f      	movs	r0, #31
 8000fbe:	183b      	adds	r3, r7, r0
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000fc6:	69da      	ldr	r2, [r3, #28]
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d110      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	0549      	lsls	r1, r1, #21
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	61da      	str	r2, [r3, #28]
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	055b      	lsls	r3, r3, #21
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fec:	183b      	adds	r3, r7, r0
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_RCC_OscConfig+0x344>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	2380      	movs	r3, #128	@ 0x80
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d11a      	bne.n	8001034 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_RCC_OscConfig+0x344>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_RCC_OscConfig+0x344>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	0049      	lsls	r1, r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc4c 	bl	80008a8 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001016:	f7ff fc47 	bl	80008a8 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b64      	cmp	r3, #100	@ 0x64
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e1f5      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_RCC_OscConfig+0x344>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4013      	ands	r3, r2
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d10f      	bne.n	800105c <HAL_RCC_OscConfig+0x348>
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	4b02      	ldr	r3, [pc, #8]	@ (800104c <HAL_RCC_OscConfig+0x338>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	621a      	str	r2, [r3, #32]
 8001048:	e036      	b.n	80010b8 <HAL_RCC_OscConfig+0x3a4>
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	40021000 	.word	0x40021000
 8001050:	fffeffff 	.word	0xfffeffff
 8001054:	fffbffff 	.word	0xfffbffff
 8001058:	40007000 	.word	0x40007000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10c      	bne.n	800107e <HAL_RCC_OscConfig+0x36a>
 8001064:	4bca      	ldr	r3, [pc, #808]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001066:	6a1a      	ldr	r2, [r3, #32]
 8001068:	4bc9      	ldr	r3, [pc, #804]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800106a:	2101      	movs	r1, #1
 800106c:	438a      	bics	r2, r1
 800106e:	621a      	str	r2, [r3, #32]
 8001070:	4bc7      	ldr	r3, [pc, #796]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	4bc6      	ldr	r3, [pc, #792]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001076:	2104      	movs	r1, #4
 8001078:	438a      	bics	r2, r1
 800107a:	621a      	str	r2, [r3, #32]
 800107c:	e01c      	b.n	80010b8 <HAL_RCC_OscConfig+0x3a4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x38c>
 8001086:	4bc2      	ldr	r3, [pc, #776]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	4bc1      	ldr	r3, [pc, #772]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800108c:	2104      	movs	r1, #4
 800108e:	430a      	orrs	r2, r1
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	4bbf      	ldr	r3, [pc, #764]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001094:	6a1a      	ldr	r2, [r3, #32]
 8001096:	4bbe      	ldr	r3, [pc, #760]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	621a      	str	r2, [r3, #32]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0x3a4>
 80010a0:	4bbb      	ldr	r3, [pc, #748]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	4bba      	ldr	r3, [pc, #744]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	4bb8      	ldr	r3, [pc, #736]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	4bb7      	ldr	r3, [pc, #732]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80010b2:	2104      	movs	r1, #4
 80010b4:	438a      	bics	r2, r1
 80010b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d014      	beq.n	80010ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fbf2 	bl	80008a8 <HAL_GetTick>
 80010c4:	0003      	movs	r3, r0
 80010c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	e009      	b.n	80010de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ca:	f7ff fbed 	bl	80008a8 <HAL_GetTick>
 80010ce:	0002      	movs	r2, r0
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4aaf      	ldr	r2, [pc, #700]	@ (8001394 <HAL_RCC_OscConfig+0x680>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e19a      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010de:	4bac      	ldr	r3, [pc, #688]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	2202      	movs	r2, #2
 80010e4:	4013      	ands	r3, r2
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x3b6>
 80010e8:	e013      	b.n	8001112 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fbdd 	bl	80008a8 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f2:	e009      	b.n	8001108 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f4:	f7ff fbd8 	bl	80008a8 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4aa5      	ldr	r2, [pc, #660]	@ (8001394 <HAL_RCC_OscConfig+0x680>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e185      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	4ba1      	ldr	r3, [pc, #644]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001112:	231f      	movs	r3, #31
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111c:	4b9c      	ldr	r3, [pc, #624]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	4b9b      	ldr	r3, [pc, #620]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001122:	499d      	ldr	r1, [pc, #628]	@ (8001398 <HAL_RCC_OscConfig+0x684>)
 8001124:	400a      	ands	r2, r1
 8001126:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2210      	movs	r2, #16
 800112e:	4013      	ands	r3, r2
 8001130:	d063      	beq.n	80011fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d12a      	bne.n	8001190 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800113a:	4b95      	ldr	r3, [pc, #596]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800113c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800113e:	4b94      	ldr	r3, [pc, #592]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001140:	2104      	movs	r1, #4
 8001142:	430a      	orrs	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001146:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800114a:	4b91      	ldr	r3, [pc, #580]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fba9 	bl	80008a8 <HAL_GetTick>
 8001156:	0003      	movs	r3, r0
 8001158:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800115c:	f7ff fba4 	bl	80008a8 <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e152      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800116e:	4b88      	ldr	r3, [pc, #544]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001172:	2202      	movs	r2, #2
 8001174:	4013      	ands	r3, r2
 8001176:	d0f1      	beq.n	800115c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001178:	4b85      	ldr	r3, [pc, #532]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800117a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117c:	22f8      	movs	r2, #248	@ 0xf8
 800117e:	4393      	bics	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	00da      	lsls	r2, r3, #3
 8001188:	4b81      	ldr	r3, [pc, #516]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
 800118e:	e034      	b.n	80011fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	3305      	adds	r3, #5
 8001196:	d111      	bne.n	80011bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001198:	4b7d      	ldr	r3, [pc, #500]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800119a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800119c:	4b7c      	ldr	r3, [pc, #496]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800119e:	2104      	movs	r1, #4
 80011a0:	438a      	bics	r2, r1
 80011a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a8:	22f8      	movs	r2, #248	@ 0xf8
 80011aa:	4393      	bics	r3, r2
 80011ac:	0019      	movs	r1, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	00da      	lsls	r2, r3, #3
 80011b4:	4b76      	ldr	r3, [pc, #472]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ba:	e01e      	b.n	80011fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011bc:	4b74      	ldr	r3, [pc, #464]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c0:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011c8:	4b71      	ldr	r3, [pc, #452]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011cc:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	438a      	bics	r2, r1
 80011d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fb68 	bl	80008a8 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011de:	f7ff fb63 	bl	80008a8 <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e111      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011f0:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f4:	2202      	movs	r2, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d1f1      	bne.n	80011de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2220      	movs	r2, #32
 8001200:	4013      	ands	r3, r2
 8001202:	d05c      	beq.n	80012be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001204:	4b62      	ldr	r3, [pc, #392]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	220c      	movs	r2, #12
 800120a:	4013      	ands	r3, r2
 800120c:	2b0c      	cmp	r3, #12
 800120e:	d00e      	beq.n	800122e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001210:	4b5f      	ldr	r3, [pc, #380]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	220c      	movs	r2, #12
 8001216:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001218:	2b08      	cmp	r3, #8
 800121a:	d114      	bne.n	8001246 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	23c0      	movs	r3, #192	@ 0xc0
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	401a      	ands	r2, r3
 8001226:	23c0      	movs	r3, #192	@ 0xc0
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	429a      	cmp	r2, r3
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800122e:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	029b      	lsls	r3, r3, #10
 8001236:	4013      	ands	r3, r2
 8001238:	d040      	beq.n	80012bc <HAL_RCC_OscConfig+0x5a8>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d03c      	beq.n	80012bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0e6      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01b      	beq.n	8001286 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800124e:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001252:	4b4f      	ldr	r3, [pc, #316]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	0249      	lsls	r1, r1, #9
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fb24 	bl	80008a8 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001266:	f7ff fb1f 	bl	80008a8 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e0cd      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800127a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x552>
 8001284:	e01b      	b.n	80012be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001286:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800128c:	4943      	ldr	r1, [pc, #268]	@ (800139c <HAL_RCC_OscConfig+0x688>)
 800128e:	400a      	ands	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fb09 	bl	80008a8 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800129c:	f7ff fb04 	bl	80008a8 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e0b2      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80012b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	4013      	ands	r3, r2
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x588>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012bc:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d100      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5b4>
 80012c6:	e0a4      	b.n	8001412 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	220c      	movs	r2, #12
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d100      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5c2>
 80012d4:	e078      	b.n	80013c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d14c      	bne.n	8001378 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 80012e4:	492e      	ldr	r1, [pc, #184]	@ (80013a0 <HAL_RCC_OscConfig+0x68c>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fadd 	bl	80008a8 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff fad8 	bl	80008a8 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e086      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	049b      	lsls	r3, r3, #18
 800130e:	4013      	ands	r3, r2
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001316:	220f      	movs	r2, #15
 8001318:	4393      	bics	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001322:	430a      	orrs	r2, r1
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_RCC_OscConfig+0x690>)
 800132c:	4013      	ands	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	431a      	orrs	r2, r3
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800133c:	430a      	orrs	r2, r1
 800133e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 8001346:	2180      	movs	r1, #128	@ 0x80
 8001348:	0449      	lsls	r1, r1, #17
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff faab 	bl	80008a8 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff faa6 	bl	80008a8 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e054      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	049b      	lsls	r3, r3, #18
 8001372:	4013      	ands	r3, r2
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x644>
 8001376:	e04c      	b.n	8001412 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <HAL_RCC_OscConfig+0x67c>)
 800137e:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <HAL_RCC_OscConfig+0x68c>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fa90 	bl	80008a8 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x6a6>
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	40021000 	.word	0x40021000
 8001394:	00001388 	.word	0x00001388
 8001398:	efffffff 	.word	0xefffffff
 800139c:	fffeffff 	.word	0xfffeffff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fa7e 	bl	80008a8 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e02c      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_RCC_OscConfig+0x708>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	049b      	lsls	r3, r3, #18
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x694>
 80013c6:	e024      	b.n	8001412 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e01f      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_RCC_OscConfig+0x708>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_RCC_OscConfig+0x708>)
 80013dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	23c0      	movs	r3, #192	@ 0xc0
 80013e4:	025b      	lsls	r3, r3, #9
 80013e6:	401a      	ands	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d10e      	bne.n	800140e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	220f      	movs	r2, #15
 80013f4:	401a      	ands	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d107      	bne.n	800140e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	23f0      	movs	r3, #240	@ 0xf0
 8001402:	039b      	lsls	r3, r3, #14
 8001404:	401a      	ands	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b008      	add	sp, #32
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0bf      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001434:	4b61      	ldr	r3, [pc, #388]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d911      	bls.n	8001466 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	4b5b      	ldr	r3, [pc, #364]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001454:	4b59      	ldr	r3, [pc, #356]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0a6      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d015      	beq.n	800149c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2204      	movs	r2, #4
 8001476:	4013      	ands	r3, r2
 8001478:	d006      	beq.n	8001488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800147a:	4b51      	ldr	r3, [pc, #324]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4b50      	ldr	r3, [pc, #320]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001480:	21e0      	movs	r1, #224	@ 0xe0
 8001482:	00c9      	lsls	r1, r1, #3
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b4d      	ldr	r3, [pc, #308]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	22f0      	movs	r2, #240	@ 0xf0
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	4b4a      	ldr	r3, [pc, #296]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	d04c      	beq.n	8001540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b44      	ldr	r3, [pc, #272]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	029b      	lsls	r3, r3, #10
 80014b6:	4013      	ands	r3, r2
 80014b8:	d120      	bne.n	80014fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07a      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b3e      	ldr	r3, [pc, #248]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	049b      	lsls	r3, r3, #18
 80014ce:	4013      	ands	r3, r2
 80014d0:	d114      	bne.n	80014fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06e      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014de:	4b38      	ldr	r3, [pc, #224]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	029b      	lsls	r3, r3, #10
 80014e6:	4013      	ands	r3, r2
 80014e8:	d108      	bne.n	80014fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e062      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e05b      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fc:	4b30      	ldr	r3, [pc, #192]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	4393      	bics	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001510:	f7ff f9ca 	bl	80008a8 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001518:	e009      	b.n	800152e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151a:	f7ff f9c5 	bl	80008a8 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <HAL_RCC_ClockConfig+0x1a4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e042      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	220c      	movs	r2, #12
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	429a      	cmp	r2, r3
 800153e:	d1ec      	bne.n	800151a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d211      	bcs.n	8001572 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_RCC_ClockConfig+0x19c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e020      	b.n	80015b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d009      	beq.n	8001590 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <HAL_RCC_ClockConfig+0x1a8>)
 8001582:	4013      	ands	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001590:	f000 f820 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001594:	0001      	movs	r1, r0
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	220f      	movs	r2, #15
 800159e:	4013      	ands	r3, r2
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_RCC_ClockConfig+0x1ac>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	000a      	movs	r2, r1
 80015a6:	40da      	lsrs	r2, r3
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b0>)
 80015aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff f935 	bl	800081c <HAL_InitTick>
  
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	00001388 	.word	0x00001388
 80015c8:	fffff8ff 	.word	0xfffff8ff
 80015cc:	08002660 	.word	0x08002660
 80015d0:	20000000 	.word	0x20000000

080015d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	220c      	movs	r2, #12
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	d046      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0xb8>
 80015fe:	d848      	bhi.n	8001692 <HAL_RCC_GetSysClockFreq+0xbe>
 8001600:	2b04      	cmp	r3, #4
 8001602:	d002      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x36>
 8001604:	2b08      	cmp	r3, #8
 8001606:	d003      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x3c>
 8001608:	e043      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800160c:	613b      	str	r3, [r7, #16]
      break;
 800160e:	e043      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	220f      	movs	r2, #15
 8001616:	4013      	ands	r3, r2
 8001618:	4a24      	ldr	r2, [pc, #144]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xd8>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001622:	220f      	movs	r2, #15
 8001624:	4013      	ands	r3, r2
 8001626:	4a22      	ldr	r2, [pc, #136]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	23c0      	movs	r3, #192	@ 0xc0
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	401a      	ands	r2, r3
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	429a      	cmp	r2, r3
 800163a:	d109      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001640:	f7fe fd62 	bl	8000108 <__udivsi3>
 8001644:	0003      	movs	r3, r0
 8001646:	001a      	movs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4353      	muls	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e01a      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	23c0      	movs	r3, #192	@ 0xc0
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	401a      	ands	r2, r3
 8001658:	23c0      	movs	r3, #192	@ 0xc0
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	429a      	cmp	r2, r3
 800165e:	d109      	bne.n	8001674 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001664:	f7fe fd50 	bl	8000108 <__udivsi3>
 8001668:	0003      	movs	r3, r0
 800166a:	001a      	movs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4353      	muls	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e008      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001678:	f7fe fd46 	bl	8000108 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4353      	muls	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	613b      	str	r3, [r7, #16]
      break;
 800168a:	e005      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800168e:	613b      	str	r3, [r7, #16]
      break;
 8001690:	e002      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001694:	613b      	str	r3, [r7, #16]
      break;
 8001696:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001698:	693b      	ldr	r3, [r7, #16]
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b006      	add	sp, #24
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	40021000 	.word	0x40021000
 80016a8:	007a1200 	.word	0x007a1200
 80016ac:	08002670 	.word	0x08002670
 80016b0:	08002680 	.word	0x08002680
 80016b4:	02dc6c00 	.word	0x02dc6c00

080016b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e042      	b.n	8001750 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	223d      	movs	r2, #61	@ 0x3d
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	223c      	movs	r2, #60	@ 0x3c
 80016da:	2100      	movs	r1, #0
 80016dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7fe ffb3 	bl	800064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	223d      	movs	r2, #61	@ 0x3d
 80016ea:	2102      	movs	r1, #2
 80016ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f000 fb6b 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2246      	movs	r2, #70	@ 0x46
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	223e      	movs	r2, #62	@ 0x3e
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	223f      	movs	r2, #63	@ 0x3f
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2240      	movs	r2, #64	@ 0x40
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2241      	movs	r2, #65	@ 0x41
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2242      	movs	r2, #66	@ 0x42
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2243      	movs	r2, #67	@ 0x43
 8001732:	2101      	movs	r1, #1
 8001734:	5499      	strb	r1, [r3, r2]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2244      	movs	r2, #68	@ 0x44
 800173a:	2101      	movs	r1, #1
 800173c:	5499      	strb	r1, [r3, r2]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2245      	movs	r2, #69	@ 0x45
 8001742:	2101      	movs	r1, #1
 8001744:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	223d      	movs	r2, #61	@ 0x3d
 800174a:	2101      	movs	r1, #1
 800174c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e042      	b.n	80017f0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	223d      	movs	r2, #61	@ 0x3d
 800176e:	5c9b      	ldrb	r3, [r3, r2]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d107      	bne.n	8001786 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	223c      	movs	r2, #60	@ 0x3c
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0018      	movs	r0, r3
 8001782:	f000 f839 	bl	80017f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	223d      	movs	r2, #61	@ 0x3d
 800178a:	2102      	movs	r1, #2
 800178c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	0019      	movs	r1, r3
 8001798:	0010      	movs	r0, r2
 800179a:	f000 fb1b 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2246      	movs	r2, #70	@ 0x46
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	223e      	movs	r2, #62	@ 0x3e
 80017aa:	2101      	movs	r1, #1
 80017ac:	5499      	strb	r1, [r3, r2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	223f      	movs	r2, #63	@ 0x3f
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2240      	movs	r2, #64	@ 0x40
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2241      	movs	r2, #65	@ 0x41
 80017c2:	2101      	movs	r1, #1
 80017c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2242      	movs	r2, #66	@ 0x42
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2243      	movs	r2, #67	@ 0x43
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2244      	movs	r2, #68	@ 0x44
 80017da:	2101      	movs	r1, #1
 80017dc:	5499      	strb	r1, [r3, r2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2245      	movs	r2, #69	@ 0x45
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	223d      	movs	r2, #61	@ 0x3d
 80017ea:	2101      	movs	r1, #1
 80017ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b002      	add	sp, #8
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e090      	b.n	800193e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	223d      	movs	r2, #61	@ 0x3d
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	223c      	movs	r2, #60	@ 0x3c
 800182c:	2100      	movs	r1, #0
 800182e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	0018      	movs	r0, r3
 8001834:	f7fe ff2a 	bl	800068c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	223d      	movs	r2, #61	@ 0x3d
 800183c:	2102      	movs	r1, #2
 800183e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	493f      	ldr	r1, [pc, #252]	@ (8001948 <HAL_TIM_Encoder_Init+0x140>)
 800184c:	400a      	ands	r2, r1
 800184e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3304      	adds	r3, #4
 8001858:	0019      	movs	r1, r3
 800185a:	0010      	movs	r0, r2
 800185c:	f000 faba 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4313      	orrs	r3, r2
 8001880:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4a31      	ldr	r2, [pc, #196]	@ (800194c <HAL_TIM_Encoder_Init+0x144>)
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4a2c      	ldr	r2, [pc, #176]	@ (8001950 <HAL_TIM_Encoder_Init+0x148>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <HAL_TIM_Encoder_Init+0x14c>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	4313      	orrs	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	011a      	lsls	r2, r3, #4
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	4313      	orrs	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2222      	movs	r2, #34	@ 0x22
 80018d6:	4393      	bics	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2288      	movs	r2, #136	@ 0x88
 80018de:	4393      	bics	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4313      	orrs	r3, r2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2246      	movs	r2, #70	@ 0x46
 8001910:	2101      	movs	r1, #1
 8001912:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	223e      	movs	r2, #62	@ 0x3e
 8001918:	2101      	movs	r1, #1
 800191a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	223f      	movs	r2, #63	@ 0x3f
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2242      	movs	r2, #66	@ 0x42
 8001928:	2101      	movs	r1, #1
 800192a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2243      	movs	r2, #67	@ 0x43
 8001930:	2101      	movs	r1, #1
 8001932:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	223d      	movs	r2, #61	@ 0x3d
 8001938:	2101      	movs	r1, #1
 800193a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	ffffbff8 	.word	0xffffbff8
 800194c:	fffffcfc 	.word	0xfffffcfc
 8001950:	fffff3f3 	.word	0xfffff3f3
 8001954:	ffff0f0f 	.word	0xffff0f0f

08001958 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001962:	200f      	movs	r0, #15
 8001964:	183b      	adds	r3, r7, r0
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	213e      	movs	r1, #62	@ 0x3e
 800196a:	5c52      	ldrb	r2, [r2, r1]
 800196c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800196e:	230e      	movs	r3, #14
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	213f      	movs	r1, #63	@ 0x3f
 8001976:	5c52      	ldrb	r2, [r2, r1]
 8001978:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800197a:	240d      	movs	r4, #13
 800197c:	193b      	adds	r3, r7, r4
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	2142      	movs	r1, #66	@ 0x42
 8001982:	5c52      	ldrb	r2, [r2, r1]
 8001984:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001986:	230c      	movs	r3, #12
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	2143      	movs	r1, #67	@ 0x43
 800198e:	5c52      	ldrb	r2, [r2, r1]
 8001990:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d112      	bne.n	80019be <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001998:	183b      	adds	r3, r7, r0
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d103      	bne.n	80019a8 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d001      	beq.n	80019ac <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e075      	b.n	8001a98 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	223e      	movs	r2, #62	@ 0x3e
 80019b0:	2102      	movs	r1, #2
 80019b2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2242      	movs	r2, #66	@ 0x42
 80019b8:	2102      	movs	r1, #2
 80019ba:	5499      	strb	r1, [r3, r2]
 80019bc:	e03d      	b.n	8001a3a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d114      	bne.n	80019ee <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80019c4:	230e      	movs	r3, #14
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d104      	bne.n	80019d8 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80019ce:	230c      	movs	r3, #12
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d001      	beq.n	80019dc <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e05d      	b.n	8001a98 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	223f      	movs	r2, #63	@ 0x3f
 80019e0:	2102      	movs	r1, #2
 80019e2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2243      	movs	r2, #67	@ 0x43
 80019e8:	2102      	movs	r1, #2
 80019ea:	5499      	strb	r1, [r3, r2]
 80019ec:	e025      	b.n	8001a3a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80019ee:	230f      	movs	r3, #15
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d10e      	bne.n	8001a16 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80019f8:	230e      	movs	r3, #14
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d109      	bne.n	8001a16 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a02:	230d      	movs	r3, #13
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d104      	bne.n	8001a16 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d001      	beq.n	8001a1a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e03e      	b.n	8001a98 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	223e      	movs	r2, #62	@ 0x3e
 8001a1e:	2102      	movs	r1, #2
 8001a20:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	223f      	movs	r2, #63	@ 0x3f
 8001a26:	2102      	movs	r1, #2
 8001a28:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2242      	movs	r2, #66	@ 0x42
 8001a2e:	2102      	movs	r1, #2
 8001a30:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2243      	movs	r2, #67	@ 0x43
 8001a36:	2102      	movs	r1, #2
 8001a38:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_TIM_Encoder_Start+0xf0>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d008      	beq.n	8001a58 <HAL_TIM_Encoder_Start+0x100>
 8001a46:	e00f      	b.n	8001a68 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2100      	movs	r1, #0
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 fce3 	bl	800241c <TIM_CCxChannelCmd>
      break;
 8001a56:	e016      	b.n	8001a86 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2104      	movs	r1, #4
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 fcdb 	bl	800241c <TIM_CCxChannelCmd>
      break;
 8001a66:	e00e      	b.n	8001a86 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2100      	movs	r1, #0
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 fcd3 	bl	800241c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fccc 	bl	800241c <TIM_CCxChannelCmd>
      break;
 8001a84:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b005      	add	sp, #20
 8001a9e:	bd90      	pop	{r4, r7, pc}

08001aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2317      	movs	r3, #23
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	223c      	movs	r2, #60	@ 0x3c
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e0ad      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	223c      	movs	r2, #60	@ 0x3c
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d100      	bne.n	8001ad2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ad0:	e076      	b.n	8001bc0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d900      	bls.n	8001ada <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001ad8:	e095      	b.n	8001c06 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d04e      	beq.n	8001b7e <HAL_TIM_PWM_ConfigChannel+0xde>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d900      	bls.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001ae6:	e08e      	b.n	8001c06 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d021      	beq.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001af4:	e087      	b.n	8001c06 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	0011      	movs	r1, r2
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 f9f6 	bl	8001ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2108      	movs	r1, #8
 8001b10:	430a      	orrs	r2, r1
 8001b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2104      	movs	r1, #4
 8001b20:	438a      	bics	r2, r1
 8001b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6999      	ldr	r1, [r3, #24]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	619a      	str	r2, [r3, #24]
      break;
 8001b36:	e06b      	b.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	0011      	movs	r1, r2
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 fa5d 	bl	8002000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2180      	movs	r1, #128	@ 0x80
 8001b52:	0109      	lsls	r1, r1, #4
 8001b54:	430a      	orrs	r2, r1
 8001b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4931      	ldr	r1, [pc, #196]	@ (8001c28 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6999      	ldr	r1, [r3, #24]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	021a      	lsls	r2, r3, #8
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	619a      	str	r2, [r3, #24]
      break;
 8001b7c:	e048      	b.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 fabe 	bl	8002108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2108      	movs	r1, #8
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69da      	ldr	r2, [r3, #28]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	438a      	bics	r2, r1
 8001baa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69d9      	ldr	r1, [r3, #28]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	61da      	str	r2, [r3, #28]
      break;
 8001bbe:	e027      	b.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fb23 	bl	8002214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69da      	ldr	r2, [r3, #28]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2180      	movs	r1, #128	@ 0x80
 8001bda:	0109      	lsls	r1, r1, #4
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	490f      	ldr	r1, [pc, #60]	@ (8001c28 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69d9      	ldr	r1, [r3, #28]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	021a      	lsls	r2, r3, #8
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	61da      	str	r2, [r3, #28]
      break;
 8001c04:	e004      	b.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001c06:	2317      	movs	r3, #23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	223c      	movs	r2, #60	@ 0x3c
 8001c14:	2100      	movs	r1, #0
 8001c16:	5499      	strb	r1, [r3, r2]

  return status;
 8001c18:	2317      	movs	r3, #23
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b006      	add	sp, #24
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	fffffbff 	.word	0xfffffbff

08001c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	230f      	movs	r3, #15
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	223c      	movs	r2, #60	@ 0x3c
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_TIM_ConfigClockSource+0x20>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e0bc      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x19a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	223c      	movs	r2, #60	@ 0x3c
 8001c50:	2101      	movs	r1, #1
 8001c52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	223d      	movs	r2, #61	@ 0x3d
 8001c58:	2102      	movs	r1, #2
 8001c5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2277      	movs	r2, #119	@ 0x77
 8001c68:	4393      	bics	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	0192      	lsls	r2, r2, #6
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d040      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0xde>
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	0192      	lsls	r2, r2, #6
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d900      	bls.n	8001c92 <HAL_TIM_ConfigClockSource+0x66>
 8001c90:	e088      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001c92:	2280      	movs	r2, #128	@ 0x80
 8001c94:	0152      	lsls	r2, r2, #5
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d100      	bne.n	8001c9c <HAL_TIM_ConfigClockSource+0x70>
 8001c9a:	e088      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x182>
 8001c9c:	2280      	movs	r2, #128	@ 0x80
 8001c9e:	0152      	lsls	r2, r2, #5
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d900      	bls.n	8001ca6 <HAL_TIM_ConfigClockSource+0x7a>
 8001ca4:	e07e      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001ca6:	2b70      	cmp	r3, #112	@ 0x70
 8001ca8:	d018      	beq.n	8001cdc <HAL_TIM_ConfigClockSource+0xb0>
 8001caa:	d900      	bls.n	8001cae <HAL_TIM_ConfigClockSource+0x82>
 8001cac:	e07a      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001cae:	2b60      	cmp	r3, #96	@ 0x60
 8001cb0:	d04f      	beq.n	8001d52 <HAL_TIM_ConfigClockSource+0x126>
 8001cb2:	d900      	bls.n	8001cb6 <HAL_TIM_ConfigClockSource+0x8a>
 8001cb4:	e076      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001cb6:	2b50      	cmp	r3, #80	@ 0x50
 8001cb8:	d03b      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0x106>
 8001cba:	d900      	bls.n	8001cbe <HAL_TIM_ConfigClockSource+0x92>
 8001cbc:	e072      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001cbe:	2b40      	cmp	r3, #64	@ 0x40
 8001cc0:	d057      	beq.n	8001d72 <HAL_TIM_ConfigClockSource+0x146>
 8001cc2:	d900      	bls.n	8001cc6 <HAL_TIM_ConfigClockSource+0x9a>
 8001cc4:	e06e      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001cc6:	2b30      	cmp	r3, #48	@ 0x30
 8001cc8:	d063      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x166>
 8001cca:	d86b      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d060      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x166>
 8001cd0:	d868      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d05d      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x166>
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d05b      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x166>
 8001cda:	e063      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cec:	f000 fb76 	bl	80023dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2277      	movs	r2, #119	@ 0x77
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
      break;
 8001d08:	e052      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d1a:	f000 fb5f 	bl	80023dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	01c9      	lsls	r1, r1, #7
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
      break;
 8001d30:	e03e      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d3e:	001a      	movs	r2, r3
 8001d40:	f000 fad2 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2150      	movs	r1, #80	@ 0x50
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 fb2c 	bl	80023a8 <TIM_ITRx_SetConfig>
      break;
 8001d50:	e02e      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d5e:	001a      	movs	r2, r3
 8001d60:	f000 faf0 	bl	8002344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2160      	movs	r1, #96	@ 0x60
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 fb1c 	bl	80023a8 <TIM_ITRx_SetConfig>
      break;
 8001d70:	e01e      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d7e:	001a      	movs	r2, r3
 8001d80:	f000 fab2 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2140      	movs	r1, #64	@ 0x40
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 fb0c 	bl	80023a8 <TIM_ITRx_SetConfig>
      break;
 8001d90:	e00e      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	0010      	movs	r0, r2
 8001d9e:	f000 fb03 	bl	80023a8 <TIM_ITRx_SetConfig>
      break;
 8001da2:	e005      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001da4:	230f      	movs	r3, #15
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
      break;
 8001dac:	e000      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001dae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	223d      	movs	r2, #61	@ 0x3d
 8001db4:	2101      	movs	r1, #1
 8001db6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	223c      	movs	r2, #60	@ 0x3c
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

  return status;
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	ffff00ff 	.word	0xffff00ff

08001dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed4 <TIM_Base_SetConfig+0x100>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d008      	beq.n	8001dfe <TIM_Base_SetConfig+0x2a>
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	05db      	lsls	r3, r3, #23
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0x2a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a37      	ldr	r2, [pc, #220]	@ (8001ed8 <TIM_Base_SetConfig+0x104>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2270      	movs	r2, #112	@ 0x70
 8001e02:	4393      	bics	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a30      	ldr	r2, [pc, #192]	@ (8001ed4 <TIM_Base_SetConfig+0x100>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <TIM_Base_SetConfig+0x76>
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	05db      	lsls	r3, r3, #23
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d013      	beq.n	8001e4a <TIM_Base_SetConfig+0x76>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed8 <TIM_Base_SetConfig+0x104>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00f      	beq.n	8001e4a <TIM_Base_SetConfig+0x76>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001edc <TIM_Base_SetConfig+0x108>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0x76>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee0 <TIM_Base_SetConfig+0x10c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0x76>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <TIM_Base_SetConfig+0x110>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0x76>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <TIM_Base_SetConfig+0x114>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <TIM_Base_SetConfig+0x118>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	4393      	bics	r3, r2
 8001e62:	001a      	movs	r2, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <TIM_Base_SetConfig+0x100>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xce>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <TIM_Base_SetConfig+0x10c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0xce>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a13      	ldr	r2, [pc, #76]	@ (8001ee4 <TIM_Base_SetConfig+0x110>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0xce>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <TIM_Base_SetConfig+0x114>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d103      	bne.n	8001eaa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
  }
}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40002000 	.word	0x40002000
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40014400 	.word	0x40014400
 8001ee8:	40014800 	.word	0x40014800
 8001eec:	fffffcff 	.word	0xfffffcff

08001ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4393      	bics	r3, r2
 8001f08:	001a      	movs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2270      	movs	r2, #112	@ 0x70
 8001f1e:	4393      	bics	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4393      	bics	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4393      	bics	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a27      	ldr	r2, [pc, #156]	@ (8001fe8 <TIM_OC1_SetConfig+0xf8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_OC1_SetConfig+0x76>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a26      	ldr	r2, [pc, #152]	@ (8001fec <TIM_OC1_SetConfig+0xfc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <TIM_OC1_SetConfig+0x76>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a25      	ldr	r2, [pc, #148]	@ (8001ff0 <TIM_OC1_SetConfig+0x100>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_OC1_SetConfig+0x76>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <TIM_OC1_SetConfig+0x104>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10c      	bne.n	8001f80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4393      	bics	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <TIM_OC1_SetConfig+0xf8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00b      	beq.n	8001fa0 <TIM_OC1_SetConfig+0xb0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <TIM_OC1_SetConfig+0xfc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <TIM_OC1_SetConfig+0xb0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <TIM_OC1_SetConfig+0x100>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_OC1_SetConfig+0xb0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	@ (8001ff4 <TIM_OC1_SetConfig+0x104>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d111      	bne.n	8001fc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4a15      	ldr	r2, [pc, #84]	@ (8001ff8 <TIM_OC1_SetConfig+0x108>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <TIM_OC1_SetConfig+0x10c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	621a      	str	r2, [r3, #32]
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	40014400 	.word	0x40014400
 8001ff4:	40014800 	.word	0x40014800
 8001ff8:	fffffeff 	.word	0xfffffeff
 8001ffc:	fffffdff 	.word	0xfffffdff

08002000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	2210      	movs	r2, #16
 8002016:	4393      	bics	r3, r2
 8002018:	001a      	movs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a2e      	ldr	r2, [pc, #184]	@ (80020e8 <TIM_OC2_SetConfig+0xe8>)
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <TIM_OC2_SetConfig+0xec>)
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2220      	movs	r2, #32
 800204a:	4393      	bics	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a24      	ldr	r2, [pc, #144]	@ (80020f0 <TIM_OC2_SetConfig+0xf0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10d      	bne.n	800207e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2280      	movs	r2, #128	@ 0x80
 8002066:	4393      	bics	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2240      	movs	r2, #64	@ 0x40
 800207a:	4393      	bics	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <TIM_OC2_SetConfig+0xf0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_OC2_SetConfig+0x9e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <TIM_OC2_SetConfig+0xf4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_OC2_SetConfig+0x9e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a19      	ldr	r2, [pc, #100]	@ (80020f8 <TIM_OC2_SetConfig+0xf8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_OC2_SetConfig+0x9e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <TIM_OC2_SetConfig+0xfc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d113      	bne.n	80020c6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <TIM_OC2_SetConfig+0x100>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <TIM_OC2_SetConfig+0x104>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	46c0      	nop			@ (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b006      	add	sp, #24
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	ffff8fff 	.word	0xffff8fff
 80020ec:	fffffcff 	.word	0xfffffcff
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40014400 	.word	0x40014400
 80020fc:	40014800 	.word	0x40014800
 8002100:	fffffbff 	.word	0xfffffbff
 8002104:	fffff7ff 	.word	0xfffff7ff

08002108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a33      	ldr	r2, [pc, #204]	@ (80021ec <TIM_OC3_SetConfig+0xe4>)
 800211e:	401a      	ands	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2270      	movs	r2, #112	@ 0x70
 8002134:	4393      	bics	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2203      	movs	r2, #3
 800213c:	4393      	bics	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4a28      	ldr	r2, [pc, #160]	@ (80021f0 <TIM_OC3_SetConfig+0xe8>)
 800214e:	4013      	ands	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a24      	ldr	r2, [pc, #144]	@ (80021f4 <TIM_OC3_SetConfig+0xec>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10d      	bne.n	8002182 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <TIM_OC3_SetConfig+0xf0>)
 800216a:	4013      	ands	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4a1f      	ldr	r2, [pc, #124]	@ (80021fc <TIM_OC3_SetConfig+0xf4>)
 800217e:	4013      	ands	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <TIM_OC3_SetConfig+0xec>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00b      	beq.n	80021a2 <TIM_OC3_SetConfig+0x9a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <TIM_OC3_SetConfig+0xf8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <TIM_OC3_SetConfig+0x9a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <TIM_OC3_SetConfig+0xfc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d003      	beq.n	80021a2 <TIM_OC3_SetConfig+0x9a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1a      	ldr	r2, [pc, #104]	@ (8002208 <TIM_OC3_SetConfig+0x100>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d113      	bne.n	80021ca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4a19      	ldr	r2, [pc, #100]	@ (800220c <TIM_OC3_SetConfig+0x104>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <TIM_OC3_SetConfig+0x108>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	621a      	str	r2, [r3, #32]
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b006      	add	sp, #24
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	fffffeff 	.word	0xfffffeff
 80021f0:	fffffdff 	.word	0xfffffdff
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	fffff7ff 	.word	0xfffff7ff
 80021fc:	fffffbff 	.word	0xfffffbff
 8002200:	40014000 	.word	0x40014000
 8002204:	40014400 	.word	0x40014400
 8002208:	40014800 	.word	0x40014800
 800220c:	ffffefff 	.word	0xffffefff
 8002210:	ffffdfff 	.word	0xffffdfff

08002214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a26      	ldr	r2, [pc, #152]	@ (80022c4 <TIM_OC4_SetConfig+0xb0>)
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <TIM_OC4_SetConfig+0xb4>)
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a21      	ldr	r2, [pc, #132]	@ (80022cc <TIM_OC4_SetConfig+0xb8>)
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4a1d      	ldr	r2, [pc, #116]	@ (80022d0 <TIM_OC4_SetConfig+0xbc>)
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	031b      	lsls	r3, r3, #12
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <TIM_OC4_SetConfig+0xc0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <TIM_OC4_SetConfig+0x78>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a18      	ldr	r2, [pc, #96]	@ (80022d8 <TIM_OC4_SetConfig+0xc4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <TIM_OC4_SetConfig+0x78>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a17      	ldr	r2, [pc, #92]	@ (80022dc <TIM_OC4_SetConfig+0xc8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_OC4_SetConfig+0x78>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a16      	ldr	r2, [pc, #88]	@ (80022e0 <TIM_OC4_SetConfig+0xcc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d109      	bne.n	80022a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4a15      	ldr	r2, [pc, #84]	@ (80022e4 <TIM_OC4_SetConfig+0xd0>)
 8002290:	4013      	ands	r3, r2
 8002292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	621a      	str	r2, [r3, #32]
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	ffffefff 	.word	0xffffefff
 80022c8:	ffff8fff 	.word	0xffff8fff
 80022cc:	fffffcff 	.word	0xfffffcff
 80022d0:	ffffdfff 	.word	0xffffdfff
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800
 80022e4:	ffffbfff 	.word	0xffffbfff

080022e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	2201      	movs	r2, #1
 8002300:	4393      	bics	r3, r2
 8002302:	001a      	movs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	22f0      	movs	r2, #240	@ 0xf0
 8002312:	4393      	bics	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	220a      	movs	r2, #10
 8002324:	4393      	bics	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	621a      	str	r2, [r3, #32]
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b006      	add	sp, #24
 8002342:	bd80      	pop	{r7, pc}

08002344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2210      	movs	r2, #16
 800235c:	4393      	bics	r3, r2
 800235e:	001a      	movs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <TIM_TI2_ConfigInputStage+0x60>)
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	031b      	lsls	r3, r3, #12
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	22a0      	movs	r2, #160	@ 0xa0
 8002380:	4393      	bics	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b006      	add	sp, #24
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	ffff0fff 	.word	0xffff0fff

080023a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2270      	movs	r2, #112	@ 0x70
 80023bc:	4393      	bics	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	2207      	movs	r2, #7
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	609a      	str	r2, [r3, #8]
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <TIM_ETR_SetConfig+0x3c>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	021a      	lsls	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	431a      	orrs	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b006      	add	sp, #24
 8002416:	bd80      	pop	{r7, pc}
 8002418:	ffff00ff 	.word	0xffff00ff

0800241c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	221f      	movs	r2, #31
 800242c:	4013      	ands	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	409a      	lsls	r2, r3
 8002432:	0013      	movs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	43d2      	mvns	r2, r2
 800243e:	401a      	ands	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	211f      	movs	r1, #31
 800244c:	400b      	ands	r3, r1
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4099      	lsls	r1, r3
 8002452:	000b      	movs	r3, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b006      	add	sp, #24
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	223c      	movs	r2, #60	@ 0x3c
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002478:	2302      	movs	r3, #2
 800247a:	e047      	b.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	223c      	movs	r2, #60	@ 0x3c
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	223d      	movs	r2, #61	@ 0x3d
 8002488:	2102      	movs	r1, #2
 800248a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2270      	movs	r2, #112	@ 0x70
 80024a0:	4393      	bics	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00f      	beq.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	05db      	lsls	r3, r3, #23
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d009      	beq.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	@ (800251c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d10c      	bne.n	80024fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	4393      	bics	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	223d      	movs	r2, #61	@ 0x3d
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223c      	movs	r2, #60	@ 0x3c
 8002506:	2100      	movs	r1, #0
 8002508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b004      	add	sp, #16
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40000400 	.word	0x40000400
 800251c:	40014000 	.word	0x40014000

08002520 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223c      	movs	r2, #60	@ 0x3c
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e03e      	b.n	80025ba <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	223c      	movs	r2, #60	@ 0x3c
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	22ff      	movs	r2, #255	@ 0xff
 8002548:	4393      	bics	r3, r2
 800254a:	001a      	movs	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002558:	401a      	ands	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002566:	401a      	ands	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a16      	ldr	r2, [pc, #88]	@ (80025cc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002574:	401a      	ands	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a13      	ldr	r2, [pc, #76]	@ (80025d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002582:	401a      	ands	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002590:	401a      	ands	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800259e:	401a      	ands	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	223c      	movs	r2, #60	@ 0x3c
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	fffffcff 	.word	0xfffffcff
 80025c8:	fffffbff 	.word	0xfffffbff
 80025cc:	fffff7ff 	.word	0xfffff7ff
 80025d0:	ffffefff 	.word	0xffffefff
 80025d4:	ffffdfff 	.word	0xffffdfff
 80025d8:	ffffbfff 	.word	0xffffbfff

080025dc <memset>:
 80025dc:	0003      	movs	r3, r0
 80025de:	1882      	adds	r2, r0, r2
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d100      	bne.n	80025e6 <memset+0xa>
 80025e4:	4770      	bx	lr
 80025e6:	7019      	strb	r1, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	e7f9      	b.n	80025e0 <memset+0x4>

080025ec <__libc_init_array>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	2600      	movs	r6, #0
 80025f0:	4c0c      	ldr	r4, [pc, #48]	@ (8002624 <__libc_init_array+0x38>)
 80025f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002628 <__libc_init_array+0x3c>)
 80025f4:	1b64      	subs	r4, r4, r5
 80025f6:	10a4      	asrs	r4, r4, #2
 80025f8:	42a6      	cmp	r6, r4
 80025fa:	d109      	bne.n	8002610 <__libc_init_array+0x24>
 80025fc:	2600      	movs	r6, #0
 80025fe:	f000 f823 	bl	8002648 <_init>
 8002602:	4c0a      	ldr	r4, [pc, #40]	@ (800262c <__libc_init_array+0x40>)
 8002604:	4d0a      	ldr	r5, [pc, #40]	@ (8002630 <__libc_init_array+0x44>)
 8002606:	1b64      	subs	r4, r4, r5
 8002608:	10a4      	asrs	r4, r4, #2
 800260a:	42a6      	cmp	r6, r4
 800260c:	d105      	bne.n	800261a <__libc_init_array+0x2e>
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	00b3      	lsls	r3, r6, #2
 8002612:	58eb      	ldr	r3, [r5, r3]
 8002614:	4798      	blx	r3
 8002616:	3601      	adds	r6, #1
 8002618:	e7ee      	b.n	80025f8 <__libc_init_array+0xc>
 800261a:	00b3      	lsls	r3, r6, #2
 800261c:	58eb      	ldr	r3, [r5, r3]
 800261e:	4798      	blx	r3
 8002620:	3601      	adds	r6, #1
 8002622:	e7f2      	b.n	800260a <__libc_init_array+0x1e>
 8002624:	08002690 	.word	0x08002690
 8002628:	08002690 	.word	0x08002690
 800262c:	08002694 	.word	0x08002694
 8002630:	08002690 	.word	0x08002690

08002634 <memcpy>:
 8002634:	2300      	movs	r3, #0
 8002636:	b510      	push	{r4, lr}
 8002638:	429a      	cmp	r2, r3
 800263a:	d100      	bne.n	800263e <memcpy+0xa>
 800263c:	bd10      	pop	{r4, pc}
 800263e:	5ccc      	ldrb	r4, [r1, r3]
 8002640:	54c4      	strb	r4, [r0, r3]
 8002642:	3301      	adds	r3, #1
 8002644:	e7f8      	b.n	8002638 <memcpy+0x4>
	...

08002648 <_init>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr

08002654 <_fini>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr
