
PD_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005260  08005260  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005260  08005260  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005260  08005260  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005268  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000005c  080052c4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080052c4  00007454  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd46  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002226  00000000  00000000  00014dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00016ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ba  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8d3  00000000  00000000  00018622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ba6  00000000  00000000  00032ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e51  00000000  00000000  00043a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc8ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b4  00000000  00000000  000dc930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dfce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800503c 	.word	0x0800503c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800503c 	.word	0x0800503c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <MX_GPIO_Init+0x2c>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <MX_GPIO_Init+0x2c>)
 8000250:	2180      	movs	r1, #128	@ 0x80
 8000252:	0289      	lsls	r1, r1, #10
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <MX_GPIO_Init+0x2c>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2380      	movs	r3, #128	@ 0x80
 800025e:	029b      	lsls	r3, r3, #10
 8000260:	4013      	ands	r3, r2
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]

}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	40021000 	.word	0x40021000

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b0d3      	sub	sp, #332	@ 0x14c
 8000278:	af1e      	add	r7, sp, #120	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fd4d 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f8a9 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f7ff ffdf 	bl	8000244 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000286:	f000 fa61 	bl	800074c <MX_TIM1_Init>
  MX_TIM2_Init();
 800028a:	f000 fb23 	bl	80008d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800028e:	f000 fc9d 	bl	8000bcc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000292:	f000 fb81 	bl	8000998 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Initializing
  motor_initEncoder(htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000296:	4c42      	ldr	r4, [pc, #264]	@ (80003a0 <main+0x12c>)
 8000298:	2304      	movs	r3, #4
 800029a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800029c:	2300      	movs	r3, #0
 800029e:	930e      	str	r3, [sp, #56]	@ 0x38
 80002a0:	466b      	mov	r3, sp
 80002a2:	0018      	movs	r0, r3
 80002a4:	0023      	movs	r3, r4
 80002a6:	3310      	adds	r3, #16
 80002a8:	2238      	movs	r2, #56	@ 0x38
 80002aa:	0019      	movs	r1, r3
 80002ac:	f003 fdd2 	bl	8003e54 <memcpy>
 80002b0:	6820      	ldr	r0, [r4, #0]
 80002b2:	6861      	ldr	r1, [r4, #4]
 80002b4:	68a2      	ldr	r2, [r4, #8]
 80002b6:	68e3      	ldr	r3, [r4, #12]
 80002b8:	f000 f8f6 	bl	80004a8 <motor_initEncoder>
  motor_initPWM(htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80002bc:	4c39      	ldr	r4, [pc, #228]	@ (80003a4 <main+0x130>)
 80002be:	2304      	movs	r3, #4
 80002c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80002c2:	2300      	movs	r3, #0
 80002c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80002c6:	466b      	mov	r3, sp
 80002c8:	0018      	movs	r0, r3
 80002ca:	0023      	movs	r3, r4
 80002cc:	3310      	adds	r3, #16
 80002ce:	2238      	movs	r2, #56	@ 0x38
 80002d0:	0019      	movs	r1, r3
 80002d2:	f003 fdbf 	bl	8003e54 <memcpy>
 80002d6:	6820      	ldr	r0, [r4, #0]
 80002d8:	6861      	ldr	r1, [r4, #4]
 80002da:	68a2      	ldr	r2, [r4, #8]
 80002dc:	68e3      	ldr	r3, [r4, #12]
 80002de:	f000 f909 	bl	80004f4 <motor_initPWM>
  terminal_init(huart2);
 80002e2:	4c31      	ldr	r4, [pc, #196]	@ (80003a8 <main+0x134>)
 80002e4:	466b      	mov	r3, sp
 80002e6:	0018      	movs	r0, r3
 80002e8:	0023      	movs	r3, r4
 80002ea:	3310      	adds	r3, #16
 80002ec:	2278      	movs	r2, #120	@ 0x78
 80002ee:	0019      	movs	r1, r3
 80002f0:	f003 fdb0 	bl	8003e54 <memcpy>
 80002f4:	6820      	ldr	r0, [r4, #0]
 80002f6:	6861      	ldr	r1, [r4, #4]
 80002f8:	68a2      	ldr	r2, [r4, #8]
 80002fa:	68e3      	ldr	r3, [r4, #12]
 80002fc:	f000 f9b4 	bl	8000668 <terminal_init>

  terminal_print("---------------------------\r\n");
 8000300:	4b2a      	ldr	r3, [pc, #168]	@ (80003ac <main+0x138>)
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fa0a 	bl	800071c <terminal_print>
  terminal_print("--- Controls Systems II ---\r\n");
 8000308:	4b29      	ldr	r3, [pc, #164]	@ (80003b0 <main+0x13c>)
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fa06 	bl	800071c <terminal_print>
  terminal_print("---  Servo Lab Project  ---\r\n");
 8000310:	4b28      	ldr	r3, [pc, #160]	@ (80003b4 <main+0x140>)
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fa02 	bl	800071c <terminal_print>
  terminal_print("---------------------------\r\n");
 8000318:	4b24      	ldr	r3, [pc, #144]	@ (80003ac <main+0x138>)
 800031a:	0018      	movs	r0, r3
 800031c:	f000 f9fe 	bl	800071c <terminal_print>

  HAL_TIM_Base_Start_IT(&htim3);
 8000320:	4b25      	ldr	r3, [pc, #148]	@ (80003b8 <main+0x144>)
 8000322:	0018      	movs	r0, r3
 8000324:	f001 fe16 	bl	8001f54 <HAL_TIM_Base_Start_IT>

  char rxBuff[100] = {'\0'};
 8000328:	2368      	movs	r3, #104	@ 0x68
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	0018      	movs	r0, r3
 800032e:	2364      	movs	r3, #100	@ 0x64
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f003 fd5a 	bl	8003dec <memset>
  char message[100] = {'\0'};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	0018      	movs	r0, r3
 800033c:	2364      	movs	r3, #100	@ 0x64
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f003 fd53 	bl	8003dec <memset>
  while (1)
  {
    /* USER CODE END WHILE */
	  terminal_receive(rxBuff, sizeof(rxBuff));
 8000346:	2468      	movs	r4, #104	@ 0x68
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2164      	movs	r1, #100	@ 0x64
 800034c:	0018      	movs	r0, r3
 800034e:	f000 f9a5 	bl	800069c <terminal_receive>
	  sscanf(rxBuff, "%d", &pwmValue);
 8000352:	4a1a      	ldr	r2, [pc, #104]	@ (80003bc <main+0x148>)
 8000354:	491a      	ldr	r1, [pc, #104]	@ (80003c0 <main+0x14c>)
 8000356:	193b      	adds	r3, r7, r4
 8000358:	0018      	movs	r0, r3
 800035a:	f003 fd1b 	bl	8003d94 <siscanf>
	  terminal_print("\r\n");
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <main+0x150>)
 8000360:	0018      	movs	r0, r3
 8000362:	f000 f9db 	bl	800071c <terminal_print>
	  HAL_Delay(2500);
 8000366:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <main+0x154>)
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fd39 	bl	8000de0 <HAL_Delay>
	  for (int i=1; i<=0; i++){
 800036e:	2301      	movs	r3, #1
 8000370:	22cc      	movs	r2, #204	@ 0xcc
 8000372:	18ba      	adds	r2, r7, r2
 8000374:	6013      	str	r3, [r2, #0]
 8000376:	e00c      	b.n	8000392 <main+0x11e>
		 sprintf(message, "AD Value = %d\r\n", adValue);
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <main+0x158>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	4914      	ldr	r1, [pc, #80]	@ (80003d0 <main+0x15c>)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	0018      	movs	r0, r3
 8000382:	f003 fce5 	bl	8003d50 <siprintf>
	  for (int i=1; i<=0; i++){
 8000386:	22cc      	movs	r2, #204	@ 0xcc
 8000388:	18bb      	adds	r3, r7, r2
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	18ba      	adds	r2, r7, r2
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	23cc      	movs	r3, #204	@ 0xcc
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dded      	ble.n	8000378 <main+0x104>
	  terminal_receive(rxBuff, sizeof(rxBuff));
 800039c:	e7d3      	b.n	8000346 <main+0xd2>
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	200001f0 	.word	0x200001f0
 80003a4:	200001a8 	.word	0x200001a8
 80003a8:	20000280 	.word	0x20000280
 80003ac:	08005054 	.word	0x08005054
 80003b0:	08005074 	.word	0x08005074
 80003b4:	08005094 	.word	0x08005094
 80003b8:	20000238 	.word	0x20000238
 80003bc:	2000007c 	.word	0x2000007c
 80003c0:	080050b4 	.word	0x080050b4
 80003c4:	080050b8 	.word	0x080050b8
 80003c8:	000009c4 	.word	0x000009c4
 80003cc:	20000080 	.word	0x20000080
 80003d0:	080050bc 	.word	0x080050bc

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b099      	sub	sp, #100	@ 0x64
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	242c      	movs	r4, #44	@ 0x2c
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	0018      	movs	r0, r3
 80003e0:	2334      	movs	r3, #52	@ 0x34
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f003 fd01 	bl	8003dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ea:	231c      	movs	r3, #28
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	0018      	movs	r0, r3
 80003f0:	2310      	movs	r3, #16
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f003 fcf9 	bl	8003dec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	231c      	movs	r3, #28
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f003 fcf2 	bl	8003dec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000408:	193b      	adds	r3, r7, r4
 800040a:	2220      	movs	r2, #32
 800040c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800040e:	193b      	adds	r3, r7, r4
 8000410:	2201      	movs	r2, #1
 8000412:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000414:	193b      	adds	r3, r7, r4
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	193b      	adds	r3, r7, r4
 800041c:	0018      	movs	r0, r3
 800041e:	f000 ff59 	bl	80012d4 <HAL_RCC_OscConfig>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000426:	f000 f839 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	211c      	movs	r1, #28
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2207      	movs	r2, #7
 8000430:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2203      	movs	r2, #3
 8000436:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2101      	movs	r1, #1
 8000448:	0018      	movs	r0, r3
 800044a:	f001 fac9 	bl	80019e0 <HAL_RCC_ClockConfig>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000452:	f000 f823 	bl	800049c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000456:	003b      	movs	r3, r7
 8000458:	2202      	movs	r2, #2
 800045a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800045c:	003b      	movs	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000462:	003b      	movs	r3, r7
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fc27 	bl	8001cb8 <HAL_RCCEx_PeriphCLKConfig>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800046e:	f000 f815 	bl	800049c <Error_Handler>
  }
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b019      	add	sp, #100	@ 0x64
 8000478:	bd90      	pop	{r4, r7, pc}
	...

0800047c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	test++;
 8000484:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	1c5a      	adds	r2, r3, #1
 800048a:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	20000078 	.word	0x20000078

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	e7fd      	b.n	80004a4 <Error_Handler+0x8>

080004a8 <motor_initEncoder>:
TIM_HandleTypeDef encoderHandle;
TIM_HandleTypeDef PWMHandle;
int timmerChannel1 = 0;
int timmerChannel2 = 0;

void motor_initEncoder(TIM_HandleTypeDef timmerHandler, uint32_t channel1, uint32_t channel2){
 80004a8:	b084      	sub	sp, #16
 80004aa:	b5b0      	push	{r4, r5, r7, lr}
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	2510      	movs	r5, #16
 80004b0:	197c      	adds	r4, r7, r5
 80004b2:	6020      	str	r0, [r4, #0]
 80004b4:	6061      	str	r1, [r4, #4]
 80004b6:	60a2      	str	r2, [r4, #8]
 80004b8:	60e3      	str	r3, [r4, #12]
	encoderHandle = timmerHandler;
 80004ba:	4a0d      	ldr	r2, [pc, #52]	@ (80004f0 <motor_initEncoder+0x48>)
 80004bc:	197b      	adds	r3, r7, r5
 80004be:	0010      	movs	r0, r2
 80004c0:	0019      	movs	r1, r3
 80004c2:	2348      	movs	r3, #72	@ 0x48
 80004c4:	001a      	movs	r2, r3
 80004c6:	f003 fcc5 	bl	8003e54 <memcpy>
	HAL_TIM_Encoder_Start(&encoderHandle, channel1);
 80004ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <motor_initEncoder+0x48>)
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 ff49 	bl	8002368 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&encoderHandle, channel2);
 80004d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <motor_initEncoder+0x48>)
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 ff43 	bl	8002368 <HAL_TIM_Encoder_Start>
}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bcb0      	pop	{r4, r5, r7}
 80004e8:	bc08      	pop	{r3}
 80004ea:	b004      	add	sp, #16
 80004ec:	4718      	bx	r3
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	20000084 	.word	0x20000084

080004f4 <motor_initPWM>:
void motor_initPWM(TIM_HandleTypeDef timmerHandler, uint32_t channel1, uint32_t channel2){
 80004f4:	b084      	sub	sp, #16
 80004f6:	b5b0      	push	{r4, r5, r7, lr}
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	2510      	movs	r5, #16
 80004fc:	197c      	adds	r4, r7, r5
 80004fe:	6020      	str	r0, [r4, #0]
 8000500:	6061      	str	r1, [r4, #4]
 8000502:	60a2      	str	r2, [r4, #8]
 8000504:	60e3      	str	r3, [r4, #12]
	PWMHandle = timmerHandler;
 8000506:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <motor_initPWM+0x5c>)
 8000508:	197b      	adds	r3, r7, r5
 800050a:	0010      	movs	r0, r2
 800050c:	0019      	movs	r1, r3
 800050e:	2348      	movs	r3, #72	@ 0x48
 8000510:	001a      	movs	r2, r3
 8000512:	f003 fc9f 	bl	8003e54 <memcpy>
	timmerChannel1 = channel1;
 8000516:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000518:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <motor_initPWM+0x60>)
 800051a:	601a      	str	r2, [r3, #0]
	timmerChannel2 = channel2;
 800051c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <motor_initPWM+0x64>)
 8000520:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&PWMHandle, timmerChannel1);
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <motor_initPWM+0x60>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	001a      	movs	r2, r3
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <motor_initPWM+0x5c>)
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fdbb 	bl	80020a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&PWMHandle, timmerChannel2);
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <motor_initPWM+0x64>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <motor_initPWM+0x5c>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fdb3 	bl	80020a8 <HAL_TIM_PWM_Start>
}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bcb0      	pop	{r4, r5, r7}
 8000548:	bc08      	pop	{r3}
 800054a:	b004      	add	sp, #16
 800054c:	4718      	bx	r3
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	200000cc 	.word	0x200000cc
 8000554:	20000114 	.word	0x20000114
 8000558:	20000118 	.word	0x20000118

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_MspInit+0x44>)
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <HAL_MspInit+0x44>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	619a      	str	r2, [r3, #24]
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_MspInit+0x44>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_MspInit+0x44>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0549      	lsls	r1, r1, #21
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_MspInit+0x44>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	055b      	lsls	r3, r3, #21
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	e7fd      	b.n	80005a8 <NMI_Handler+0x4>

080005ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	e7fd      	b.n	80005b0 <HardFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 fbec 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <TIM3_IRQHandler+0x14>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 ff66 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	20000238 	.word	0x20000238

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f003 fbec 	bl	8003dfc <__errno>
 8000624:	0003      	movs	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	2301      	movs	r3, #1
 800062c:	425b      	negs	r3, r3
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	18d2      	adds	r2, r2, r3
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <_sbrk+0x64>)
 8000640:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b006      	add	sp, #24
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20004000 	.word	0x20004000
 8000650:	00000400 	.word	0x00000400
 8000654:	2000011c 	.word	0x2000011c
 8000658:	20000458 	.word	0x20000458

0800065c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <terminal_init>:
UART_HandleTypeDef terminal_uart;

// Structures

// Functions
void terminal_init(UART_HandleTypeDef huart){
 8000668:	b084      	sub	sp, #16
 800066a:	b5b0      	push	{r4, r5, r7, lr}
 800066c:	af00      	add	r7, sp, #0
 800066e:	2510      	movs	r5, #16
 8000670:	197c      	adds	r4, r7, r5
 8000672:	6020      	str	r0, [r4, #0]
 8000674:	6061      	str	r1, [r4, #4]
 8000676:	60a2      	str	r2, [r4, #8]
 8000678:	60e3      	str	r3, [r4, #12]
	terminal_uart = huart;
 800067a:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <terminal_init+0x30>)
 800067c:	197b      	adds	r3, r7, r5
 800067e:	0010      	movs	r0, r2
 8000680:	0019      	movs	r1, r3
 8000682:	2388      	movs	r3, #136	@ 0x88
 8000684:	001a      	movs	r2, r3
 8000686:	f003 fbe5 	bl	8003e54 <memcpy>
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bcb0      	pop	{r4, r5, r7}
 8000690:	bc08      	pop	{r3}
 8000692:	b004      	add	sp, #16
 8000694:	4718      	bx	r3
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000120 	.word	0x20000120

0800069c <terminal_receive>:
void terminal_receive(uint8_t *rxBuff, size_t size){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	// receive loop
	for(int i=0; i<size; i++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e02b      	b.n	8000704 <terminal_receive+0x68>
	  HAL_UART_Receive(&terminal_uart, &rxBuff[i], 1, TIMEOUT);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	18d1      	adds	r1, r2, r3
 80006b2:	2301      	movs	r3, #1
 80006b4:	425b      	negs	r3, r3
 80006b6:	4818      	ldr	r0, [pc, #96]	@ (8000718 <terminal_receive+0x7c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	f002 fea9 	bl	8003410 <HAL_UART_Receive>
	  if((rxBuff[i] == '\r') | (rxBuff[i] == '\n')){
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	18d3      	adds	r3, r2, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3b0d      	subs	r3, #13
 80006c8:	425a      	negs	r2, r3
 80006ca:	4153      	adcs	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	18cb      	adds	r3, r1, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3b0a      	subs	r3, #10
 80006d8:	4259      	negs	r1, r3
 80006da:	414b      	adcs	r3, r1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <terminal_receive+0x62>
		  rxBuff[i] = '\r';
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	18d3      	adds	r3, r2, r3
 80006ec:	220d      	movs	r2, #13
 80006ee:	701a      	strb	r2, [r3, #0]
		  rxBuff[i+1] = '\n';
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	18d3      	adds	r3, r2, r3
 80006f8:	220a      	movs	r2, #10
 80006fa:	701a      	strb	r2, [r3, #0]
		  break;
 80006fc:	e007      	b.n	800070e <terminal_receive+0x72>
	for(int i=0; i<size; i++){
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d8cf      	bhi.n	80006ac <terminal_receive+0x10>
	  }
	}
}
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	20000120 	.word	0x20000120

0800071c <terminal_print>:
void terminal_print(char *txBuff){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	// Has to be null terminated!
	size_t len = strlen((char*)txBuff);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff fcee 	bl	8000108 <strlen>
 800072c:	0003      	movs	r3, r0
 800072e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&terminal_uart, (uint8_t*)txBuff, len, TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	b29a      	uxth	r2, r3
 8000734:	2301      	movs	r3, #1
 8000736:	425b      	negs	r3, r3
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <terminal_print+0x2c>)
 800073c:	f002 fdc8 	bl	80032d0 <HAL_UART_Transmit>
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b004      	add	sp, #16
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000120 	.word	0x20000120

0800074c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	@ 0x58
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	2348      	movs	r3, #72	@ 0x48
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	0018      	movs	r0, r3
 8000758:	2310      	movs	r3, #16
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f003 fb45 	bl	8003dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	2340      	movs	r3, #64	@ 0x40
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	0018      	movs	r0, r3
 8000768:	2308      	movs	r3, #8
 800076a:	001a      	movs	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	f003 fb3d 	bl	8003dec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	2324      	movs	r3, #36	@ 0x24
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	0018      	movs	r0, r3
 8000778:	231c      	movs	r3, #28
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f003 fb35 	bl	8003dec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	2320      	movs	r3, #32
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f003 fb2e 	bl	8003dec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000790:	4b4d      	ldr	r3, [pc, #308]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 8000792:	4a4e      	ldr	r2, [pc, #312]	@ (80008cc <MX_TIM1_Init+0x180>)
 8000794:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000796:	4b4c      	ldr	r3, [pc, #304]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 8000798:	2201      	movs	r2, #1
 800079a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b4a      	ldr	r3, [pc, #296]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80007a2:	4b49      	ldr	r3, [pc, #292]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007a4:	4a4a      	ldr	r2, [pc, #296]	@ (80008d0 <MX_TIM1_Init+0x184>)
 80007a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b47      	ldr	r3, [pc, #284]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ae:	4b46      	ldr	r3, [pc, #280]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b44      	ldr	r3, [pc, #272]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ba:	4b43      	ldr	r3, [pc, #268]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fb79 	bl	8001eb4 <HAL_TIM_Base_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007c6:	f7ff fe69 	bl	800049c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	2148      	movs	r1, #72	@ 0x48
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	0152      	lsls	r2, r2, #5
 80007d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	4b3c      	ldr	r3, [pc, #240]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 f81c 	bl	8002818 <HAL_TIM_ConfigClockSource>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007e4:	f7ff fe5a 	bl	800049c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e8:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fc04 	bl	8001ff8 <HAL_TIM_PWM_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80007f4:	f7ff fe52 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2140      	movs	r1, #64	@ 0x40
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000806:	187a      	adds	r2, r7, r1
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f002 fc3f 	bl	8003090 <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000816:	f7ff fe41 	bl	800049c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081a:	2124      	movs	r1, #36	@ 0x24
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2260      	movs	r2, #96	@ 0x60
 8000820:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	22fa      	movs	r2, #250	@ 0xfa
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000848:	1879      	adds	r1, r7, r1
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 800084c:	2200      	movs	r2, #0
 800084e:	0018      	movs	r0, r3
 8000850:	f001 ff1c 	bl	800268c <HAL_TIM_PWM_ConfigChannel>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000858:	f7ff fe20 	bl	800049c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800085c:	2124      	movs	r1, #36	@ 0x24
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000864:	1879      	adds	r1, r7, r1
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 8000868:	2204      	movs	r2, #4
 800086a:	0018      	movs	r0, r3
 800086c:	f001 ff0e 	bl	800268c <HAL_TIM_PWM_ConfigChannel>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000874:	f7ff fe12 	bl	800049c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	0192      	lsls	r2, r2, #6
 800089c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f002 fc4e 	bl	800314c <HAL_TIMEx_ConfigBreakDeadTime>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80008b4:	f7ff fdf2 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b8:	4b03      	ldr	r3, [pc, #12]	@ (80008c8 <MX_TIM1_Init+0x17c>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 f946 	bl	8000b4c <HAL_TIM_MspPostInit>

}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b016      	add	sp, #88	@ 0x58
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001a8 	.word	0x200001a8
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	000003ff 	.word	0x000003ff

080008d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08d      	sub	sp, #52	@ 0x34
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008da:	240c      	movs	r4, #12
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	0018      	movs	r0, r3
 80008e0:	2324      	movs	r3, #36	@ 0x24
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f003 fa81 	bl	8003dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	0018      	movs	r0, r3
 80008ee:	2308      	movs	r3, #8
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f003 fa7a 	bl	8003dec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_TIM2_Init+0xc0>)
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	05d2      	lsls	r2, r2, #23
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <MX_TIM2_Init+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <MX_TIM2_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <MX_TIM2_Init+0xc0>)
 800090e:	2201      	movs	r2, #1
 8000910:	4252      	negs	r2, r2
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_TIM2_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_TIM2_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000920:	0021      	movs	r1, r4
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2203      	movs	r2, #3
 8000926:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2201      	movs	r2, #1
 8000932:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2201      	movs	r2, #1
 800094a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000958:	187a      	adds	r2, r7, r1
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_TIM2_Init+0xc0>)
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fc5a 	bl	8002218 <HAL_TIM_Encoder_Init>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000968:	f7ff fd98 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000978:	1d3a      	adds	r2, r7, #4
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_TIM2_Init+0xc0>)
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f002 fb86 	bl	8003090 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000988:	f7ff fd88 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00d      	add	sp, #52	@ 0x34
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	200001f0 	.word	0x200001f0

08000998 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	2308      	movs	r3, #8
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0018      	movs	r0, r3
 80009a4:	2310      	movs	r3, #16
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f003 fa1f 	bl	8003dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	003b      	movs	r3, r7
 80009b0:	0018      	movs	r0, r3
 80009b2:	2308      	movs	r3, #8
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f003 fa18 	bl	8003dec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <MX_TIM3_Init+0xa4>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009c4:	2264      	movs	r2, #100	@ 0x64
 80009c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009d0:	2264      	movs	r2, #100	@ 0x64
 80009d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fa66 	bl	8001eb4 <HAL_TIM_Base_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009ec:	f7ff fd56 	bl	800049c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	2108      	movs	r1, #8
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	0152      	lsls	r2, r2, #5
 80009f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 ff09 	bl	8002818 <HAL_TIM_ConfigClockSource>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a0a:	f7ff fd47 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_TIM3_Init+0xa0>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fb35 	bl	8003090 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a2a:	f7ff fd37 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b006      	add	sp, #24
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000238 	.word	0x20000238
 8000a3c:	40000400 	.word	0x40000400

08000a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	@ (8000aac <HAL_TIM_Base_MspInit+0x6c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d10e      	bne.n	8000a70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x70>)
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x70>)
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	0109      	lsls	r1, r1, #4
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	619a      	str	r2, [r3, #24]
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x70>)
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a6e:	e018      	b.n	8000aa2 <HAL_TIM_Base_MspInit+0x62>
  else if(tim_baseHandle->Instance==TIM3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_TIM_Base_MspInit+0x74>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d113      	bne.n	8000aa2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x70>)
 8000a7c:	69da      	ldr	r2, [r3, #28]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x70>)
 8000a80:	2102      	movs	r1, #2
 8000a82:	430a      	orrs	r2, r1
 8000a84:	61da      	str	r2, [r3, #28]
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x70>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 fa72 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f000 fa84 	bl	8000faa <HAL_NVIC_EnableIRQ>
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b004      	add	sp, #16
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40000400 	.word	0x40000400

08000ab8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08b      	sub	sp, #44	@ 0x2c
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	2414      	movs	r4, #20
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f003 f98e 	bl	8003dec <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d130      	bne.n	8000b3e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ade:	69da      	ldr	r2, [r3, #28]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	61da      	str	r2, [r3, #28]
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	0289      	lsls	r1, r1, #10
 8000afe:	430a      	orrs	r2, r1
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	029b      	lsls	r3, r3, #10
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODE_A_Pin|ENCODE_B_Pin;
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2203      	movs	r2, #3
 8000b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	2390      	movs	r3, #144	@ 0x90
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fa53 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b00b      	add	sp, #44	@ 0x2c
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b089      	sub	sp, #36	@ 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	240c      	movs	r4, #12
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f003 f944 	bl	8003dec <memset>
  if(timHandle->Instance==TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a16      	ldr	r2, [pc, #88]	@ (8000bc4 <HAL_TIM_MspPostInit+0x78>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d125      	bne.n	8000bba <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_TIM_MspPostInit+0x7c>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_TIM_MspPostInit+0x7c>)
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_TIM_MspPostInit+0x7c>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	22c0      	movs	r2, #192	@ 0xc0
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2202      	movs	r2, #2
 8000b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2202      	movs	r2, #2
 8000baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	187a      	adds	r2, r7, r1
 8000bae:	2390      	movs	r3, #144	@ 0x90
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 fa15 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b009      	add	sp, #36	@ 0x24
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	40021000 	.word	0x40021000

08000bcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	@ (8000c28 <MX_USART2_UART_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2296      	movs	r2, #150	@ 0x96
 8000bda:	0192      	lsls	r2, r2, #6
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <MX_USART2_UART_Init+0x58>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 fb09 	bl	8003228 <HAL_UART_Init>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f7ff fc3f 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000280 	.word	0x20000280
 8000c28:	40004400 	.word	0x40004400

08000c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	@ 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 f8d4 	bl	8003dec <memset>
  if(uartHandle->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <HAL_UART_MspInit+0x90>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d132      	bne.n	8000cb4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c50:	69da      	ldr	r2, [r3, #28]
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	61da      	str	r2, [r3, #28]
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c5e:	69da      	ldr	r2, [r3, #28]
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c70:	2180      	movs	r1, #128	@ 0x80
 8000c72:	0289      	lsls	r1, r1, #10
 8000c74:	430a      	orrs	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c86:	0021      	movs	r1, r4
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2202      	movs	r2, #2
 8000c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	187a      	adds	r2, r7, r1
 8000ca8:	2390      	movs	r3, #144	@ 0x90
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f998 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b00b      	add	sp, #44	@ 0x2c
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff fcc8 	bl	800065c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f003 f889 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fabd 	bl	8000274 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d08:	08005268 	.word	0x08005268
  ldr r2, =_sbss
 8000d0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d10:	20000454 	.word	0x20000454

08000d14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_COMP_IRQHandler>
	...

08000d18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <HAL_Init+0x24>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_Init+0x24>)
 8000d22:	2110      	movs	r1, #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f809 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2e:	f7ff fc15 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_InitTick+0x60>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	0019      	movs	r1, r3
 8000d52:	23fa      	movs	r3, #250	@ 0xfa
 8000d54:	0098      	lsls	r0, r3, #2
 8000d56:	f7ff f9e9 	bl	800012c <__udivsi3>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f7ff f9e4 	bl	800012c <__udivsi3>
 8000d64:	0003      	movs	r3, r0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f92f 	bl	8000fca <HAL_SYSTICK_Config>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e00f      	b.n	8000d94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d80b      	bhi.n	8000d92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	425b      	negs	r3, r3
 8000d80:	2200      	movs	r2, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 f8fc 	bl	8000f80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_InitTick+0x64>)
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	001a      	movs	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	18d2      	adds	r2, r2, r3
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000308 	.word	0x20000308

08000dcc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	@ (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	20000308 	.word	0x20000308

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff fff0 	bl	8000dcc <HAL_GetTick>
 8000dec:	0003      	movs	r3, r0
 8000dee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3301      	adds	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	001a      	movs	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	189b      	adds	r3, r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	f7ff ffe0 	bl	8000dcc <HAL_GetTick>
 8000e0c:	0002      	movs	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	0002      	movs	r2, r0
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e3a:	d809      	bhi.n	8000e50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	231f      	movs	r3, #31
 8000e44:	401a      	ands	r2, r3
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_EnableIRQ+0x30>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4091      	lsls	r1, r2
 8000e4c:	000a      	movs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
  }
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	0002      	movs	r2, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e70:	d828      	bhi.n	8000ec4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e72:	4a2f      	ldr	r2, [pc, #188]	@ (8000f30 <__NVIC_SetPriority+0xd4>)
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	33c0      	adds	r3, #192	@ 0xc0
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	589b      	ldr	r3, [r3, r2]
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	0011      	movs	r1, r2
 8000e88:	2203      	movs	r2, #3
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	21ff      	movs	r1, #255	@ 0xff
 8000e90:	4091      	lsls	r1, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	4003      	ands	r3, r0
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb0:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <__NVIC_SetPriority+0xd4>)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	33c0      	adds	r3, #192	@ 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ec2:	e031      	b.n	8000f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <__NVIC_SetPriority+0xd8>)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0019      	movs	r1, r3
 8000ecc:	230f      	movs	r3, #15
 8000ece:	400b      	ands	r3, r1
 8000ed0:	3b08      	subs	r3, #8
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3306      	adds	r3, #6
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	3304      	adds	r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	21ff      	movs	r1, #255	@ 0xff
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	43d2      	mvns	r2, r2
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	22ff      	movs	r2, #255	@ 0xff
 8000efc:	401a      	ands	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	2303      	movs	r3, #3
 8000f06:	4003      	ands	r3, r0
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <__NVIC_SetPriority+0xd8>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	001c      	movs	r4, r3
 8000f14:	230f      	movs	r3, #15
 8000f16:	4023      	ands	r3, r4
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	3306      	adds	r3, #6
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	18c3      	adds	r3, r0, r3
 8000f24:	3304      	adds	r3, #4
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	045b      	lsls	r3, r3, #17
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d301      	bcc.n	8000f50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e010      	b.n	8000f72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <SysTick_Config+0x44>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	3a01      	subs	r2, #1
 8000f56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff ff7c 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <SysTick_Config+0x44>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <SysTick_Config+0x44>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	1c02      	adds	r2, r0, #0
 8000f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ff33 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ffaf 	bl	8000f38 <SysTick_Config>
 8000fda:	0003      	movs	r3, r0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e155      	b.n	80012a0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	000a      	movs	r2, r1
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <HAL_GPIO_Init+0x28>
 800100a:	e146      	b.n	800129a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	4013      	ands	r3, r2
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2203      	movs	r2, #3
 800101e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	409a      	lsls	r2, r3
 8001046:	0013      	movs	r3, r2
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	2201      	movs	r2, #1
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	2b03      	cmp	r3, #3
 8001090:	d017      	beq.n	80010c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	58d3      	ldr	r3, [r2, r3]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2207      	movs	r2, #7
 80010e0:	4013      	ands	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2107      	movs	r1, #7
 80010fa:	400b      	ands	r3, r1
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	6939      	ldr	r1, [r7, #16]
 8001114:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	401a      	ands	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	23c0      	movs	r3, #192	@ 0xc0
 8001150:	029b      	lsls	r3, r3, #10
 8001152:	4013      	ands	r3, r2
 8001154:	d100      	bne.n	8001158 <HAL_GPIO_Init+0x174>
 8001156:	e0a0      	b.n	800129a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b57      	ldr	r3, [pc, #348]	@ (80012b8 <HAL_GPIO_Init+0x2d4>)
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	4b56      	ldr	r3, [pc, #344]	@ (80012b8 <HAL_GPIO_Init+0x2d4>)
 800115e:	2101      	movs	r1, #1
 8001160:	430a      	orrs	r2, r1
 8001162:	619a      	str	r2, [r3, #24]
 8001164:	4b54      	ldr	r3, [pc, #336]	@ (80012b8 <HAL_GPIO_Init+0x2d4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	2201      	movs	r2, #1
 800116a:	4013      	ands	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001170:	4a52      	ldr	r2, [pc, #328]	@ (80012bc <HAL_GPIO_Init+0x2d8>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	589b      	ldr	r3, [r3, r2]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	43da      	mvns	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	2390      	movs	r3, #144	@ 0x90
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	429a      	cmp	r2, r3
 800119c:	d019      	beq.n	80011d2 <HAL_GPIO_Init+0x1ee>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a47      	ldr	r2, [pc, #284]	@ (80012c0 <HAL_GPIO_Init+0x2dc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x1ea>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a46      	ldr	r2, [pc, #280]	@ (80012c4 <HAL_GPIO_Init+0x2e0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x1e6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a45      	ldr	r2, [pc, #276]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a44      	ldr	r2, [pc, #272]	@ (80012cc <HAL_GPIO_Init+0x2e8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x1de>
 80011be:	2304      	movs	r3, #4
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011d2:	2300      	movs	r3, #0
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	2103      	movs	r1, #3
 80011d8:	400a      	ands	r2, r1
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	@ (80012bc <HAL_GPIO_Init+0x2d8>)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	035b      	lsls	r3, r3, #13
 800120a:	4013      	ands	r3, r2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001216:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800121c:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43da      	mvns	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	039b      	lsls	r3, r3, #14
 8001234:	4013      	ands	r3, r2
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001246:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	4013      	ands	r3, r2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43da      	mvns	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	2380      	movs	r3, #128	@ 0x80
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	4013      	ands	r3, r2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	40da      	lsrs	r2, r3
 80012a8:	1e13      	subs	r3, r2, #0
 80012aa:	d000      	beq.n	80012ae <HAL_GPIO_Init+0x2ca>
 80012ac:	e6a2      	b.n	8000ff4 <HAL_GPIO_Init+0x10>
  } 
}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b006      	add	sp, #24
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000
 80012c0:	48000400 	.word	0x48000400
 80012c4:	48000800 	.word	0x48000800
 80012c8:	48000c00 	.word	0x48000c00
 80012cc:	48001000 	.word	0x48001000
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f000 fb76 	bl	80019d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d100      	bne.n	80012f4 <HAL_RCC_OscConfig+0x20>
 80012f2:	e08e      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f4:	4bc5      	ldr	r3, [pc, #788]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d00e      	beq.n	800131e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001300:	4bc2      	ldr	r3, [pc, #776]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	220c      	movs	r2, #12
 8001306:	4013      	ands	r3, r2
 8001308:	2b08      	cmp	r3, #8
 800130a:	d117      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
 800130c:	4bbf      	ldr	r3, [pc, #764]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	23c0      	movs	r3, #192	@ 0xc0
 8001312:	025b      	lsls	r3, r3, #9
 8001314:	401a      	ands	r2, r3
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	429a      	cmp	r2, r3
 800131c:	d10e      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4bbb      	ldr	r3, [pc, #748]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x58>
 800132a:	e071      	b.n	8001410 <HAL_RCC_OscConfig+0x13c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d000      	beq.n	8001336 <HAL_RCC_OscConfig+0x62>
 8001334:	e06c      	b.n	8001410 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f000 fb4c 	bl	80019d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x80>
 8001344:	4bb1      	ldr	r3, [pc, #708]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4bb0      	ldr	r3, [pc, #704]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800134a:	2180      	movs	r1, #128	@ 0x80
 800134c:	0249      	lsls	r1, r1, #9
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e02f      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0xa2>
 800135c:	4bab      	ldr	r3, [pc, #684]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4baa      	ldr	r3, [pc, #680]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001362:	49ab      	ldr	r1, [pc, #684]	@ (8001610 <HAL_RCC_OscConfig+0x33c>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	4ba8      	ldr	r3, [pc, #672]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba7      	ldr	r3, [pc, #668]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800136e:	49a9      	ldr	r1, [pc, #676]	@ (8001614 <HAL_RCC_OscConfig+0x340>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e01e      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d10e      	bne.n	800139c <HAL_RCC_OscConfig+0xc8>
 800137e:	4ba3      	ldr	r3, [pc, #652]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4ba2      	ldr	r3, [pc, #648]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001384:	2180      	movs	r1, #128	@ 0x80
 8001386:	02c9      	lsls	r1, r1, #11
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4b9f      	ldr	r3, [pc, #636]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b9e      	ldr	r3, [pc, #632]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	0249      	lsls	r1, r1, #9
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 800139c:	4b9b      	ldr	r3, [pc, #620]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b9a      	ldr	r3, [pc, #616]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80013a2:	499b      	ldr	r1, [pc, #620]	@ (8001610 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4b98      	ldr	r3, [pc, #608]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b97      	ldr	r3, [pc, #604]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80013ae:	4999      	ldr	r1, [pc, #612]	@ (8001614 <HAL_RCC_OscConfig+0x340>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d014      	beq.n	80013e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fd06 	bl	8000dcc <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fd01 	bl	8000dcc <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	@ 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e2fd      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	4b8c      	ldr	r3, [pc, #560]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0xf2>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fcf1 	bl	8000dcc <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fcec 	bl	8000dcc <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e2e8      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b82      	ldr	r3, [pc, #520]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x11c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0x14a>
 800141c:	e06c      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800141e:	4b7b      	ldr	r3, [pc, #492]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	220c      	movs	r2, #12
 8001424:	4013      	ands	r3, r2
 8001426:	d00e      	beq.n	8001446 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001428:	4b78      	ldr	r3, [pc, #480]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	220c      	movs	r2, #12
 800142e:	4013      	ands	r3, r2
 8001430:	2b08      	cmp	r3, #8
 8001432:	d11f      	bne.n	8001474 <HAL_RCC_OscConfig+0x1a0>
 8001434:	4b75      	ldr	r3, [pc, #468]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	23c0      	movs	r3, #192	@ 0xc0
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	401a      	ands	r2, r3
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	429a      	cmp	r2, r3
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b71      	ldr	r3, [pc, #452]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2bb      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b6b      	ldr	r3, [pc, #428]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	22f8      	movs	r2, #248	@ 0xf8
 8001462:	4393      	bics	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00da      	lsls	r2, r3, #3
 800146c:	4b67      	ldr	r3, [pc, #412]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e041      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d024      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b63      	ldr	r3, [pc, #396]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b62      	ldr	r3, [pc, #392]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fca0 	bl	8000dcc <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fc9b 	bl	8000dcc <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e297      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	4b59      	ldr	r3, [pc, #356]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d0f1      	beq.n	8001492 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b57      	ldr	r3, [pc, #348]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	22f8      	movs	r2, #248	@ 0xf8
 80014b4:	4393      	bics	r3, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	00da      	lsls	r2, r3, #3
 80014be:	4b53      	ldr	r3, [pc, #332]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b51      	ldr	r3, [pc, #324]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b50      	ldr	r3, [pc, #320]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	438a      	bics	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc7b 	bl	8000dcc <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc76 	bl	8000dcc <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e272      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f1      	bne.n	80014dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b40      	ldr	r3, [pc, #256]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 800150c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800150e:	4b3f      	ldr	r3, [pc, #252]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fc59 	bl	8000dcc <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fc54 	bl	8000dcc <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e250      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b36      	ldr	r3, [pc, #216]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d0f1      	beq.n	8001520 <HAL_RCC_OscConfig+0x24c>
 800153c:	e018      	b.n	8001570 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b33      	ldr	r3, [pc, #204]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001542:	4b32      	ldr	r3, [pc, #200]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001544:	2101      	movs	r1, #1
 8001546:	438a      	bics	r2, r1
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff fc3f 	bl	8000dcc <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fc3a 	bl	8000dcc <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e236      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	4b29      	ldr	r3, [pc, #164]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d1f1      	bne.n	8001554 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d100      	bne.n	800157c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e0b5      	b.n	80016e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157c:	201f      	movs	r0, #31
 800157e:	183b      	adds	r3, r7, r0
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	d110      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	0549      	lsls	r1, r1, #21
 800159a:	430a      	orrs	r2, r1
 800159c:	61da      	str	r2, [r3, #28]
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	055b      	lsls	r3, r3, #21
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_RCC_OscConfig+0x344>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_RCC_OscConfig+0x344>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_RCC_OscConfig+0x344>)
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fbfe 	bl	8000dcc <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fbf9 	bl	8000dcc <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	@ 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1f5      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_RCC_OscConfig+0x344>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10f      	bne.n	800161c <HAL_RCC_OscConfig+0x348>
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4b02      	ldr	r3, [pc, #8]	@ (800160c <HAL_RCC_OscConfig+0x338>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
 8001608:	e036      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	40021000 	.word	0x40021000
 8001610:	fffeffff 	.word	0xfffeffff
 8001614:	fffbffff 	.word	0xfffbffff
 8001618:	40007000 	.word	0x40007000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x36a>
 8001624:	4bca      	ldr	r3, [pc, #808]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4bc9      	ldr	r3, [pc, #804]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
 8001630:	4bc7      	ldr	r3, [pc, #796]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	4bc6      	ldr	r3, [pc, #792]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x38c>
 8001646:	4bc2      	ldr	r3, [pc, #776]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4bc1      	ldr	r3, [pc, #772]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800164c:	2104      	movs	r1, #4
 800164e:	430a      	orrs	r2, r1
 8001650:	621a      	str	r2, [r3, #32]
 8001652:	4bbf      	ldr	r3, [pc, #764]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	4bbe      	ldr	r3, [pc, #760]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	621a      	str	r2, [r3, #32]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 8001660:	4bbb      	ldr	r3, [pc, #748]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	4bba      	ldr	r3, [pc, #744]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	621a      	str	r2, [r3, #32]
 800166c:	4bb8      	ldr	r3, [pc, #736]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4bb7      	ldr	r3, [pc, #732]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001672:	2104      	movs	r1, #4
 8001674:	438a      	bics	r2, r1
 8001676:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d014      	beq.n	80016aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fba4 	bl	8000dcc <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e009      	b.n	800169e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fb9f 	bl	8000dcc <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4aaf      	ldr	r2, [pc, #700]	@ (8001954 <HAL_RCC_OscConfig+0x680>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e19a      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	4bac      	ldr	r3, [pc, #688]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x3b6>
 80016a8:	e013      	b.n	80016d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb8f 	bl	8000dcc <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	e009      	b.n	80016c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fb8a 	bl	8000dcc <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	4aa5      	ldr	r2, [pc, #660]	@ (8001954 <HAL_RCC_OscConfig+0x680>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e185      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d2:	231f      	movs	r3, #31
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	499d      	ldr	r1, [pc, #628]	@ (8001958 <HAL_RCC_OscConfig+0x684>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2210      	movs	r2, #16
 80016ee:	4013      	ands	r3, r2
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12a      	bne.n	8001750 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016fa:	4b95      	ldr	r3, [pc, #596]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016fe:	4b94      	ldr	r3, [pc, #592]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001700:	2104      	movs	r1, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001706:	4b92      	ldr	r3, [pc, #584]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170a:	4b91      	ldr	r3, [pc, #580]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fb5b 	bl	8000dcc <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800171c:	f7ff fb56 	bl	8000dcc <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e152      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800172e:	4b88      	ldr	r3, [pc, #544]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0f1      	beq.n	800171c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001738:	4b85      	ldr	r3, [pc, #532]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800173a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173c:	22f8      	movs	r2, #248	@ 0xf8
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	00da      	lsls	r2, r3, #3
 8001748:	4b81      	ldr	r3, [pc, #516]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	@ 0x34
 800174e:	e034      	b.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	3305      	adds	r3, #5
 8001756:	d111      	bne.n	800177c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001758:	4b7d      	ldr	r3, [pc, #500]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800175a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800175c:	4b7c      	ldr	r3, [pc, #496]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001764:	4b7a      	ldr	r3, [pc, #488]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	22f8      	movs	r2, #248	@ 0xf8
 800176a:	4393      	bics	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	00da      	lsls	r2, r3, #3
 8001774:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001776:	430a      	orrs	r2, r1
 8001778:	635a      	str	r2, [r3, #52]	@ 0x34
 800177a:	e01e      	b.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800177c:	4b74      	ldr	r3, [pc, #464]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800177e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001780:	4b73      	ldr	r3, [pc, #460]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001782:	2104      	movs	r1, #4
 8001784:	430a      	orrs	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001788:	4b71      	ldr	r3, [pc, #452]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800178a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800178c:	4b70      	ldr	r3, [pc, #448]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fb1a 	bl	8000dcc <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800179e:	f7ff fb15 	bl	8000dcc <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e111      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b0:	4b67      	ldr	r3, [pc, #412]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	d05c      	beq.n	800187e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017c4:	4b62      	ldr	r3, [pc, #392]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d00e      	beq.n	80017ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	220c      	movs	r2, #12
 80017d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d114      	bne.n	8001806 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	23c0      	movs	r3, #192	@ 0xc0
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	401a      	ands	r2, r3
 80017e6:	23c0      	movs	r3, #192	@ 0xc0
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017ee:	4b58      	ldr	r3, [pc, #352]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	4013      	ands	r3, r2
 80017f8:	d040      	beq.n	800187c <HAL_RCC_OscConfig+0x5a8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d03c      	beq.n	800187c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e6      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01b      	beq.n	8001846 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800180e:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001812:	4b4f      	ldr	r3, [pc, #316]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0249      	lsls	r1, r1, #9
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fad6 	bl	8000dcc <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001826:	f7ff fad1 	bl	8000dcc <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0cd      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001838:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800183a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x552>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001846:	4b42      	ldr	r3, [pc, #264]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800184a:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800184c:	4943      	ldr	r1, [pc, #268]	@ (800195c <HAL_RCC_OscConfig+0x688>)
 800184e:	400a      	ands	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fabb 	bl	8000dcc <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185c:	f7ff fab6 	bl	8000dcc <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0b2      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800186e:	4b38      	ldr	r3, [pc, #224]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x588>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800187c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d100      	bne.n	8001888 <HAL_RCC_OscConfig+0x5b4>
 8001886:	e0a4      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	220c      	movs	r2, #12
 800188e:	4013      	ands	r3, r2
 8001890:	2b08      	cmp	r3, #8
 8001892:	d100      	bne.n	8001896 <HAL_RCC_OscConfig+0x5c2>
 8001894:	e078      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	2b02      	cmp	r3, #2
 800189c:	d14c      	bne.n	8001938 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018a4:	492e      	ldr	r1, [pc, #184]	@ (8001960 <HAL_RCC_OscConfig+0x68c>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fa8f 	bl	8000dcc <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fa8a 	bl	8000dcc <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e086      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	049b      	lsls	r3, r3, #18
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	220f      	movs	r2, #15
 80018d8:	4393      	bics	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_RCC_OscConfig+0x690>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	431a      	orrs	r2, r3
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	0449      	lsls	r1, r1, #17
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fa5d 	bl	8000dcc <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff fa58 	bl	8000dcc <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e054      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	049b      	lsls	r3, r3, #18
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x644>
 8001936:	e04c      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HAL_RCC_OscConfig+0x67c>)
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <HAL_RCC_OscConfig+0x68c>)
 8001940:	400a      	ands	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa42 	bl	8000dcc <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x6a6>
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	40021000 	.word	0x40021000
 8001954:	00001388 	.word	0x00001388
 8001958:	efffffff 	.word	0xefffffff
 800195c:	fffeffff 	.word	0xfffeffff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fa30 	bl	8000dcc <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e02c      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_RCC_OscConfig+0x708>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	049b      	lsls	r3, r3, #18
 8001982:	4013      	ands	r3, r2
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x694>
 8001986:	e024      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01f      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_RCC_OscConfig+0x708>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <HAL_RCC_OscConfig+0x708>)
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	23c0      	movs	r3, #192	@ 0xc0
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10e      	bne.n	80019ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	220f      	movs	r2, #15
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	23f0      	movs	r3, #240	@ 0xf0
 80019c2:	039b      	lsls	r3, r3, #14
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b008      	add	sp, #32
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0bf      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b61      	ldr	r3, [pc, #388]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d911      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b5e      	ldr	r3, [pc, #376]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a14:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0a6      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	d006      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a3a:	4b51      	ldr	r3, [pc, #324]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a40:	21e0      	movs	r1, #224	@ 0xe0
 8001a42:	00c9      	lsls	r1, r1, #3
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b4d      	ldr	r3, [pc, #308]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	22f0      	movs	r2, #240	@ 0xf0
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d04c      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d120      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07a      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3e      	ldr	r3, [pc, #248]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	049b      	lsls	r3, r3, #18
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d114      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06e      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a9e:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	029b      	lsls	r3, r3, #10
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e062      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e05b      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f97c 	bl	8000dcc <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f977 	bl	8000dcc <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <HAL_RCC_ClockConfig+0x1a4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e042      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	220c      	movs	r2, #12
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ec      	bne.n	8001ada <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d211      	bcs.n	8001b32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e020      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_RCC_ClockConfig+0x1a8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b50:	f000 f820 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b54:	0001      	movs	r1, r0
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <HAL_RCC_ClockConfig+0x1ac>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	000a      	movs	r2, r1
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f7ff f8e7 	bl	8000d40 <HAL_InitTick>
  
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	00001388 	.word	0x00001388
 8001b88:	fffff8ff 	.word	0xfffff8ff
 8001b8c:	080050d8 	.word	0x080050d8
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001bae:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d046      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb8>
 8001bbe:	d848      	bhi.n	8001c52 <HAL_RCC_GetSysClockFreq+0xbe>
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d002      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x36>
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d003      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001bc8:	e043      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bcc:	613b      	str	r3, [r7, #16]
      break;
 8001bce:	e043      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0c9b      	lsrs	r3, r3, #18
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bde:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	220f      	movs	r2, #15
 8001be4:	4013      	ands	r3, r2
 8001be6:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	23c0      	movs	r3, #192	@ 0xc0
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	481a      	ldr	r0, [pc, #104]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c00:	f7fe fa94 	bl	800012c <__udivsi3>
 8001c04:	0003      	movs	r3, r0
 8001c06:	001a      	movs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4353      	muls	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e01a      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	23c0      	movs	r3, #192	@ 0xc0
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	401a      	ands	r2, r3
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c24:	f7fe fa82 	bl	800012c <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4353      	muls	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c38:	f7fe fa78 	bl	800012c <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	001a      	movs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4353      	muls	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	613b      	str	r3, [r7, #16]
      break;
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c4e:	613b      	str	r3, [r7, #16]
      break;
 8001c50:	e002      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c54:	613b      	str	r3, [r7, #16]
      break;
 8001c56:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c58:	693b      	ldr	r3, [r7, #16]
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b006      	add	sp, #24
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	40021000 	.word	0x40021000
 8001c68:	007a1200 	.word	0x007a1200
 8001c6c:	080050f0 	.word	0x080050f0
 8001c70:	08005100 	.word	0x08005100
 8001c74:	02dc6c00 	.word	0x02dc6c00

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c90:	f7ff fff2 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c94:	0001      	movs	r1, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	40d9      	lsrs	r1, r3
 8001ca6:	000b      	movs	r3, r1
}    
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	080050e8 	.word	0x080050e8

08001cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d100      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cd4:	e08e      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2017      	movs	r0, #23
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b6e      	ldr	r3, [pc, #440]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	055b      	lsls	r3, r3, #21
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d110      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b6b      	ldr	r3, [pc, #428]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cec:	69da      	ldr	r2, [r3, #28]
 8001cee:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	0549      	lsls	r1, r1, #21
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	61da      	str	r2, [r3, #28]
 8001cf8:	4b67      	ldr	r3, [pc, #412]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	183b      	adds	r3, r7, r0
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d11a      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d18:	4b60      	ldr	r3, [pc, #384]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d1e:	2180      	movs	r1, #128	@ 0x80
 8001d20:	0049      	lsls	r1, r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff f851 	bl	8000dcc <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	e008      	b.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d30:	f7ff f84c 	bl	8000dcc <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	@ 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0a6      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b56      	ldr	r3, [pc, #344]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d4e:	4b52      	ldr	r3, [pc, #328]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	23c0      	movs	r3, #192	@ 0xc0
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d034      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	23c0      	movs	r3, #192	@ 0xc0
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d02c      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d70:	4b49      	ldr	r3, [pc, #292]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d7a:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	4b46      	ldr	r3, [pc, #280]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d80:	2180      	movs	r1, #128	@ 0x80
 8001d82:	0249      	lsls	r1, r1, #9
 8001d84:	430a      	orrs	r2, r1
 8001d86:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d88:	4b43      	ldr	r3, [pc, #268]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	4b42      	ldr	r3, [pc, #264]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d8e:	4945      	ldr	r1, [pc, #276]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d94:	4b40      	ldr	r3, [pc, #256]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f813 	bl	8000dcc <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	e009      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff f80e 	bl	8000dcc <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e067      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	4b35      	ldr	r3, [pc, #212]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dca:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a34      	ldr	r2, [pc, #208]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dde:	2317      	movs	r3, #23
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dee:	492f      	ldr	r1, [pc, #188]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfe:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	2203      	movs	r2, #3
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a23      	ldr	r2, [pc, #140]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	2210      	movs	r2, #16
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	@ 0x80
 8001e54:	029b      	lsls	r3, r3, #10
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b006      	add	sp, #24
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	fffffcff 	.word	0xfffffcff
 8001ea4:	fffeffff 	.word	0xfffeffff
 8001ea8:	00001388 	.word	0x00001388
 8001eac:	efffffff 	.word	0xefffffff
 8001eb0:	fffcffff 	.word	0xfffcffff

08001eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e042      	b.n	8001f4c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	223d      	movs	r2, #61	@ 0x3d
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	223c      	movs	r2, #60	@ 0x3c
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe fdaf 	bl	8000a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	223d      	movs	r2, #61	@ 0x3d
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	f000 fd83 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2246      	movs	r2, #70	@ 0x46
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	223e      	movs	r2, #62	@ 0x3e
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	223f      	movs	r2, #63	@ 0x3f
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2240      	movs	r2, #64	@ 0x40
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2241      	movs	r2, #65	@ 0x41
 8001f1e:	2101      	movs	r1, #1
 8001f20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2242      	movs	r2, #66	@ 0x42
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2243      	movs	r2, #67	@ 0x43
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2244      	movs	r2, #68	@ 0x44
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2245      	movs	r2, #69	@ 0x45
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223d      	movs	r2, #61	@ 0x3d
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	223d      	movs	r2, #61	@ 0x3d
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e03b      	b.n	8001fe4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	223d      	movs	r2, #61	@ 0x3d
 8001f70:	2102      	movs	r1, #2
 8001f72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_TIM_Base_Start_IT+0x98>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00f      	beq.n	8001fae <HAL_TIM_Base_Start_IT+0x5a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	05db      	lsls	r3, r3, #23
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d009      	beq.n	8001fae <HAL_TIM_Base_Start_IT+0x5a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_TIM_Base_Start_IT+0x5a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d111      	bne.n	8001fd2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d010      	beq.n	8001fe2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd0:	e007      	b.n	8001fe2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40014000 	.word	0x40014000

08001ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e042      	b.n	8002090 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223d      	movs	r2, #61	@ 0x3d
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223c      	movs	r2, #60	@ 0x3c
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f839 	bl	8002098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223d      	movs	r2, #61	@ 0x3d
 800202a:	2102      	movs	r1, #2
 800202c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f000 fce1 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2246      	movs	r2, #70	@ 0x46
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223e      	movs	r2, #62	@ 0x3e
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223f      	movs	r2, #63	@ 0x3f
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2240      	movs	r2, #64	@ 0x40
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2241      	movs	r2, #65	@ 0x41
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2242      	movs	r2, #66	@ 0x42
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2243      	movs	r2, #67	@ 0x43
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2244      	movs	r2, #68	@ 0x44
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2245      	movs	r2, #69	@ 0x45
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223d      	movs	r2, #61	@ 0x3d
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <HAL_TIM_PWM_Start+0x22>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	223e      	movs	r2, #62	@ 0x3e
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	4193      	sbcs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e01f      	b.n	800210a <HAL_TIM_PWM_Start+0x62>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d108      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x3a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	223f      	movs	r2, #63	@ 0x3f
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	4193      	sbcs	r3, r2
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e013      	b.n	800210a <HAL_TIM_PWM_Start+0x62>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d108      	bne.n	80020fa <HAL_TIM_PWM_Start+0x52>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	4193      	sbcs	r3, r2
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e007      	b.n	800210a <HAL_TIM_PWM_Start+0x62>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2241      	movs	r2, #65	@ 0x41
 80020fe:	5c9b      	ldrb	r3, [r3, r2]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	1e5a      	subs	r2, r3, #1
 8002106:	4193      	sbcs	r3, r2
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e074      	b.n	80021fc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <HAL_TIM_PWM_Start+0x7a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	223e      	movs	r2, #62	@ 0x3e
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]
 8002120:	e013      	b.n	800214a <HAL_TIM_PWM_Start+0xa2>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d104      	bne.n	8002132 <HAL_TIM_PWM_Start+0x8a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	223f      	movs	r2, #63	@ 0x3f
 800212c:	2102      	movs	r1, #2
 800212e:	5499      	strb	r1, [r3, r2]
 8002130:	e00b      	b.n	800214a <HAL_TIM_PWM_Start+0xa2>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d104      	bne.n	8002142 <HAL_TIM_PWM_Start+0x9a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2240      	movs	r2, #64	@ 0x40
 800213c:	2102      	movs	r1, #2
 800213e:	5499      	strb	r1, [r3, r2]
 8002140:	e003      	b.n	800214a <HAL_TIM_PWM_Start+0xa2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2241      	movs	r2, #65	@ 0x41
 8002146:	2102      	movs	r1, #2
 8002148:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6839      	ldr	r1, [r7, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	0018      	movs	r0, r3
 8002154:	f000 ff78 	bl	8003048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <HAL_TIM_PWM_Start+0x15c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_TIM_PWM_Start+0xd8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a28      	ldr	r2, [pc, #160]	@ (8002208 <HAL_TIM_PWM_Start+0x160>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_TIM_PWM_Start+0xd8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a26      	ldr	r2, [pc, #152]	@ (800220c <HAL_TIM_PWM_Start+0x164>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIM_PWM_Start+0xd8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a25      	ldr	r2, [pc, #148]	@ (8002210 <HAL_TIM_PWM_Start+0x168>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_TIM_PWM_Start+0xdc>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_TIM_PWM_Start+0xde>
 8002184:	2300      	movs	r3, #0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	0209      	lsls	r1, r1, #8
 8002198:	430a      	orrs	r2, r1
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <HAL_TIM_PWM_Start+0x15c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00f      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x11e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d009      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x11e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_TIM_PWM_Start+0x16c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x11e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_TIM_PWM_Start+0x160>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d111      	bne.n	80021ea <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2207      	movs	r2, #7
 80021ce:	4013      	ands	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	d010      	beq.n	80021fa <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e8:	e007      	b.n	80021fa <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40012c00 	.word	0x40012c00
 8002208:	40014000 	.word	0x40014000
 800220c:	40014400 	.word	0x40014400
 8002210:	40014800 	.word	0x40014800
 8002214:	40000400 	.word	0x40000400

08002218 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e090      	b.n	800234e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	223d      	movs	r2, #61	@ 0x3d
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	223c      	movs	r2, #60	@ 0x3c
 800223c:	2100      	movs	r1, #0
 800223e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f7fe fc38 	bl	8000ab8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	223d      	movs	r2, #61	@ 0x3d
 800224c:	2102      	movs	r1, #2
 800224e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	493f      	ldr	r1, [pc, #252]	@ (8002358 <HAL_TIM_Encoder_Init+0x140>)
 800225c:	400a      	ands	r2, r1
 800225e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	0019      	movs	r1, r3
 800226a:	0010      	movs	r0, r2
 800226c:	f000 fbc8 	bl	8002a00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4a31      	ldr	r2, [pc, #196]	@ (800235c <HAL_TIM_Encoder_Init+0x144>)
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4313      	orrs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002360 <HAL_TIM_Encoder_Init+0x148>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002364 <HAL_TIM_Encoder_Init+0x14c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	4313      	orrs	r3, r2
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	011a      	lsls	r2, r3, #4
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	031b      	lsls	r3, r3, #12
 80022da:	4313      	orrs	r3, r2
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2222      	movs	r2, #34	@ 0x22
 80022e6:	4393      	bics	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2288      	movs	r2, #136	@ 0x88
 80022ee:	4393      	bics	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4313      	orrs	r3, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2246      	movs	r2, #70	@ 0x46
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	223e      	movs	r2, #62	@ 0x3e
 8002328:	2101      	movs	r1, #1
 800232a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223f      	movs	r2, #63	@ 0x3f
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2242      	movs	r2, #66	@ 0x42
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2243      	movs	r2, #67	@ 0x43
 8002340:	2101      	movs	r1, #1
 8002342:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	223d      	movs	r2, #61	@ 0x3d
 8002348:	2101      	movs	r1, #1
 800234a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b006      	add	sp, #24
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	ffffbff8 	.word	0xffffbff8
 800235c:	fffffcfc 	.word	0xfffffcfc
 8002360:	fffff3f3 	.word	0xfffff3f3
 8002364:	ffff0f0f 	.word	0xffff0f0f

08002368 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002372:	200f      	movs	r0, #15
 8002374:	183b      	adds	r3, r7, r0
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	213e      	movs	r1, #62	@ 0x3e
 800237a:	5c52      	ldrb	r2, [r2, r1]
 800237c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800237e:	230e      	movs	r3, #14
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	213f      	movs	r1, #63	@ 0x3f
 8002386:	5c52      	ldrb	r2, [r2, r1]
 8002388:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800238a:	240d      	movs	r4, #13
 800238c:	193b      	adds	r3, r7, r4
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	2142      	movs	r1, #66	@ 0x42
 8002392:	5c52      	ldrb	r2, [r2, r1]
 8002394:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002396:	230c      	movs	r3, #12
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	2143      	movs	r1, #67	@ 0x43
 800239e:	5c52      	ldrb	r2, [r2, r1]
 80023a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d112      	bne.n	80023ce <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023a8:	183b      	adds	r3, r7, r0
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d103      	bne.n	80023b8 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d001      	beq.n	80023bc <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e075      	b.n	80024a8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	223e      	movs	r2, #62	@ 0x3e
 80023c0:	2102      	movs	r1, #2
 80023c2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2242      	movs	r2, #66	@ 0x42
 80023c8:	2102      	movs	r1, #2
 80023ca:	5499      	strb	r1, [r3, r2]
 80023cc:	e03d      	b.n	800244a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d114      	bne.n	80023fe <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80023d4:	230e      	movs	r3, #14
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d104      	bne.n	80023e8 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80023de:	230c      	movs	r3, #12
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e05d      	b.n	80024a8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	223f      	movs	r2, #63	@ 0x3f
 80023f0:	2102      	movs	r1, #2
 80023f2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2243      	movs	r2, #67	@ 0x43
 80023f8:	2102      	movs	r1, #2
 80023fa:	5499      	strb	r1, [r3, r2]
 80023fc:	e025      	b.n	800244a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023fe:	230f      	movs	r3, #15
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d10e      	bne.n	8002426 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002408:	230e      	movs	r3, #14
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d109      	bne.n	8002426 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002412:	230d      	movs	r3, #13
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d104      	bne.n	8002426 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800241c:	230c      	movs	r3, #12
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e03e      	b.n	80024a8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223e      	movs	r2, #62	@ 0x3e
 800242e:	2102      	movs	r1, #2
 8002430:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	223f      	movs	r2, #63	@ 0x3f
 8002436:	2102      	movs	r1, #2
 8002438:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2242      	movs	r2, #66	@ 0x42
 800243e:	2102      	movs	r1, #2
 8002440:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2243      	movs	r2, #67	@ 0x43
 8002446:	2102      	movs	r1, #2
 8002448:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_TIM_Encoder_Start+0xf0>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d008      	beq.n	8002468 <HAL_TIM_Encoder_Start+0x100>
 8002456:	e00f      	b.n	8002478 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	2100      	movs	r1, #0
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fdf1 	bl	8003048 <TIM_CCxChannelCmd>
      break;
 8002466:	e016      	b.n	8002496 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	2104      	movs	r1, #4
 8002470:	0018      	movs	r0, r3
 8002472:	f000 fde9 	bl	8003048 <TIM_CCxChannelCmd>
      break;
 8002476:	e00e      	b.n	8002496 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2201      	movs	r2, #1
 800247e:	2100      	movs	r1, #0
 8002480:	0018      	movs	r0, r3
 8002482:	f000 fde1 	bl	8003048 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	2104      	movs	r1, #4
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fdda 	bl	8003048 <TIM_CCxChannelCmd>
      break;
 8002494:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b005      	add	sp, #20
 80024ae:	bd90      	pop	{r4, r7, pc}

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d021      	beq.n	8002514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d01d      	beq.n	8002514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2203      	movs	r2, #3
 80024de:	4252      	negs	r2, r2
 80024e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2203      	movs	r2, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 fa6a 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 80024fc:	e007      	b.n	800250e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fa5d 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fa69 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2204      	movs	r2, #4
 8002518:	4013      	ands	r3, r2
 800251a:	d022      	beq.n	8002562 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2204      	movs	r2, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d01e      	beq.n	8002562 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2205      	movs	r2, #5
 800252a:	4252      	negs	r2, r2
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	23c0      	movs	r3, #192	@ 0xc0
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fa43 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 800254a:	e007      	b.n	800255c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fa36 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fa42 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2208      	movs	r2, #8
 8002566:	4013      	ands	r3, r2
 8002568:	d021      	beq.n	80025ae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2208      	movs	r2, #8
 800256e:	4013      	ands	r3, r2
 8002570:	d01d      	beq.n	80025ae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2209      	movs	r2, #9
 8002578:	4252      	negs	r2, r2
 800257a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2204      	movs	r2, #4
 8002580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fa1d 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 8002596:	e007      	b.n	80025a8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fa10 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 fa1c 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d022      	beq.n	80025fc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2210      	movs	r2, #16
 80025ba:	4013      	ands	r3, r2
 80025bc:	d01e      	beq.n	80025fc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2211      	movs	r2, #17
 80025c4:	4252      	negs	r2, r2
 80025c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2208      	movs	r2, #8
 80025cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	23c0      	movs	r3, #192	@ 0xc0
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 f9f6 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f9e9 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f9f5 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d00c      	beq.n	800261e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d008      	beq.n	800261e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2202      	movs	r2, #2
 8002612:	4252      	negs	r2, r2
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f7fd ff2f 	bl	800047c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	4013      	ands	r3, r2
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	4013      	ands	r3, r2
 800262c:	d008      	beq.n	8002640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2281      	movs	r2, #129	@ 0x81
 8002634:	4252      	negs	r2, r2
 8002636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fdec 	bl	8003218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	4013      	ands	r3, r2
 8002646:	d00c      	beq.n	8002662 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2240      	movs	r2, #64	@ 0x40
 800264c:	4013      	ands	r3, r2
 800264e:	d008      	beq.n	8002662 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2241      	movs	r2, #65	@ 0x41
 8002656:	4252      	negs	r2, r2
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f9c7 	bl	80029f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2220      	movs	r2, #32
 8002666:	4013      	ands	r3, r2
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	4013      	ands	r3, r2
 8002670:	d008      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2221      	movs	r2, #33	@ 0x21
 8002678:	4252      	negs	r2, r2
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fdc2 	bl	8003208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2317      	movs	r3, #23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	223c      	movs	r2, #60	@ 0x3c
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0ad      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	223c      	movs	r2, #60	@ 0x3c
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d100      	bne.n	80026be <HAL_TIM_PWM_ConfigChannel+0x32>
 80026bc:	e076      	b.n	80027ac <HAL_TIM_PWM_ConfigChannel+0x120>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d900      	bls.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80026c4:	e095      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d04e      	beq.n	800276a <HAL_TIM_PWM_ConfigChannel+0xde>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d900      	bls.n	80026d4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80026d2:	e08e      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d021      	beq.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x98>
 80026e0:	e087      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 fa16 	bl	8002b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2108      	movs	r1, #8
 80026fc:	430a      	orrs	r2, r1
 80026fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2104      	movs	r1, #4
 800270c:	438a      	bics	r2, r1
 800270e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6999      	ldr	r1, [r3, #24]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	619a      	str	r2, [r3, #24]
      break;
 8002722:	e06b      	b.n	80027fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fa7d 	bl	8002c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	0109      	lsls	r1, r1, #4
 8002740:	430a      	orrs	r2, r1
 8002742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4931      	ldr	r1, [pc, #196]	@ (8002814 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002750:	400a      	ands	r2, r1
 8002752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6999      	ldr	r1, [r3, #24]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	021a      	lsls	r2, r3, #8
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	619a      	str	r2, [r3, #24]
      break;
 8002768:	e048      	b.n	80027fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	0011      	movs	r1, r2
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fade 	bl	8002d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2108      	movs	r1, #8
 8002784:	430a      	orrs	r2, r1
 8002786:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2104      	movs	r1, #4
 8002794:	438a      	bics	r2, r1
 8002796:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69d9      	ldr	r1, [r3, #28]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	61da      	str	r2, [r3, #28]
      break;
 80027aa:	e027      	b.n	80027fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 fb43 	bl	8002e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2180      	movs	r1, #128	@ 0x80
 80027c6:	0109      	lsls	r1, r1, #4
 80027c8:	430a      	orrs	r2, r1
 80027ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	490f      	ldr	r1, [pc, #60]	@ (8002814 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80027d8:	400a      	ands	r2, r1
 80027da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69d9      	ldr	r1, [r3, #28]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	021a      	lsls	r2, r3, #8
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
      break;
 80027f0:	e004      	b.n	80027fc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80027f2:	2317      	movs	r3, #23
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
      break;
 80027fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	223c      	movs	r2, #60	@ 0x3c
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

  return status;
 8002804:	2317      	movs	r3, #23
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b006      	add	sp, #24
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	fffffbff 	.word	0xfffffbff

08002818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223c      	movs	r2, #60	@ 0x3c
 800282e:	5c9b      	ldrb	r3, [r3, r2]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIM_ConfigClockSource+0x20>
 8002834:	2302      	movs	r3, #2
 8002836:	e0bc      	b.n	80029b2 <HAL_TIM_ConfigClockSource+0x19a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	223c      	movs	r2, #60	@ 0x3c
 800283c:	2101      	movs	r1, #1
 800283e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223d      	movs	r2, #61	@ 0x3d
 8002844:	2102      	movs	r1, #2
 8002846:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2277      	movs	r2, #119	@ 0x77
 8002854:	4393      	bics	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <HAL_TIM_ConfigClockSource+0x1a4>)
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	0192      	lsls	r2, r2, #6
 8002870:	4293      	cmp	r3, r2
 8002872:	d040      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0xde>
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	0192      	lsls	r2, r2, #6
 8002878:	4293      	cmp	r3, r2
 800287a:	d900      	bls.n	800287e <HAL_TIM_ConfigClockSource+0x66>
 800287c:	e088      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 800287e:	2280      	movs	r2, #128	@ 0x80
 8002880:	0152      	lsls	r2, r2, #5
 8002882:	4293      	cmp	r3, r2
 8002884:	d100      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x70>
 8002886:	e088      	b.n	800299a <HAL_TIM_ConfigClockSource+0x182>
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	0152      	lsls	r2, r2, #5
 800288c:	4293      	cmp	r3, r2
 800288e:	d900      	bls.n	8002892 <HAL_TIM_ConfigClockSource+0x7a>
 8002890:	e07e      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 8002892:	2b70      	cmp	r3, #112	@ 0x70
 8002894:	d018      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xb0>
 8002896:	d900      	bls.n	800289a <HAL_TIM_ConfigClockSource+0x82>
 8002898:	e07a      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 800289a:	2b60      	cmp	r3, #96	@ 0x60
 800289c:	d04f      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x126>
 800289e:	d900      	bls.n	80028a2 <HAL_TIM_ConfigClockSource+0x8a>
 80028a0:	e076      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 80028a2:	2b50      	cmp	r3, #80	@ 0x50
 80028a4:	d03b      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x106>
 80028a6:	d900      	bls.n	80028aa <HAL_TIM_ConfigClockSource+0x92>
 80028a8:	e072      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 80028aa:	2b40      	cmp	r3, #64	@ 0x40
 80028ac:	d057      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x146>
 80028ae:	d900      	bls.n	80028b2 <HAL_TIM_ConfigClockSource+0x9a>
 80028b0:	e06e      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 80028b2:	2b30      	cmp	r3, #48	@ 0x30
 80028b4:	d063      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x166>
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x166>
 80028bc:	d868      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d05d      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x166>
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d05b      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x166>
 80028c6:	e063      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028d8:	f000 fb96 	bl	8003008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2277      	movs	r2, #119	@ 0x77
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
      break;
 80028f4:	e052      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002906:	f000 fb7f 	bl	8003008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	01c9      	lsls	r1, r1, #7
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03e      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	001a      	movs	r2, r3
 800292c:	f000 faf2 	bl	8002f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	@ 0x50
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fb4c 	bl	8002fd4 <TIM_ITRx_SetConfig>
      break;
 800293c:	e02e      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800294a:	001a      	movs	r2, r3
 800294c:	f000 fb10 	bl	8002f70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	@ 0x60
 8002956:	0018      	movs	r0, r3
 8002958:	f000 fb3c 	bl	8002fd4 <TIM_ITRx_SetConfig>
      break;
 800295c:	e01e      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	001a      	movs	r2, r3
 800296c:	f000 fad2 	bl	8002f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	@ 0x40
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fb2c 	bl	8002fd4 <TIM_ITRx_SetConfig>
      break;
 800297c:	e00e      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f000 fb23 	bl	8002fd4 <TIM_ITRx_SetConfig>
      break;
 800298e:	e005      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002990:	230f      	movs	r3, #15
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
      break;
 8002998:	e000      	b.n	800299c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800299a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	223d      	movs	r2, #61	@ 0x3d
 80029a0:	2101      	movs	r1, #1
 80029a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	223c      	movs	r2, #60	@ 0x3c
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

  return status;
 80029ac:	230f      	movs	r3, #15
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b004      	add	sp, #16
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	ffff00ff 	.word	0xffff00ff

080029c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3b      	ldr	r2, [pc, #236]	@ (8002b00 <TIM_Base_SetConfig+0x100>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d008      	beq.n	8002a2a <TIM_Base_SetConfig+0x2a>
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0x2a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a37      	ldr	r2, [pc, #220]	@ (8002b04 <TIM_Base_SetConfig+0x104>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2270      	movs	r2, #112	@ 0x70
 8002a2e:	4393      	bics	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <TIM_Base_SetConfig+0x100>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2c      	ldr	r2, [pc, #176]	@ (8002b04 <TIM_Base_SetConfig+0x104>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <TIM_Base_SetConfig+0x108>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <TIM_Base_SetConfig+0x10c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a29      	ldr	r2, [pc, #164]	@ (8002b10 <TIM_Base_SetConfig+0x110>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a28      	ldr	r2, [pc, #160]	@ (8002b14 <TIM_Base_SetConfig+0x114>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a27      	ldr	r2, [pc, #156]	@ (8002b18 <TIM_Base_SetConfig+0x118>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2280      	movs	r2, #128	@ 0x80
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	001a      	movs	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a13      	ldr	r2, [pc, #76]	@ (8002b00 <TIM_Base_SetConfig+0x100>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <TIM_Base_SetConfig+0xce>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	@ (8002b0c <TIM_Base_SetConfig+0x10c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0xce>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <TIM_Base_SetConfig+0x110>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0xce>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <TIM_Base_SetConfig+0x114>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d103      	bne.n	8002ad6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4393      	bics	r3, r2
 8002af0:	001a      	movs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	611a      	str	r2, [r3, #16]
  }
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40002000 	.word	0x40002000
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800
 8002b18:	fffffcff 	.word	0xfffffcff

08002b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4393      	bics	r3, r2
 8002b34:	001a      	movs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2270      	movs	r2, #112	@ 0x70
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4393      	bics	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2202      	movs	r2, #2
 8002b64:	4393      	bics	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a27      	ldr	r2, [pc, #156]	@ (8002c14 <TIM_OC1_SetConfig+0xf8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00b      	beq.n	8002b92 <TIM_OC1_SetConfig+0x76>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	@ (8002c18 <TIM_OC1_SetConfig+0xfc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <TIM_OC1_SetConfig+0x76>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a25      	ldr	r2, [pc, #148]	@ (8002c1c <TIM_OC1_SetConfig+0x100>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_OC1_SetConfig+0x76>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a24      	ldr	r2, [pc, #144]	@ (8002c20 <TIM_OC1_SetConfig+0x104>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10c      	bne.n	8002bac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2208      	movs	r2, #8
 8002b96:	4393      	bics	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4393      	bics	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <TIM_OC1_SetConfig+0xf8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <TIM_OC1_SetConfig+0xb0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a18      	ldr	r2, [pc, #96]	@ (8002c18 <TIM_OC1_SetConfig+0xfc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_OC1_SetConfig+0xb0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a17      	ldr	r2, [pc, #92]	@ (8002c1c <TIM_OC1_SetConfig+0x100>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_OC1_SetConfig+0xb0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <TIM_OC1_SetConfig+0x104>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d111      	bne.n	8002bf0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <TIM_OC1_SetConfig+0x108>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <TIM_OC1_SetConfig+0x10c>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40014000 	.word	0x40014000
 8002c1c:	40014400 	.word	0x40014400
 8002c20:	40014800 	.word	0x40014800
 8002c24:	fffffeff 	.word	0xfffffeff
 8002c28:	fffffdff 	.word	0xfffffdff

08002c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2210      	movs	r2, #16
 8002c42:	4393      	bics	r3, r2
 8002c44:	001a      	movs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4a2e      	ldr	r2, [pc, #184]	@ (8002d14 <TIM_OC2_SetConfig+0xe8>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <TIM_OC2_SetConfig+0xec>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2220      	movs	r2, #32
 8002c76:	4393      	bics	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a24      	ldr	r2, [pc, #144]	@ (8002d1c <TIM_OC2_SetConfig+0xf0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10d      	bne.n	8002caa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2280      	movs	r2, #128	@ 0x80
 8002c92:	4393      	bics	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2240      	movs	r2, #64	@ 0x40
 8002ca6:	4393      	bics	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <TIM_OC2_SetConfig+0xf0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_OC2_SetConfig+0x9e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <TIM_OC2_SetConfig+0xf4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <TIM_OC2_SetConfig+0x9e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <TIM_OC2_SetConfig+0xf8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_OC2_SetConfig+0x9e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <TIM_OC2_SetConfig+0xfc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d113      	bne.n	8002cf2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <TIM_OC2_SetConfig+0x100>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <TIM_OC2_SetConfig+0x104>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	621a      	str	r2, [r3, #32]
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b006      	add	sp, #24
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	ffff8fff 	.word	0xffff8fff
 8002d18:	fffffcff 	.word	0xfffffcff
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	fffffbff 	.word	0xfffffbff
 8002d30:	fffff7ff 	.word	0xfffff7ff

08002d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a33      	ldr	r2, [pc, #204]	@ (8002e18 <TIM_OC3_SetConfig+0xe4>)
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2270      	movs	r2, #112	@ 0x70
 8002d60:	4393      	bics	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2203      	movs	r2, #3
 8002d68:	4393      	bics	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4a28      	ldr	r2, [pc, #160]	@ (8002e1c <TIM_OC3_SetConfig+0xe8>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <TIM_OC3_SetConfig+0xec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10d      	bne.n	8002dae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4a23      	ldr	r2, [pc, #140]	@ (8002e24 <TIM_OC3_SetConfig+0xf0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e28 <TIM_OC3_SetConfig+0xf4>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <TIM_OC3_SetConfig+0xec>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00b      	beq.n	8002dce <TIM_OC3_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <TIM_OC3_SetConfig+0xf8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <TIM_OC3_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <TIM_OC3_SetConfig+0xfc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <TIM_OC3_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e34 <TIM_OC3_SetConfig+0x100>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d113      	bne.n	8002df6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	@ (8002e38 <TIM_OC3_SetConfig+0x104>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	@ (8002e3c <TIM_OC3_SetConfig+0x108>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	621a      	str	r2, [r3, #32]
}
 8002e10:	46c0      	nop			@ (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b006      	add	sp, #24
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	fffffeff 	.word	0xfffffeff
 8002e1c:	fffffdff 	.word	0xfffffdff
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	fffff7ff 	.word	0xfffff7ff
 8002e28:	fffffbff 	.word	0xfffffbff
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800
 8002e38:	ffffefff 	.word	0xffffefff
 8002e3c:	ffffdfff 	.word	0xffffdfff

08002e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <TIM_OC4_SetConfig+0xb0>)
 8002e56:	401a      	ands	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a22      	ldr	r2, [pc, #136]	@ (8002ef4 <TIM_OC4_SetConfig+0xb4>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a21      	ldr	r2, [pc, #132]	@ (8002ef8 <TIM_OC4_SetConfig+0xb8>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4a1d      	ldr	r2, [pc, #116]	@ (8002efc <TIM_OC4_SetConfig+0xbc>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	031b      	lsls	r3, r3, #12
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a19      	ldr	r2, [pc, #100]	@ (8002f00 <TIM_OC4_SetConfig+0xc0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <TIM_OC4_SetConfig+0x78>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <TIM_OC4_SetConfig+0xc4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <TIM_OC4_SetConfig+0x78>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <TIM_OC4_SetConfig+0xc8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_OC4_SetConfig+0x78>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a16      	ldr	r2, [pc, #88]	@ (8002f0c <TIM_OC4_SetConfig+0xcc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d109      	bne.n	8002ecc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <TIM_OC4_SetConfig+0xd0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	621a      	str	r2, [r3, #32]
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b006      	add	sp, #24
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	ffffefff 	.word	0xffffefff
 8002ef4:	ffff8fff 	.word	0xffff8fff
 8002ef8:	fffffcff 	.word	0xfffffcff
 8002efc:	ffffdfff 	.word	0xffffdfff
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40014400 	.word	0x40014400
 8002f0c:	40014800 	.word	0x40014800
 8002f10:	ffffbfff 	.word	0xffffbfff

08002f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	001a      	movs	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	22f0      	movs	r2, #240	@ 0xf0
 8002f3e:	4393      	bics	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	220a      	movs	r2, #10
 8002f50:	4393      	bics	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b006      	add	sp, #24
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	2210      	movs	r2, #16
 8002f88:	4393      	bics	r3, r2
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <TIM_TI2_ConfigInputStage+0x60>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	031b      	lsls	r3, r3, #12
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	22a0      	movs	r2, #160	@ 0xa0
 8002fac:	4393      	bics	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b006      	add	sp, #24
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	ffff0fff 	.word	0xffff0fff

08002fd4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2270      	movs	r2, #112	@ 0x70
 8002fe8:	4393      	bics	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	609a      	str	r2, [r3, #8]
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b004      	add	sp, #16
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <TIM_ETR_SetConfig+0x3c>)
 8003020:	4013      	ands	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	021a      	lsls	r2, r3, #8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	431a      	orrs	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}
 8003044:	ffff00ff 	.word	0xffff00ff

08003048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	221f      	movs	r2, #31
 8003058:	4013      	ands	r3, r2
 800305a:	2201      	movs	r2, #1
 800305c:	409a      	lsls	r2, r3
 800305e:	0013      	movs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	43d2      	mvns	r2, r2
 800306a:	401a      	ands	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	211f      	movs	r1, #31
 8003078:	400b      	ands	r3, r1
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4099      	lsls	r1, r3
 800307e:	000b      	movs	r3, r1
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223c      	movs	r2, #60	@ 0x3c
 800309e:	5c9b      	ldrb	r3, [r3, r2]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e047      	b.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	223c      	movs	r2, #60	@ 0x3c
 80030ac:	2101      	movs	r1, #1
 80030ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	223d      	movs	r2, #61	@ 0x3d
 80030b4:	2102      	movs	r1, #2
 80030b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2270      	movs	r2, #112	@ 0x70
 80030cc:	4393      	bics	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00f      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	05db      	lsls	r3, r3, #23
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d009      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	4393      	bics	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	223d      	movs	r2, #61	@ 0x3d
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	223c      	movs	r2, #60	@ 0x3c
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b004      	add	sp, #16
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40000400 	.word	0x40000400
 8003148:	40014000 	.word	0x40014000

0800314c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	223c      	movs	r2, #60	@ 0x3c
 800315e:	5c9b      	ldrb	r3, [r3, r2]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003164:	2302      	movs	r3, #2
 8003166:	e03e      	b.n	80031e6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	223c      	movs	r2, #60	@ 0x3c
 800316c:	2101      	movs	r1, #1
 800316e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	22ff      	movs	r2, #255	@ 0xff
 8003174:	4393      	bics	r3, r2
 8003176:	001a      	movs	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a1b      	ldr	r2, [pc, #108]	@ (80031f0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003184:	401a      	ands	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003192:	401a      	ands	r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a16      	ldr	r2, [pc, #88]	@ (80031f8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80031a0:	401a      	ands	r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80031ae:	401a      	ands	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a11      	ldr	r2, [pc, #68]	@ (8003200 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80031bc:	401a      	ands	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003204 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80031ca:	401a      	ands	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	223c      	movs	r2, #60	@ 0x3c
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	fffffcff 	.word	0xfffffcff
 80031f4:	fffffbff 	.word	0xfffffbff
 80031f8:	fffff7ff 	.word	0xfffff7ff
 80031fc:	ffffefff 	.word	0xffffefff
 8003200:	ffffdfff 	.word	0xffffdfff
 8003204:	ffffbfff 	.word	0xffffbfff

08003208 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003220:	46c0      	nop			@ (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e044      	b.n	80032c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2278      	movs	r2, #120	@ 0x78
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fced 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	@ 0x24
 8003256:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fb3c 	bl	80038f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f9b0 	bl	80035e0 <UART_SetConfig>
 8003280:	0003      	movs	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01c      	b.n	80032c4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	490d      	ldr	r1, [pc, #52]	@ (80032cc <HAL_UART_Init+0xa4>)
 8003296:	400a      	ands	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	212a      	movs	r1, #42	@ 0x2a
 80032a6:	438a      	bics	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 fbcb 	bl	8003a58 <UART_CheckIdleState>
 80032c2:	0003      	movs	r3, r0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	ffffb7ff 	.word	0xffffb7ff

080032d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d000      	beq.n	80032ea <HAL_UART_Transmit+0x1a>
 80032e8:	e08c      	b.n	8003404 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_UART_Transmit+0x28>
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e084      	b.n	8003406 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	015b      	lsls	r3, r3, #5
 8003304:	429a      	cmp	r2, r3
 8003306:	d109      	bne.n	800331c <HAL_UART_Transmit+0x4c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2201      	movs	r2, #1
 8003314:	4013      	ands	r3, r2
 8003316:	d001      	beq.n	800331c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e074      	b.n	8003406 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2284      	movs	r2, #132	@ 0x84
 8003320:	2100      	movs	r1, #0
 8003322:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2221      	movs	r2, #33	@ 0x21
 8003328:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332a:	f7fd fd4f 	bl	8000dcc <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1dba      	adds	r2, r7, #6
 8003336:	2150      	movs	r1, #80	@ 0x50
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1dba      	adds	r2, r7, #6
 8003340:	2152      	movs	r1, #82	@ 0x52
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	015b      	lsls	r3, r3, #5
 800334e:	429a      	cmp	r2, r3
 8003350:	d108      	bne.n	8003364 <HAL_UART_Transmit+0x94>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e003      	b.n	800336c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800336c:	e02f      	b.n	80033ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0013      	movs	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	f000 fc14 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d004      	beq.n	800338e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e03b      	b.n	8003406 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	05d2      	lsls	r2, r2, #23
 800339e:	0dd2      	lsrs	r2, r2, #23
 80033a0:	b292      	uxth	r2, r2
 80033a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3302      	adds	r3, #2
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e007      	b.n	80033bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2252      	movs	r2, #82	@ 0x52
 80033c0:	5a9b      	ldrh	r3, [r3, r2]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b299      	uxth	r1, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2252      	movs	r2, #82	@ 0x52
 80033cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2252      	movs	r2, #82	@ 0x52
 80033d2:	5a9b      	ldrh	r3, [r3, r2]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1c9      	bne.n	800336e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	0013      	movs	r3, r2
 80033e4:	2200      	movs	r2, #0
 80033e6:	2140      	movs	r1, #64	@ 0x40
 80033e8:	f000 fbde 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d004      	beq.n	80033fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e005      	b.n	8003406 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b008      	add	sp, #32
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2280      	movs	r2, #128	@ 0x80
 8003424:	589b      	ldr	r3, [r3, r2]
 8003426:	2b20      	cmp	r3, #32
 8003428:	d000      	beq.n	800342c <HAL_UART_Receive+0x1c>
 800342a:	e0d1      	b.n	80035d0 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_UART_Receive+0x2a>
 8003432:	1dbb      	adds	r3, r7, #6
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0c9      	b.n	80035d2 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	015b      	lsls	r3, r3, #5
 8003446:	429a      	cmp	r2, r3
 8003448:	d109      	bne.n	800345e <HAL_UART_Receive+0x4e>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2201      	movs	r2, #1
 8003456:	4013      	ands	r3, r2
 8003458:	d001      	beq.n	800345e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0b9      	b.n	80035d2 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2284      	movs	r2, #132	@ 0x84
 8003462:	2100      	movs	r1, #0
 8003464:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2280      	movs	r2, #128	@ 0x80
 800346a:	2122      	movs	r1, #34	@ 0x22
 800346c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003474:	f7fd fcaa 	bl	8000dcc <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1dba      	adds	r2, r7, #6
 8003480:	2158      	movs	r1, #88	@ 0x58
 8003482:	8812      	ldrh	r2, [r2, #0]
 8003484:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1dba      	adds	r2, r7, #6
 800348a:	215a      	movs	r1, #90	@ 0x5a
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	015b      	lsls	r3, r3, #5
 8003498:	429a      	cmp	r2, r3
 800349a:	d10d      	bne.n	80034b8 <HAL_UART_Receive+0xa8>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <HAL_UART_Receive+0x9e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	225c      	movs	r2, #92	@ 0x5c
 80034a8:	494c      	ldr	r1, [pc, #304]	@ (80035dc <HAL_UART_Receive+0x1cc>)
 80034aa:	5299      	strh	r1, [r3, r2]
 80034ac:	e02e      	b.n	800350c <HAL_UART_Receive+0xfc>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	225c      	movs	r2, #92	@ 0x5c
 80034b2:	21ff      	movs	r1, #255	@ 0xff
 80034b4:	5299      	strh	r1, [r3, r2]
 80034b6:	e029      	b.n	800350c <HAL_UART_Receive+0xfc>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_UART_Receive+0xcc>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_UART_Receive+0xc2>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	225c      	movs	r2, #92	@ 0x5c
 80034cc:	21ff      	movs	r1, #255	@ 0xff
 80034ce:	5299      	strh	r1, [r3, r2]
 80034d0:	e01c      	b.n	800350c <HAL_UART_Receive+0xfc>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	225c      	movs	r2, #92	@ 0x5c
 80034d6:	217f      	movs	r1, #127	@ 0x7f
 80034d8:	5299      	strh	r1, [r3, r2]
 80034da:	e017      	b.n	800350c <HAL_UART_Receive+0xfc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	055b      	lsls	r3, r3, #21
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d10d      	bne.n	8003504 <HAL_UART_Receive+0xf4>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_UART_Receive+0xea>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	225c      	movs	r2, #92	@ 0x5c
 80034f4:	217f      	movs	r1, #127	@ 0x7f
 80034f6:	5299      	strh	r1, [r3, r2]
 80034f8:	e008      	b.n	800350c <HAL_UART_Receive+0xfc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	225c      	movs	r2, #92	@ 0x5c
 80034fe:	213f      	movs	r1, #63	@ 0x3f
 8003500:	5299      	strh	r1, [r3, r2]
 8003502:	e003      	b.n	800350c <HAL_UART_Receive+0xfc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	225c      	movs	r2, #92	@ 0x5c
 8003508:	2100      	movs	r1, #0
 800350a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800350c:	2312      	movs	r3, #18
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	215c      	movs	r1, #92	@ 0x5c
 8003514:	5a52      	ldrh	r2, [r2, r1]
 8003516:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	2380      	movs	r3, #128	@ 0x80
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	429a      	cmp	r2, r3
 8003522:	d108      	bne.n	8003536 <HAL_UART_Receive+0x126>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e003      	b.n	800353e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800353e:	e03b      	b.n	80035b8 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	0013      	movs	r3, r2
 800354a:	2200      	movs	r2, #0
 800354c:	2120      	movs	r1, #32
 800354e:	f000 fb2b 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d005      	beq.n	8003562 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2280      	movs	r2, #128	@ 0x80
 800355a:	2120      	movs	r1, #32
 800355c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e037      	b.n	80035d2 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10e      	bne.n	8003586 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800356e:	b29b      	uxth	r3, r3
 8003570:	2212      	movs	r2, #18
 8003572:	18ba      	adds	r2, r7, r2
 8003574:	8812      	ldrh	r2, [r2, #0]
 8003576:	4013      	ands	r3, r2
 8003578:	b29a      	uxth	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3302      	adds	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e00f      	b.n	80035a6 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800358c:	b29b      	uxth	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2212      	movs	r2, #18
 8003592:	18ba      	adds	r2, r7, r2
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	4013      	ands	r3, r2
 800359a:	b2da      	uxtb	r2, r3
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	225a      	movs	r2, #90	@ 0x5a
 80035aa:	5a9b      	ldrh	r3, [r3, r2]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b299      	uxth	r1, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	225a      	movs	r2, #90	@ 0x5a
 80035b6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	225a      	movs	r2, #90	@ 0x5a
 80035bc:	5a9b      	ldrh	r3, [r3, r2]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1bd      	bne.n	8003540 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2280      	movs	r2, #128	@ 0x80
 80035c8:	2120      	movs	r1, #32
 80035ca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b008      	add	sp, #32
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	000001ff 	.word	0x000001ff

080035e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e8:	231e      	movs	r3, #30
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4aaf      	ldr	r2, [pc, #700]	@ (80038cc <UART_SetConfig+0x2ec>)
 8003610:	4013      	ands	r3, r2
 8003612:	0019      	movs	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4aaa      	ldr	r2, [pc, #680]	@ (80038d0 <UART_SetConfig+0x2f0>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4aa1      	ldr	r2, [pc, #644]	@ (80038d4 <UART_SetConfig+0x2f4>)
 800364e:	4013      	ands	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a9d      	ldr	r2, [pc, #628]	@ (80038d8 <UART_SetConfig+0x2f8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d127      	bne.n	80036b6 <UART_SetConfig+0xd6>
 8003666:	4b9d      	ldr	r3, [pc, #628]	@ (80038dc <UART_SetConfig+0x2fc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	2203      	movs	r2, #3
 800366c:	4013      	ands	r3, r2
 800366e:	2b03      	cmp	r3, #3
 8003670:	d00d      	beq.n	800368e <UART_SetConfig+0xae>
 8003672:	d81b      	bhi.n	80036ac <UART_SetConfig+0xcc>
 8003674:	2b02      	cmp	r3, #2
 8003676:	d014      	beq.n	80036a2 <UART_SetConfig+0xc2>
 8003678:	d818      	bhi.n	80036ac <UART_SetConfig+0xcc>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <UART_SetConfig+0xa4>
 800367e:	2b01      	cmp	r3, #1
 8003680:	d00a      	beq.n	8003698 <UART_SetConfig+0xb8>
 8003682:	e013      	b.n	80036ac <UART_SetConfig+0xcc>
 8003684:	231f      	movs	r3, #31
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e065      	b.n	800375a <UART_SetConfig+0x17a>
 800368e:	231f      	movs	r3, #31
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e060      	b.n	800375a <UART_SetConfig+0x17a>
 8003698:	231f      	movs	r3, #31
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2204      	movs	r2, #4
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e05b      	b.n	800375a <UART_SetConfig+0x17a>
 80036a2:	231f      	movs	r3, #31
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2208      	movs	r2, #8
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e056      	b.n	800375a <UART_SetConfig+0x17a>
 80036ac:	231f      	movs	r3, #31
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2210      	movs	r2, #16
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e051      	b.n	800375a <UART_SetConfig+0x17a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a89      	ldr	r2, [pc, #548]	@ (80038e0 <UART_SetConfig+0x300>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d134      	bne.n	800372a <UART_SetConfig+0x14a>
 80036c0:	4b86      	ldr	r3, [pc, #536]	@ (80038dc <UART_SetConfig+0x2fc>)
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	23c0      	movs	r3, #192	@ 0xc0
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	4013      	ands	r3, r2
 80036ca:	22c0      	movs	r2, #192	@ 0xc0
 80036cc:	0292      	lsls	r2, r2, #10
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d017      	beq.n	8003702 <UART_SetConfig+0x122>
 80036d2:	22c0      	movs	r2, #192	@ 0xc0
 80036d4:	0292      	lsls	r2, r2, #10
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d822      	bhi.n	8003720 <UART_SetConfig+0x140>
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	0292      	lsls	r2, r2, #10
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <UART_SetConfig+0x136>
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	0292      	lsls	r2, r2, #10
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d81a      	bhi.n	8003720 <UART_SetConfig+0x140>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <UART_SetConfig+0x118>
 80036ee:	2280      	movs	r2, #128	@ 0x80
 80036f0:	0252      	lsls	r2, r2, #9
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00a      	beq.n	800370c <UART_SetConfig+0x12c>
 80036f6:	e013      	b.n	8003720 <UART_SetConfig+0x140>
 80036f8:	231f      	movs	r3, #31
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e02b      	b.n	800375a <UART_SetConfig+0x17a>
 8003702:	231f      	movs	r3, #31
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e026      	b.n	800375a <UART_SetConfig+0x17a>
 800370c:	231f      	movs	r3, #31
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2204      	movs	r2, #4
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e021      	b.n	800375a <UART_SetConfig+0x17a>
 8003716:	231f      	movs	r3, #31
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2208      	movs	r2, #8
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e01c      	b.n	800375a <UART_SetConfig+0x17a>
 8003720:	231f      	movs	r3, #31
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2210      	movs	r2, #16
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e017      	b.n	800375a <UART_SetConfig+0x17a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6d      	ldr	r2, [pc, #436]	@ (80038e4 <UART_SetConfig+0x304>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d104      	bne.n	800373e <UART_SetConfig+0x15e>
 8003734:	231f      	movs	r3, #31
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e00d      	b.n	800375a <UART_SetConfig+0x17a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a69      	ldr	r2, [pc, #420]	@ (80038e8 <UART_SetConfig+0x308>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0x172>
 8003748:	231f      	movs	r3, #31
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e003      	b.n	800375a <UART_SetConfig+0x17a>
 8003752:	231f      	movs	r3, #31
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2210      	movs	r2, #16
 8003758:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	429a      	cmp	r2, r3
 8003764:	d15c      	bne.n	8003820 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003766:	231f      	movs	r3, #31
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d015      	beq.n	800379c <UART_SetConfig+0x1bc>
 8003770:	dc18      	bgt.n	80037a4 <UART_SetConfig+0x1c4>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00d      	beq.n	8003792 <UART_SetConfig+0x1b2>
 8003776:	dc15      	bgt.n	80037a4 <UART_SetConfig+0x1c4>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <UART_SetConfig+0x1a2>
 800377c:	2b02      	cmp	r3, #2
 800377e:	d005      	beq.n	800378c <UART_SetConfig+0x1ac>
 8003780:	e010      	b.n	80037a4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003782:	f7fe fa83 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003786:	0003      	movs	r3, r0
 8003788:	61bb      	str	r3, [r7, #24]
        break;
 800378a:	e012      	b.n	80037b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b57      	ldr	r3, [pc, #348]	@ (80038ec <UART_SetConfig+0x30c>)
 800378e:	61bb      	str	r3, [r7, #24]
        break;
 8003790:	e00f      	b.n	80037b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7fe f9ff 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8003796:	0003      	movs	r3, r0
 8003798:	61bb      	str	r3, [r7, #24]
        break;
 800379a:	e00a      	b.n	80037b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	61bb      	str	r3, [r7, #24]
        break;
 80037a2:	e006      	b.n	80037b2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037a8:	231e      	movs	r3, #30
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
        break;
 80037b0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d100      	bne.n	80037ba <UART_SetConfig+0x1da>
 80037b8:	e07a      	b.n	80038b0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	005a      	lsls	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	18d2      	adds	r2, r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0019      	movs	r1, r3
 80037cc:	0010      	movs	r0, r2
 80037ce:	f7fc fcad 	bl	800012c <__udivsi3>
 80037d2:	0003      	movs	r3, r0
 80037d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b0f      	cmp	r3, #15
 80037da:	d91c      	bls.n	8003816 <UART_SetConfig+0x236>
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	025b      	lsls	r3, r3, #9
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d217      	bcs.n	8003816 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	200e      	movs	r0, #14
 80037ec:	183b      	adds	r3, r7, r0
 80037ee:	210f      	movs	r1, #15
 80037f0:	438a      	bics	r2, r1
 80037f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2207      	movs	r2, #7
 80037fc:	4013      	ands	r3, r2
 80037fe:	b299      	uxth	r1, r3
 8003800:	183b      	adds	r3, r7, r0
 8003802:	183a      	adds	r2, r7, r0
 8003804:	8812      	ldrh	r2, [r2, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	183a      	adds	r2, r7, r0
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e04c      	b.n	80038b0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003816:	231e      	movs	r3, #30
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e047      	b.n	80038b0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003820:	231f      	movs	r3, #31
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b08      	cmp	r3, #8
 8003828:	d015      	beq.n	8003856 <UART_SetConfig+0x276>
 800382a:	dc18      	bgt.n	800385e <UART_SetConfig+0x27e>
 800382c:	2b04      	cmp	r3, #4
 800382e:	d00d      	beq.n	800384c <UART_SetConfig+0x26c>
 8003830:	dc15      	bgt.n	800385e <UART_SetConfig+0x27e>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <UART_SetConfig+0x25c>
 8003836:	2b02      	cmp	r3, #2
 8003838:	d005      	beq.n	8003846 <UART_SetConfig+0x266>
 800383a:	e010      	b.n	800385e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7fe fa26 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003840:	0003      	movs	r3, r0
 8003842:	61bb      	str	r3, [r7, #24]
        break;
 8003844:	e012      	b.n	800386c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003846:	4b29      	ldr	r3, [pc, #164]	@ (80038ec <UART_SetConfig+0x30c>)
 8003848:	61bb      	str	r3, [r7, #24]
        break;
 800384a:	e00f      	b.n	800386c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384c:	f7fe f9a2 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8003850:	0003      	movs	r3, r0
 8003852:	61bb      	str	r3, [r7, #24]
        break;
 8003854:	e00a      	b.n	800386c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	61bb      	str	r3, [r7, #24]
        break;
 800385c:	e006      	b.n	800386c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003862:	231e      	movs	r3, #30
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
        break;
 800386a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01e      	beq.n	80038b0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	085a      	lsrs	r2, r3, #1
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	18d2      	adds	r2, r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0019      	movs	r1, r3
 8003882:	0010      	movs	r0, r2
 8003884:	f7fc fc52 	bl	800012c <__udivsi3>
 8003888:	0003      	movs	r3, r0
 800388a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	d90a      	bls.n	80038a8 <UART_SetConfig+0x2c8>
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	2380      	movs	r3, #128	@ 0x80
 8003896:	025b      	lsls	r3, r3, #9
 8003898:	429a      	cmp	r2, r3
 800389a:	d205      	bcs.n	80038a8 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	e003      	b.n	80038b0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80038a8:	231e      	movs	r3, #30
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038bc:	231e      	movs	r3, #30
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b008      	add	sp, #32
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	efff69f3 	.word	0xefff69f3
 80038d0:	ffffcfff 	.word	0xffffcfff
 80038d4:	fffff4ff 	.word	0xfffff4ff
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40004800 	.word	0x40004800
 80038e8:	40004c00 	.word	0x40004c00
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	2208      	movs	r2, #8
 80038fe:	4013      	ands	r3, r2
 8003900:	d00b      	beq.n	800391a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a4a      	ldr	r2, [pc, #296]	@ (8003a34 <UART_AdvFeatureConfig+0x144>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	2201      	movs	r2, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d00b      	beq.n	800393c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a43      	ldr	r2, [pc, #268]	@ (8003a38 <UART_AdvFeatureConfig+0x148>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	2202      	movs	r2, #2
 8003942:	4013      	ands	r3, r2
 8003944:	d00b      	beq.n	800395e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a3c <UART_AdvFeatureConfig+0x14c>)
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	d00b      	beq.n	8003980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a34      	ldr	r2, [pc, #208]	@ (8003a40 <UART_AdvFeatureConfig+0x150>)
 8003970:	4013      	ands	r3, r2
 8003972:	0019      	movs	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	2210      	movs	r2, #16
 8003986:	4013      	ands	r3, r2
 8003988:	d00b      	beq.n	80039a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a2c      	ldr	r2, [pc, #176]	@ (8003a44 <UART_AdvFeatureConfig+0x154>)
 8003992:	4013      	ands	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	2220      	movs	r2, #32
 80039a8:	4013      	ands	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4a25      	ldr	r2, [pc, #148]	@ (8003a48 <UART_AdvFeatureConfig+0x158>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	2240      	movs	r2, #64	@ 0x40
 80039ca:	4013      	ands	r3, r2
 80039cc:	d01d      	beq.n	8003a0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a4c <UART_AdvFeatureConfig+0x15c>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	035b      	lsls	r3, r3, #13
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10b      	bne.n	8003a0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <UART_AdvFeatureConfig+0x160>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	2280      	movs	r2, #128	@ 0x80
 8003a10:	4013      	ands	r3, r2
 8003a12:	d00b      	beq.n	8003a2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a54 <UART_AdvFeatureConfig+0x164>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	ffff7fff 	.word	0xffff7fff
 8003a38:	fffdffff 	.word	0xfffdffff
 8003a3c:	fffeffff 	.word	0xfffeffff
 8003a40:	fffbffff 	.word	0xfffbffff
 8003a44:	ffffefff 	.word	0xffffefff
 8003a48:	ffffdfff 	.word	0xffffdfff
 8003a4c:	ffefffff 	.word	0xffefffff
 8003a50:	ff9fffff 	.word	0xff9fffff
 8003a54:	fff7ffff 	.word	0xfff7ffff

08003a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b092      	sub	sp, #72	@ 0x48
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2284      	movs	r2, #132	@ 0x84
 8003a64:	2100      	movs	r1, #0
 8003a66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a68:	f7fd f9b0 	bl	8000dcc <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2208      	movs	r2, #8
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d12c      	bne.n	8003ad8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a80:	2280      	movs	r2, #128	@ 0x80
 8003a82:	0391      	lsls	r1, r2, #14
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4a46      	ldr	r2, [pc, #280]	@ (8003ba0 <UART_CheckIdleState+0x148>)
 8003a88:	9200      	str	r2, [sp, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f000 f88c 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 8003a90:	1e03      	subs	r3, r0, #0
 8003a92:	d021      	beq.n	8003ad8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2180      	movs	r1, #128	@ 0x80
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2278      	movs	r2, #120	@ 0x78
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e05f      	b.n	8003b98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d146      	bne.n	8003b74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae8:	2280      	movs	r2, #128	@ 0x80
 8003aea:	03d1      	lsls	r1, r2, #15
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <UART_CheckIdleState+0x148>)
 8003af0:	9200      	str	r2, [sp, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f000 f858 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d03b      	beq.n	8003b74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afc:	f3ef 8310 	mrs	r3, PRIMASK
 8003b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b06:	2301      	movs	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4921      	ldr	r1, [pc, #132]	@ (8003ba4 <UART_CheckIdleState+0x14c>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2101      	movs	r1, #1
 8003b50:	438a      	bics	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f383 8810 	msr	PRIMASK, r3
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2280      	movs	r2, #128	@ 0x80
 8003b64:	2120      	movs	r1, #32
 8003b66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2278      	movs	r2, #120	@ 0x78
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e011      	b.n	8003b98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2280      	movs	r2, #128	@ 0x80
 8003b7e:	2120      	movs	r1, #32
 8003b80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2278      	movs	r2, #120	@ 0x78
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b010      	add	sp, #64	@ 0x40
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	01ffffff 	.word	0x01ffffff
 8003ba4:	fffffedf 	.word	0xfffffedf

08003ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb8:	e051      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d04e      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc0:	f7fd f904 	bl	8000dcc <HAL_GetTick>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d302      	bcc.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e051      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2204      	movs	r2, #4
 8003be2:	4013      	ands	r3, r2
 8003be4:	d03b      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b80      	cmp	r3, #128	@ 0x80
 8003bea:	d038      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b40      	cmp	r3, #64	@ 0x40
 8003bf0:	d035      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d111      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2208      	movs	r2, #8
 8003c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f000 f83c 	bl	8003c88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2284      	movs	r2, #132	@ 0x84
 8003c14:	2108      	movs	r1, #8
 8003c16:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2278      	movs	r2, #120	@ 0x78
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e02c      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	401a      	ands	r2, r3
 8003c30:	2380      	movs	r3, #128	@ 0x80
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d112      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 f81f 	bl	8003c88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2284      	movs	r2, #132	@ 0x84
 8003c4e:	2120      	movs	r1, #32
 8003c50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2278      	movs	r2, #120	@ 0x78
 8003c56:	2100      	movs	r1, #0
 8003c58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	425a      	negs	r2, r3
 8003c6e:	4153      	adcs	r3, r2
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	001a      	movs	r2, r3
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d09e      	beq.n	8003bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c90:	f3ef 8310 	mrs	r3, PRIMASK
 8003c94:	617b      	str	r3, [r7, #20]
  return(result);
 8003c96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4926      	ldr	r1, [pc, #152]	@ (8003d4c <UART_EndRxTransfer+0xc4>)
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	623b      	str	r3, [r7, #32]
  return(result);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ccc:	2301      	movs	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d118      	bne.n	8003d2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d06:	2301      	movs	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2110      	movs	r1, #16
 8003d1e:	438a      	bics	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2280      	movs	r2, #128	@ 0x80
 8003d32:	2120      	movs	r1, #32
 8003d34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b00e      	add	sp, #56	@ 0x38
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	fffffedf 	.word	0xfffffedf

08003d50 <siprintf>:
 8003d50:	b40e      	push	{r1, r2, r3}
 8003d52:	b510      	push	{r4, lr}
 8003d54:	2400      	movs	r4, #0
 8003d56:	490c      	ldr	r1, [pc, #48]	@ (8003d88 <siprintf+0x38>)
 8003d58:	b09d      	sub	sp, #116	@ 0x74
 8003d5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003d5c:	9002      	str	r0, [sp, #8]
 8003d5e:	9006      	str	r0, [sp, #24]
 8003d60:	9107      	str	r1, [sp, #28]
 8003d62:	9104      	str	r1, [sp, #16]
 8003d64:	4809      	ldr	r0, [pc, #36]	@ (8003d8c <siprintf+0x3c>)
 8003d66:	490a      	ldr	r1, [pc, #40]	@ (8003d90 <siprintf+0x40>)
 8003d68:	cb04      	ldmia	r3!, {r2}
 8003d6a:	9105      	str	r1, [sp, #20]
 8003d6c:	6800      	ldr	r0, [r0, #0]
 8003d6e:	a902      	add	r1, sp, #8
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003d74:	f000 f9d4 	bl	8004120 <_svfiprintf_r>
 8003d78:	9b02      	ldr	r3, [sp, #8]
 8003d7a:	701c      	strb	r4, [r3, #0]
 8003d7c:	b01d      	add	sp, #116	@ 0x74
 8003d7e:	bc10      	pop	{r4}
 8003d80:	bc08      	pop	{r3}
 8003d82:	b003      	add	sp, #12
 8003d84:	4718      	bx	r3
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	7fffffff 	.word	0x7fffffff
 8003d8c:	2000000c 	.word	0x2000000c
 8003d90:	ffff0208 	.word	0xffff0208

08003d94 <siscanf>:
 8003d94:	b40e      	push	{r1, r2, r3}
 8003d96:	b570      	push	{r4, r5, r6, lr}
 8003d98:	2381      	movs	r3, #129	@ 0x81
 8003d9a:	b09d      	sub	sp, #116	@ 0x74
 8003d9c:	466a      	mov	r2, sp
 8003d9e:	2500      	movs	r5, #0
 8003da0:	ac21      	add	r4, sp, #132	@ 0x84
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	cc40      	ldmia	r4!, {r6}
 8003da6:	8293      	strh	r3, [r2, #20]
 8003da8:	951b      	str	r5, [sp, #108]	@ 0x6c
 8003daa:	9002      	str	r0, [sp, #8]
 8003dac:	9006      	str	r0, [sp, #24]
 8003dae:	f7fc f9ab 	bl	8000108 <strlen>
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <siscanf+0x4c>)
 8003db4:	466a      	mov	r2, sp
 8003db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003db8:	2301      	movs	r3, #1
 8003dba:	9003      	str	r0, [sp, #12]
 8003dbc:	9007      	str	r0, [sp, #28]
 8003dbe:	4809      	ldr	r0, [pc, #36]	@ (8003de4 <siscanf+0x50>)
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	82d3      	strh	r3, [r2, #22]
 8003dc4:	a902      	add	r1, sp, #8
 8003dc6:	0023      	movs	r3, r4
 8003dc8:	0032      	movs	r2, r6
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003dce:	9514      	str	r5, [sp, #80]	@ 0x50
 8003dd0:	9401      	str	r4, [sp, #4]
 8003dd2:	f000 faff 	bl	80043d4 <__ssvfiscanf_r>
 8003dd6:	b01d      	add	sp, #116	@ 0x74
 8003dd8:	bc70      	pop	{r4, r5, r6}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	b003      	add	sp, #12
 8003dde:	4718      	bx	r3
 8003de0:	08003de9 	.word	0x08003de9
 8003de4:	2000000c 	.word	0x2000000c

08003de8 <__seofread>:
 8003de8:	2000      	movs	r0, #0
 8003dea:	4770      	bx	lr

08003dec <memset>:
 8003dec:	0003      	movs	r3, r0
 8003dee:	1882      	adds	r2, r0, r2
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d100      	bne.n	8003df6 <memset+0xa>
 8003df4:	4770      	bx	lr
 8003df6:	7019      	strb	r1, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	e7f9      	b.n	8003df0 <memset+0x4>

08003dfc <__errno>:
 8003dfc:	4b01      	ldr	r3, [pc, #4]	@ (8003e04 <__errno+0x8>)
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	4770      	bx	lr
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	2000000c 	.word	0x2000000c

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	4c0c      	ldr	r4, [pc, #48]	@ (8003e40 <__libc_init_array+0x38>)
 8003e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e44 <__libc_init_array+0x3c>)
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	2600      	movs	r6, #0
 8003e1a:	f001 f90f 	bl	800503c <_init>
 8003e1e:	4c0a      	ldr	r4, [pc, #40]	@ (8003e48 <__libc_init_array+0x40>)
 8003e20:	4d0a      	ldr	r5, [pc, #40]	@ (8003e4c <__libc_init_array+0x44>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	00b3      	lsls	r3, r6, #2
 8003e2e:	58eb      	ldr	r3, [r5, r3]
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	00b3      	lsls	r3, r6, #2
 8003e38:	58eb      	ldr	r3, [r5, r3]
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08005260 	.word	0x08005260
 8003e44:	08005260 	.word	0x08005260
 8003e48:	08005264 	.word	0x08005264
 8003e4c:	08005260 	.word	0x08005260

08003e50 <__retarget_lock_acquire_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <__retarget_lock_release_recursive>:
 8003e52:	4770      	bx	lr

08003e54 <memcpy>:
 8003e54:	2300      	movs	r3, #0
 8003e56:	b510      	push	{r4, lr}
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d100      	bne.n	8003e5e <memcpy+0xa>
 8003e5c:	bd10      	pop	{r4, pc}
 8003e5e:	5ccc      	ldrb	r4, [r1, r3]
 8003e60:	54c4      	strb	r4, [r0, r3]
 8003e62:	3301      	adds	r3, #1
 8003e64:	e7f8      	b.n	8003e58 <memcpy+0x4>
	...

08003e68 <_free_r>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	0005      	movs	r5, r0
 8003e6c:	1e0c      	subs	r4, r1, #0
 8003e6e:	d010      	beq.n	8003e92 <_free_r+0x2a>
 8003e70:	3c04      	subs	r4, #4
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da00      	bge.n	8003e7a <_free_r+0x12>
 8003e78:	18e4      	adds	r4, r4, r3
 8003e7a:	0028      	movs	r0, r5
 8003e7c:	f000 f8e0 	bl	8004040 <__malloc_lock>
 8003e80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <_free_r+0x90>)
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <_free_r+0x2c>
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	6014      	str	r4, [r2, #0]
 8003e8c:	0028      	movs	r0, r5
 8003e8e:	f000 f8df 	bl	8004050 <__malloc_unlock>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d908      	bls.n	8003eaa <_free_r+0x42>
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	1821      	adds	r1, r4, r0
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	d1f3      	bne.n	8003e88 <_free_r+0x20>
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	1809      	adds	r1, r1, r0
 8003ea6:	6021      	str	r1, [r4, #0]
 8003ea8:	e7ee      	b.n	8003e88 <_free_r+0x20>
 8003eaa:	001a      	movs	r2, r3
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <_free_r+0x4e>
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	d9f9      	bls.n	8003eaa <_free_r+0x42>
 8003eb6:	6811      	ldr	r1, [r2, #0]
 8003eb8:	1850      	adds	r0, r2, r1
 8003eba:	42a0      	cmp	r0, r4
 8003ebc:	d10b      	bne.n	8003ed6 <_free_r+0x6e>
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	1809      	adds	r1, r1, r0
 8003ec2:	1850      	adds	r0, r2, r1
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	4283      	cmp	r3, r0
 8003ec8:	d1e0      	bne.n	8003e8c <_free_r+0x24>
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	1841      	adds	r1, r0, r1
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	6053      	str	r3, [r2, #4]
 8003ed4:	e7da      	b.n	8003e8c <_free_r+0x24>
 8003ed6:	42a0      	cmp	r0, r4
 8003ed8:	d902      	bls.n	8003ee0 <_free_r+0x78>
 8003eda:	230c      	movs	r3, #12
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	e7d5      	b.n	8003e8c <_free_r+0x24>
 8003ee0:	6820      	ldr	r0, [r4, #0]
 8003ee2:	1821      	adds	r1, r4, r0
 8003ee4:	428b      	cmp	r3, r1
 8003ee6:	d103      	bne.n	8003ef0 <_free_r+0x88>
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	1809      	adds	r1, r1, r0
 8003eee:	6021      	str	r1, [r4, #0]
 8003ef0:	6063      	str	r3, [r4, #4]
 8003ef2:	6054      	str	r4, [r2, #4]
 8003ef4:	e7ca      	b.n	8003e8c <_free_r+0x24>
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	20000450 	.word	0x20000450

08003efc <sbrk_aligned>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0f      	ldr	r6, [pc, #60]	@ (8003f3c <sbrk_aligned+0x40>)
 8003f00:	000d      	movs	r5, r1
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	0004      	movs	r4, r0
 8003f06:	2900      	cmp	r1, #0
 8003f08:	d102      	bne.n	8003f10 <sbrk_aligned+0x14>
 8003f0a:	f000 ff2d 	bl	8004d68 <_sbrk_r>
 8003f0e:	6030      	str	r0, [r6, #0]
 8003f10:	0029      	movs	r1, r5
 8003f12:	0020      	movs	r0, r4
 8003f14:	f000 ff28 	bl	8004d68 <_sbrk_r>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d103      	bne.n	8003f24 <sbrk_aligned+0x28>
 8003f1c:	2501      	movs	r5, #1
 8003f1e:	426d      	negs	r5, r5
 8003f20:	0028      	movs	r0, r5
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	2303      	movs	r3, #3
 8003f26:	1cc5      	adds	r5, r0, #3
 8003f28:	439d      	bics	r5, r3
 8003f2a:	42a8      	cmp	r0, r5
 8003f2c:	d0f8      	beq.n	8003f20 <sbrk_aligned+0x24>
 8003f2e:	1a29      	subs	r1, r5, r0
 8003f30:	0020      	movs	r0, r4
 8003f32:	f000 ff19 	bl	8004d68 <_sbrk_r>
 8003f36:	3001      	adds	r0, #1
 8003f38:	d1f2      	bne.n	8003f20 <sbrk_aligned+0x24>
 8003f3a:	e7ef      	b.n	8003f1c <sbrk_aligned+0x20>
 8003f3c:	2000044c 	.word	0x2000044c

08003f40 <_malloc_r>:
 8003f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f42:	2203      	movs	r2, #3
 8003f44:	1ccb      	adds	r3, r1, #3
 8003f46:	4393      	bics	r3, r2
 8003f48:	3308      	adds	r3, #8
 8003f4a:	0005      	movs	r5, r0
 8003f4c:	001f      	movs	r7, r3
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d234      	bcs.n	8003fbc <_malloc_r+0x7c>
 8003f52:	270c      	movs	r7, #12
 8003f54:	42b9      	cmp	r1, r7
 8003f56:	d833      	bhi.n	8003fc0 <_malloc_r+0x80>
 8003f58:	0028      	movs	r0, r5
 8003f5a:	f000 f871 	bl	8004040 <__malloc_lock>
 8003f5e:	4e37      	ldr	r6, [pc, #220]	@ (800403c <_malloc_r+0xfc>)
 8003f60:	6833      	ldr	r3, [r6, #0]
 8003f62:	001c      	movs	r4, r3
 8003f64:	2c00      	cmp	r4, #0
 8003f66:	d12f      	bne.n	8003fc8 <_malloc_r+0x88>
 8003f68:	0039      	movs	r1, r7
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	f7ff ffc6 	bl	8003efc <sbrk_aligned>
 8003f70:	0004      	movs	r4, r0
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d15f      	bne.n	8004036 <_malloc_r+0xf6>
 8003f76:	6834      	ldr	r4, [r6, #0]
 8003f78:	9400      	str	r4, [sp, #0]
 8003f7a:	9b00      	ldr	r3, [sp, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d14a      	bne.n	8004016 <_malloc_r+0xd6>
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	d052      	beq.n	800402a <_malloc_r+0xea>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	0028      	movs	r0, r5
 8003f88:	18e3      	adds	r3, r4, r3
 8003f8a:	9900      	ldr	r1, [sp, #0]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	f000 feeb 	bl	8004d68 <_sbrk_r>
 8003f92:	9b01      	ldr	r3, [sp, #4]
 8003f94:	4283      	cmp	r3, r0
 8003f96:	d148      	bne.n	800402a <_malloc_r+0xea>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	1aff      	subs	r7, r7, r3
 8003f9e:	0039      	movs	r1, r7
 8003fa0:	f7ff ffac 	bl	8003efc <sbrk_aligned>
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d040      	beq.n	800402a <_malloc_r+0xea>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	19db      	adds	r3, r3, r7
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	6833      	ldr	r3, [r6, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	d133      	bne.n	800401e <_malloc_r+0xde>
 8003fb6:	9b00      	ldr	r3, [sp, #0]
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	e019      	b.n	8003ff0 <_malloc_r+0xb0>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	dac9      	bge.n	8003f54 <_malloc_r+0x14>
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fc8:	6821      	ldr	r1, [r4, #0]
 8003fca:	1bc9      	subs	r1, r1, r7
 8003fcc:	d420      	bmi.n	8004010 <_malloc_r+0xd0>
 8003fce:	290b      	cmp	r1, #11
 8003fd0:	d90a      	bls.n	8003fe8 <_malloc_r+0xa8>
 8003fd2:	19e2      	adds	r2, r4, r7
 8003fd4:	6027      	str	r7, [r4, #0]
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	d104      	bne.n	8003fe4 <_malloc_r+0xa4>
 8003fda:	6032      	str	r2, [r6, #0]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	6011      	str	r1, [r2, #0]
 8003fe0:	6053      	str	r3, [r2, #4]
 8003fe2:	e005      	b.n	8003ff0 <_malloc_r+0xb0>
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	e7f9      	b.n	8003fdc <_malloc_r+0x9c>
 8003fe8:	6862      	ldr	r2, [r4, #4]
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	d10e      	bne.n	800400c <_malloc_r+0xcc>
 8003fee:	6032      	str	r2, [r6, #0]
 8003ff0:	0028      	movs	r0, r5
 8003ff2:	f000 f82d 	bl	8004050 <__malloc_unlock>
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	2207      	movs	r2, #7
 8003ffa:	300b      	adds	r0, #11
 8003ffc:	1d23      	adds	r3, r4, #4
 8003ffe:	4390      	bics	r0, r2
 8004000:	1ac2      	subs	r2, r0, r3
 8004002:	4298      	cmp	r0, r3
 8004004:	d0df      	beq.n	8003fc6 <_malloc_r+0x86>
 8004006:	1a1b      	subs	r3, r3, r0
 8004008:	50a3      	str	r3, [r4, r2]
 800400a:	e7dc      	b.n	8003fc6 <_malloc_r+0x86>
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	e7ef      	b.n	8003ff0 <_malloc_r+0xb0>
 8004010:	0023      	movs	r3, r4
 8004012:	6864      	ldr	r4, [r4, #4]
 8004014:	e7a6      	b.n	8003f64 <_malloc_r+0x24>
 8004016:	9c00      	ldr	r4, [sp, #0]
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	e7ad      	b.n	8003f7a <_malloc_r+0x3a>
 800401e:	001a      	movs	r2, r3
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	42a3      	cmp	r3, r4
 8004024:	d1fb      	bne.n	800401e <_malloc_r+0xde>
 8004026:	2300      	movs	r3, #0
 8004028:	e7da      	b.n	8003fe0 <_malloc_r+0xa0>
 800402a:	230c      	movs	r3, #12
 800402c:	0028      	movs	r0, r5
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f000 f80e 	bl	8004050 <__malloc_unlock>
 8004034:	e7c6      	b.n	8003fc4 <_malloc_r+0x84>
 8004036:	6007      	str	r7, [r0, #0]
 8004038:	e7da      	b.n	8003ff0 <_malloc_r+0xb0>
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	20000450 	.word	0x20000450

08004040 <__malloc_lock>:
 8004040:	b510      	push	{r4, lr}
 8004042:	4802      	ldr	r0, [pc, #8]	@ (800404c <__malloc_lock+0xc>)
 8004044:	f7ff ff04 	bl	8003e50 <__retarget_lock_acquire_recursive>
 8004048:	bd10      	pop	{r4, pc}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	20000448 	.word	0x20000448

08004050 <__malloc_unlock>:
 8004050:	b510      	push	{r4, lr}
 8004052:	4802      	ldr	r0, [pc, #8]	@ (800405c <__malloc_unlock+0xc>)
 8004054:	f7ff fefd 	bl	8003e52 <__retarget_lock_release_recursive>
 8004058:	bd10      	pop	{r4, pc}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	20000448 	.word	0x20000448

08004060 <__ssputs_r>:
 8004060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004062:	688e      	ldr	r6, [r1, #8]
 8004064:	b085      	sub	sp, #20
 8004066:	001f      	movs	r7, r3
 8004068:	000c      	movs	r4, r1
 800406a:	680b      	ldr	r3, [r1, #0]
 800406c:	9002      	str	r0, [sp, #8]
 800406e:	9203      	str	r2, [sp, #12]
 8004070:	42be      	cmp	r6, r7
 8004072:	d830      	bhi.n	80040d6 <__ssputs_r+0x76>
 8004074:	210c      	movs	r1, #12
 8004076:	5e62      	ldrsh	r2, [r4, r1]
 8004078:	2190      	movs	r1, #144	@ 0x90
 800407a:	00c9      	lsls	r1, r1, #3
 800407c:	420a      	tst	r2, r1
 800407e:	d028      	beq.n	80040d2 <__ssputs_r+0x72>
 8004080:	2003      	movs	r0, #3
 8004082:	6921      	ldr	r1, [r4, #16]
 8004084:	1a5b      	subs	r3, r3, r1
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	6963      	ldr	r3, [r4, #20]
 800408a:	4343      	muls	r3, r0
 800408c:	9801      	ldr	r0, [sp, #4]
 800408e:	0fdd      	lsrs	r5, r3, #31
 8004090:	18ed      	adds	r5, r5, r3
 8004092:	1c7b      	adds	r3, r7, #1
 8004094:	181b      	adds	r3, r3, r0
 8004096:	106d      	asrs	r5, r5, #1
 8004098:	42ab      	cmp	r3, r5
 800409a:	d900      	bls.n	800409e <__ssputs_r+0x3e>
 800409c:	001d      	movs	r5, r3
 800409e:	0552      	lsls	r2, r2, #21
 80040a0:	d528      	bpl.n	80040f4 <__ssputs_r+0x94>
 80040a2:	0029      	movs	r1, r5
 80040a4:	9802      	ldr	r0, [sp, #8]
 80040a6:	f7ff ff4b 	bl	8003f40 <_malloc_r>
 80040aa:	1e06      	subs	r6, r0, #0
 80040ac:	d02c      	beq.n	8004108 <__ssputs_r+0xa8>
 80040ae:	9a01      	ldr	r2, [sp, #4]
 80040b0:	6921      	ldr	r1, [r4, #16]
 80040b2:	f7ff fecf 	bl	8003e54 <memcpy>
 80040b6:	89a2      	ldrh	r2, [r4, #12]
 80040b8:	4b18      	ldr	r3, [pc, #96]	@ (800411c <__ssputs_r+0xbc>)
 80040ba:	401a      	ands	r2, r3
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	4313      	orrs	r3, r2
 80040c0:	81a3      	strh	r3, [r4, #12]
 80040c2:	9b01      	ldr	r3, [sp, #4]
 80040c4:	6126      	str	r6, [r4, #16]
 80040c6:	18f6      	adds	r6, r6, r3
 80040c8:	6026      	str	r6, [r4, #0]
 80040ca:	003e      	movs	r6, r7
 80040cc:	6165      	str	r5, [r4, #20]
 80040ce:	1aed      	subs	r5, r5, r3
 80040d0:	60a5      	str	r5, [r4, #8]
 80040d2:	42be      	cmp	r6, r7
 80040d4:	d900      	bls.n	80040d8 <__ssputs_r+0x78>
 80040d6:	003e      	movs	r6, r7
 80040d8:	0032      	movs	r2, r6
 80040da:	9903      	ldr	r1, [sp, #12]
 80040dc:	6820      	ldr	r0, [r4, #0]
 80040de:	f000 fe31 	bl	8004d44 <memmove>
 80040e2:	2000      	movs	r0, #0
 80040e4:	68a3      	ldr	r3, [r4, #8]
 80040e6:	1b9b      	subs	r3, r3, r6
 80040e8:	60a3      	str	r3, [r4, #8]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	199b      	adds	r3, r3, r6
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	b005      	add	sp, #20
 80040f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f4:	002a      	movs	r2, r5
 80040f6:	9802      	ldr	r0, [sp, #8]
 80040f8:	f000 fe53 	bl	8004da2 <_realloc_r>
 80040fc:	1e06      	subs	r6, r0, #0
 80040fe:	d1e0      	bne.n	80040c2 <__ssputs_r+0x62>
 8004100:	6921      	ldr	r1, [r4, #16]
 8004102:	9802      	ldr	r0, [sp, #8]
 8004104:	f7ff feb0 	bl	8003e68 <_free_r>
 8004108:	230c      	movs	r3, #12
 800410a:	2001      	movs	r0, #1
 800410c:	9a02      	ldr	r2, [sp, #8]
 800410e:	4240      	negs	r0, r0
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	89a2      	ldrh	r2, [r4, #12]
 8004114:	3334      	adds	r3, #52	@ 0x34
 8004116:	4313      	orrs	r3, r2
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	e7e9      	b.n	80040f0 <__ssputs_r+0x90>
 800411c:	fffffb7f 	.word	0xfffffb7f

08004120 <_svfiprintf_r>:
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004122:	b0a1      	sub	sp, #132	@ 0x84
 8004124:	9003      	str	r0, [sp, #12]
 8004126:	001d      	movs	r5, r3
 8004128:	898b      	ldrh	r3, [r1, #12]
 800412a:	000f      	movs	r7, r1
 800412c:	0016      	movs	r6, r2
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	d511      	bpl.n	8004156 <_svfiprintf_r+0x36>
 8004132:	690b      	ldr	r3, [r1, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10e      	bne.n	8004156 <_svfiprintf_r+0x36>
 8004138:	2140      	movs	r1, #64	@ 0x40
 800413a:	f7ff ff01 	bl	8003f40 <_malloc_r>
 800413e:	6038      	str	r0, [r7, #0]
 8004140:	6138      	str	r0, [r7, #16]
 8004142:	2800      	cmp	r0, #0
 8004144:	d105      	bne.n	8004152 <_svfiprintf_r+0x32>
 8004146:	230c      	movs	r3, #12
 8004148:	9a03      	ldr	r2, [sp, #12]
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	2001      	movs	r0, #1
 800414e:	4240      	negs	r0, r0
 8004150:	e0cf      	b.n	80042f2 <_svfiprintf_r+0x1d2>
 8004152:	2340      	movs	r3, #64	@ 0x40
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	2300      	movs	r3, #0
 8004158:	ac08      	add	r4, sp, #32
 800415a:	6163      	str	r3, [r4, #20]
 800415c:	3320      	adds	r3, #32
 800415e:	7663      	strb	r3, [r4, #25]
 8004160:	3310      	adds	r3, #16
 8004162:	76a3      	strb	r3, [r4, #26]
 8004164:	9507      	str	r5, [sp, #28]
 8004166:	0035      	movs	r5, r6
 8004168:	782b      	ldrb	r3, [r5, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <_svfiprintf_r+0x52>
 800416e:	2b25      	cmp	r3, #37	@ 0x25
 8004170:	d148      	bne.n	8004204 <_svfiprintf_r+0xe4>
 8004172:	1bab      	subs	r3, r5, r6
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	42b5      	cmp	r5, r6
 8004178:	d00b      	beq.n	8004192 <_svfiprintf_r+0x72>
 800417a:	0032      	movs	r2, r6
 800417c:	0039      	movs	r1, r7
 800417e:	9803      	ldr	r0, [sp, #12]
 8004180:	f7ff ff6e 	bl	8004060 <__ssputs_r>
 8004184:	3001      	adds	r0, #1
 8004186:	d100      	bne.n	800418a <_svfiprintf_r+0x6a>
 8004188:	e0ae      	b.n	80042e8 <_svfiprintf_r+0x1c8>
 800418a:	6963      	ldr	r3, [r4, #20]
 800418c:	9a05      	ldr	r2, [sp, #20]
 800418e:	189b      	adds	r3, r3, r2
 8004190:	6163      	str	r3, [r4, #20]
 8004192:	782b      	ldrb	r3, [r5, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d100      	bne.n	800419a <_svfiprintf_r+0x7a>
 8004198:	e0a6      	b.n	80042e8 <_svfiprintf_r+0x1c8>
 800419a:	2201      	movs	r2, #1
 800419c:	2300      	movs	r3, #0
 800419e:	4252      	negs	r2, r2
 80041a0:	6062      	str	r2, [r4, #4]
 80041a2:	a904      	add	r1, sp, #16
 80041a4:	3254      	adds	r2, #84	@ 0x54
 80041a6:	1852      	adds	r2, r2, r1
 80041a8:	1c6e      	adds	r6, r5, #1
 80041aa:	6023      	str	r3, [r4, #0]
 80041ac:	60e3      	str	r3, [r4, #12]
 80041ae:	60a3      	str	r3, [r4, #8]
 80041b0:	7013      	strb	r3, [r2, #0]
 80041b2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80041b4:	4b54      	ldr	r3, [pc, #336]	@ (8004308 <_svfiprintf_r+0x1e8>)
 80041b6:	2205      	movs	r2, #5
 80041b8:	0018      	movs	r0, r3
 80041ba:	7831      	ldrb	r1, [r6, #0]
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	f000 fde5 	bl	8004d8c <memchr>
 80041c2:	1c75      	adds	r5, r6, #1
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d11f      	bne.n	8004208 <_svfiprintf_r+0xe8>
 80041c8:	6822      	ldr	r2, [r4, #0]
 80041ca:	06d3      	lsls	r3, r2, #27
 80041cc:	d504      	bpl.n	80041d8 <_svfiprintf_r+0xb8>
 80041ce:	2353      	movs	r3, #83	@ 0x53
 80041d0:	a904      	add	r1, sp, #16
 80041d2:	185b      	adds	r3, r3, r1
 80041d4:	2120      	movs	r1, #32
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	0713      	lsls	r3, r2, #28
 80041da:	d504      	bpl.n	80041e6 <_svfiprintf_r+0xc6>
 80041dc:	2353      	movs	r3, #83	@ 0x53
 80041de:	a904      	add	r1, sp, #16
 80041e0:	185b      	adds	r3, r3, r1
 80041e2:	212b      	movs	r1, #43	@ 0x2b
 80041e4:	7019      	strb	r1, [r3, #0]
 80041e6:	7833      	ldrb	r3, [r6, #0]
 80041e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80041ea:	d016      	beq.n	800421a <_svfiprintf_r+0xfa>
 80041ec:	0035      	movs	r5, r6
 80041ee:	2100      	movs	r1, #0
 80041f0:	200a      	movs	r0, #10
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	782a      	ldrb	r2, [r5, #0]
 80041f6:	1c6e      	adds	r6, r5, #1
 80041f8:	3a30      	subs	r2, #48	@ 0x30
 80041fa:	2a09      	cmp	r2, #9
 80041fc:	d950      	bls.n	80042a0 <_svfiprintf_r+0x180>
 80041fe:	2900      	cmp	r1, #0
 8004200:	d111      	bne.n	8004226 <_svfiprintf_r+0x106>
 8004202:	e017      	b.n	8004234 <_svfiprintf_r+0x114>
 8004204:	3501      	adds	r5, #1
 8004206:	e7af      	b.n	8004168 <_svfiprintf_r+0x48>
 8004208:	9b05      	ldr	r3, [sp, #20]
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	1ac0      	subs	r0, r0, r3
 800420e:	2301      	movs	r3, #1
 8004210:	4083      	lsls	r3, r0
 8004212:	4313      	orrs	r3, r2
 8004214:	002e      	movs	r6, r5
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	e7cc      	b.n	80041b4 <_svfiprintf_r+0x94>
 800421a:	9b07      	ldr	r3, [sp, #28]
 800421c:	1d19      	adds	r1, r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	9107      	str	r1, [sp, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db01      	blt.n	800422a <_svfiprintf_r+0x10a>
 8004226:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004228:	e004      	b.n	8004234 <_svfiprintf_r+0x114>
 800422a:	425b      	negs	r3, r3
 800422c:	60e3      	str	r3, [r4, #12]
 800422e:	2302      	movs	r3, #2
 8004230:	4313      	orrs	r3, r2
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	782b      	ldrb	r3, [r5, #0]
 8004236:	2b2e      	cmp	r3, #46	@ 0x2e
 8004238:	d10c      	bne.n	8004254 <_svfiprintf_r+0x134>
 800423a:	786b      	ldrb	r3, [r5, #1]
 800423c:	2b2a      	cmp	r3, #42	@ 0x2a
 800423e:	d134      	bne.n	80042aa <_svfiprintf_r+0x18a>
 8004240:	9b07      	ldr	r3, [sp, #28]
 8004242:	3502      	adds	r5, #2
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	9207      	str	r2, [sp, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	da01      	bge.n	8004252 <_svfiprintf_r+0x132>
 800424e:	2301      	movs	r3, #1
 8004250:	425b      	negs	r3, r3
 8004252:	9309      	str	r3, [sp, #36]	@ 0x24
 8004254:	4e2d      	ldr	r6, [pc, #180]	@ (800430c <_svfiprintf_r+0x1ec>)
 8004256:	2203      	movs	r2, #3
 8004258:	0030      	movs	r0, r6
 800425a:	7829      	ldrb	r1, [r5, #0]
 800425c:	f000 fd96 	bl	8004d8c <memchr>
 8004260:	2800      	cmp	r0, #0
 8004262:	d006      	beq.n	8004272 <_svfiprintf_r+0x152>
 8004264:	2340      	movs	r3, #64	@ 0x40
 8004266:	1b80      	subs	r0, r0, r6
 8004268:	4083      	lsls	r3, r0
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	3501      	adds	r5, #1
 800426e:	4313      	orrs	r3, r2
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	7829      	ldrb	r1, [r5, #0]
 8004274:	2206      	movs	r2, #6
 8004276:	4826      	ldr	r0, [pc, #152]	@ (8004310 <_svfiprintf_r+0x1f0>)
 8004278:	1c6e      	adds	r6, r5, #1
 800427a:	7621      	strb	r1, [r4, #24]
 800427c:	f000 fd86 	bl	8004d8c <memchr>
 8004280:	2800      	cmp	r0, #0
 8004282:	d038      	beq.n	80042f6 <_svfiprintf_r+0x1d6>
 8004284:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <_svfiprintf_r+0x1f4>)
 8004286:	2b00      	cmp	r3, #0
 8004288:	d122      	bne.n	80042d0 <_svfiprintf_r+0x1b0>
 800428a:	2207      	movs	r2, #7
 800428c:	9b07      	ldr	r3, [sp, #28]
 800428e:	3307      	adds	r3, #7
 8004290:	4393      	bics	r3, r2
 8004292:	3308      	adds	r3, #8
 8004294:	9307      	str	r3, [sp, #28]
 8004296:	6963      	ldr	r3, [r4, #20]
 8004298:	9a04      	ldr	r2, [sp, #16]
 800429a:	189b      	adds	r3, r3, r2
 800429c:	6163      	str	r3, [r4, #20]
 800429e:	e762      	b.n	8004166 <_svfiprintf_r+0x46>
 80042a0:	4343      	muls	r3, r0
 80042a2:	0035      	movs	r5, r6
 80042a4:	2101      	movs	r1, #1
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	e7a4      	b.n	80041f4 <_svfiprintf_r+0xd4>
 80042aa:	2300      	movs	r3, #0
 80042ac:	200a      	movs	r0, #10
 80042ae:	0019      	movs	r1, r3
 80042b0:	3501      	adds	r5, #1
 80042b2:	6063      	str	r3, [r4, #4]
 80042b4:	782a      	ldrb	r2, [r5, #0]
 80042b6:	1c6e      	adds	r6, r5, #1
 80042b8:	3a30      	subs	r2, #48	@ 0x30
 80042ba:	2a09      	cmp	r2, #9
 80042bc:	d903      	bls.n	80042c6 <_svfiprintf_r+0x1a6>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0c8      	beq.n	8004254 <_svfiprintf_r+0x134>
 80042c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80042c4:	e7c6      	b.n	8004254 <_svfiprintf_r+0x134>
 80042c6:	4341      	muls	r1, r0
 80042c8:	0035      	movs	r5, r6
 80042ca:	2301      	movs	r3, #1
 80042cc:	1889      	adds	r1, r1, r2
 80042ce:	e7f1      	b.n	80042b4 <_svfiprintf_r+0x194>
 80042d0:	aa07      	add	r2, sp, #28
 80042d2:	9200      	str	r2, [sp, #0]
 80042d4:	0021      	movs	r1, r4
 80042d6:	003a      	movs	r2, r7
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <_svfiprintf_r+0x1f8>)
 80042da:	9803      	ldr	r0, [sp, #12]
 80042dc:	e000      	b.n	80042e0 <_svfiprintf_r+0x1c0>
 80042de:	bf00      	nop
 80042e0:	9004      	str	r0, [sp, #16]
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	3301      	adds	r3, #1
 80042e6:	d1d6      	bne.n	8004296 <_svfiprintf_r+0x176>
 80042e8:	89bb      	ldrh	r3, [r7, #12]
 80042ea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80042ec:	065b      	lsls	r3, r3, #25
 80042ee:	d500      	bpl.n	80042f2 <_svfiprintf_r+0x1d2>
 80042f0:	e72c      	b.n	800414c <_svfiprintf_r+0x2c>
 80042f2:	b021      	add	sp, #132	@ 0x84
 80042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f6:	aa07      	add	r2, sp, #28
 80042f8:	9200      	str	r2, [sp, #0]
 80042fa:	0021      	movs	r1, r4
 80042fc:	003a      	movs	r2, r7
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <_svfiprintf_r+0x1f8>)
 8004300:	9803      	ldr	r0, [sp, #12]
 8004302:	f000 fa3b 	bl	800477c <_printf_i>
 8004306:	e7eb      	b.n	80042e0 <_svfiprintf_r+0x1c0>
 8004308:	08005110 	.word	0x08005110
 800430c:	08005116 	.word	0x08005116
 8004310:	0800511a 	.word	0x0800511a
 8004314:	00000000 	.word	0x00000000
 8004318:	08004061 	.word	0x08004061

0800431c <_sungetc_r>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	0014      	movs	r4, r2
 8004320:	1c4b      	adds	r3, r1, #1
 8004322:	d103      	bne.n	800432c <_sungetc_r+0x10>
 8004324:	2501      	movs	r5, #1
 8004326:	426d      	negs	r5, r5
 8004328:	0028      	movs	r0, r5
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	8993      	ldrh	r3, [r2, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	4393      	bics	r3, r2
 8004332:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	b2ce      	uxtb	r6, r1
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	b2cd      	uxtb	r5, r1
 800433c:	2a00      	cmp	r2, #0
 800433e:	d010      	beq.n	8004362 <_sungetc_r+0x46>
 8004340:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004342:	429a      	cmp	r2, r3
 8004344:	dd07      	ble.n	8004356 <_sungetc_r+0x3a>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	3b01      	subs	r3, #1
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	701e      	strb	r6, [r3, #0]
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	3301      	adds	r3, #1
 8004352:	6063      	str	r3, [r4, #4]
 8004354:	e7e8      	b.n	8004328 <_sungetc_r+0xc>
 8004356:	0021      	movs	r1, r4
 8004358:	f000 fcb6 	bl	8004cc8 <__submore>
 800435c:	2800      	cmp	r0, #0
 800435e:	d0f2      	beq.n	8004346 <_sungetc_r+0x2a>
 8004360:	e7e0      	b.n	8004324 <_sungetc_r+0x8>
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	2900      	cmp	r1, #0
 8004368:	d007      	beq.n	800437a <_sungetc_r+0x5e>
 800436a:	4291      	cmp	r1, r2
 800436c:	d205      	bcs.n	800437a <_sungetc_r+0x5e>
 800436e:	1e51      	subs	r1, r2, #1
 8004370:	7808      	ldrb	r0, [r1, #0]
 8004372:	42a8      	cmp	r0, r5
 8004374:	d101      	bne.n	800437a <_sungetc_r+0x5e>
 8004376:	6021      	str	r1, [r4, #0]
 8004378:	e7ea      	b.n	8004350 <_sungetc_r+0x34>
 800437a:	6423      	str	r3, [r4, #64]	@ 0x40
 800437c:	0023      	movs	r3, r4
 800437e:	3344      	adds	r3, #68	@ 0x44
 8004380:	6363      	str	r3, [r4, #52]	@ 0x34
 8004382:	2303      	movs	r3, #3
 8004384:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004386:	0023      	movs	r3, r4
 8004388:	3346      	adds	r3, #70	@ 0x46
 800438a:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800438c:	701e      	strb	r6, [r3, #0]
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	2301      	movs	r3, #1
 8004392:	e7de      	b.n	8004352 <_sungetc_r+0x36>

08004394 <__ssrefill_r>:
 8004394:	b510      	push	{r4, lr}
 8004396:	000c      	movs	r4, r1
 8004398:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800439a:	2900      	cmp	r1, #0
 800439c:	d00e      	beq.n	80043bc <__ssrefill_r+0x28>
 800439e:	0023      	movs	r3, r4
 80043a0:	3344      	adds	r3, #68	@ 0x44
 80043a2:	4299      	cmp	r1, r3
 80043a4:	d001      	beq.n	80043aa <__ssrefill_r+0x16>
 80043a6:	f7ff fd5f 	bl	8003e68 <_free_r>
 80043aa:	2000      	movs	r0, #0
 80043ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043ae:	6360      	str	r0, [r4, #52]	@ 0x34
 80043b0:	6063      	str	r3, [r4, #4]
 80043b2:	4283      	cmp	r3, r0
 80043b4:	d002      	beq.n	80043bc <__ssrefill_r+0x28>
 80043b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd10      	pop	{r4, pc}
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	2001      	movs	r0, #1
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	89a2      	ldrh	r2, [r4, #12]
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	3320      	adds	r3, #32
 80043ca:	4313      	orrs	r3, r2
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	4240      	negs	r0, r0
 80043d0:	e7f3      	b.n	80043ba <__ssrefill_r+0x26>
	...

080043d4 <__ssvfiscanf_r>:
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	4cab      	ldr	r4, [pc, #684]	@ (8004684 <__ssvfiscanf_r+0x2b0>)
 80043d8:	44a5      	add	sp, r4
 80043da:	000c      	movs	r4, r1
 80043dc:	2100      	movs	r1, #0
 80043de:	9000      	str	r0, [sp, #0]
 80043e0:	20be      	movs	r0, #190	@ 0xbe
 80043e2:	9146      	str	r1, [sp, #280]	@ 0x118
 80043e4:	9147      	str	r1, [sp, #284]	@ 0x11c
 80043e6:	a903      	add	r1, sp, #12
 80043e8:	9148      	str	r1, [sp, #288]	@ 0x120
 80043ea:	49a7      	ldr	r1, [pc, #668]	@ (8004688 <__ssvfiscanf_r+0x2b4>)
 80043ec:	0040      	lsls	r0, r0, #1
 80043ee:	ad43      	add	r5, sp, #268	@ 0x10c
 80043f0:	5029      	str	r1, [r5, r0]
 80043f2:	49a6      	ldr	r1, [pc, #664]	@ (800468c <__ssvfiscanf_r+0x2b8>)
 80043f4:	3004      	adds	r0, #4
 80043f6:	ad43      	add	r5, sp, #268	@ 0x10c
 80043f8:	5029      	str	r1, [r5, r0]
 80043fa:	9302      	str	r3, [sp, #8]
 80043fc:	7816      	ldrb	r6, [r2, #0]
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d100      	bne.n	8004404 <__ssvfiscanf_r+0x30>
 8004402:	e13c      	b.n	800467e <__ssvfiscanf_r+0x2aa>
 8004404:	2308      	movs	r3, #8
 8004406:	2008      	movs	r0, #8
 8004408:	4da1      	ldr	r5, [pc, #644]	@ (8004690 <__ssvfiscanf_r+0x2bc>)
 800440a:	1c57      	adds	r7, r2, #1
 800440c:	5da9      	ldrb	r1, [r5, r6]
 800440e:	400b      	ands	r3, r1
 8004410:	4201      	tst	r1, r0
 8004412:	d01d      	beq.n	8004450 <__ssvfiscanf_r+0x7c>
 8004414:	0006      	movs	r6, r0
 8004416:	6863      	ldr	r3, [r4, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	dd0f      	ble.n	800443c <__ssvfiscanf_r+0x68>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	5caa      	ldrb	r2, [r5, r2]
 8004422:	4232      	tst	r2, r6
 8004424:	d101      	bne.n	800442a <__ssvfiscanf_r+0x56>
 8004426:	003a      	movs	r2, r7
 8004428:	e7e8      	b.n	80043fc <__ssvfiscanf_r+0x28>
 800442a:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800442c:	3301      	adds	r3, #1
 800442e:	3201      	adds	r2, #1
 8004430:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004432:	6862      	ldr	r2, [r4, #4]
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	3a01      	subs	r2, #1
 8004438:	6062      	str	r2, [r4, #4]
 800443a:	e7ec      	b.n	8004416 <__ssvfiscanf_r+0x42>
 800443c:	22c0      	movs	r2, #192	@ 0xc0
 800443e:	ab43      	add	r3, sp, #268	@ 0x10c
 8004440:	0052      	lsls	r2, r2, #1
 8004442:	0021      	movs	r1, r4
 8004444:	589b      	ldr	r3, [r3, r2]
 8004446:	9800      	ldr	r0, [sp, #0]
 8004448:	4798      	blx	r3
 800444a:	2800      	cmp	r0, #0
 800444c:	d0e6      	beq.n	800441c <__ssvfiscanf_r+0x48>
 800444e:	e7ea      	b.n	8004426 <__ssvfiscanf_r+0x52>
 8004450:	2e25      	cmp	r6, #37	@ 0x25
 8004452:	d162      	bne.n	800451a <__ssvfiscanf_r+0x146>
 8004454:	9345      	str	r3, [sp, #276]	@ 0x114
 8004456:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004458:	7853      	ldrb	r3, [r2, #1]
 800445a:	2b2a      	cmp	r3, #42	@ 0x2a
 800445c:	d102      	bne.n	8004464 <__ssvfiscanf_r+0x90>
 800445e:	3b1a      	subs	r3, #26
 8004460:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004462:	1c97      	adds	r7, r2, #2
 8004464:	003d      	movs	r5, r7
 8004466:	220a      	movs	r2, #10
 8004468:	7829      	ldrb	r1, [r5, #0]
 800446a:	1c6f      	adds	r7, r5, #1
 800446c:	000b      	movs	r3, r1
 800446e:	3b30      	subs	r3, #48	@ 0x30
 8004470:	2b09      	cmp	r3, #9
 8004472:	d91f      	bls.n	80044b4 <__ssvfiscanf_r+0xe0>
 8004474:	4b87      	ldr	r3, [pc, #540]	@ (8004694 <__ssvfiscanf_r+0x2c0>)
 8004476:	2203      	movs	r2, #3
 8004478:	0018      	movs	r0, r3
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	f000 fc86 	bl	8004d8c <memchr>
 8004480:	2800      	cmp	r0, #0
 8004482:	d007      	beq.n	8004494 <__ssvfiscanf_r+0xc0>
 8004484:	9b01      	ldr	r3, [sp, #4]
 8004486:	003d      	movs	r5, r7
 8004488:	1ac0      	subs	r0, r0, r3
 800448a:	2301      	movs	r3, #1
 800448c:	4083      	lsls	r3, r0
 800448e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004490:	4313      	orrs	r3, r2
 8004492:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004494:	782b      	ldrb	r3, [r5, #0]
 8004496:	1c6f      	adds	r7, r5, #1
 8004498:	2b78      	cmp	r3, #120	@ 0x78
 800449a:	d806      	bhi.n	80044aa <__ssvfiscanf_r+0xd6>
 800449c:	2b57      	cmp	r3, #87	@ 0x57
 800449e:	d810      	bhi.n	80044c2 <__ssvfiscanf_r+0xee>
 80044a0:	2b25      	cmp	r3, #37	@ 0x25
 80044a2:	d03a      	beq.n	800451a <__ssvfiscanf_r+0x146>
 80044a4:	d834      	bhi.n	8004510 <__ssvfiscanf_r+0x13c>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d055      	beq.n	8004556 <__ssvfiscanf_r+0x182>
 80044aa:	2303      	movs	r3, #3
 80044ac:	9349      	str	r3, [sp, #292]	@ 0x124
 80044ae:	3307      	adds	r3, #7
 80044b0:	9344      	str	r3, [sp, #272]	@ 0x110
 80044b2:	e069      	b.n	8004588 <__ssvfiscanf_r+0x1b4>
 80044b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80044b6:	003d      	movs	r5, r7
 80044b8:	4353      	muls	r3, r2
 80044ba:	3b30      	subs	r3, #48	@ 0x30
 80044bc:	185b      	adds	r3, r3, r1
 80044be:	9345      	str	r3, [sp, #276]	@ 0x114
 80044c0:	e7d2      	b.n	8004468 <__ssvfiscanf_r+0x94>
 80044c2:	0018      	movs	r0, r3
 80044c4:	3858      	subs	r0, #88	@ 0x58
 80044c6:	2820      	cmp	r0, #32
 80044c8:	d8ef      	bhi.n	80044aa <__ssvfiscanf_r+0xd6>
 80044ca:	f7fb fe25 	bl	8000118 <__gnu_thumb1_case_shi>
 80044ce:	004b      	.short	0x004b
 80044d0:	ffeeffee 	.word	0xffeeffee
 80044d4:	ffee007d 	.word	0xffee007d
 80044d8:	ffeeffee 	.word	0xffeeffee
 80044dc:	ffeeffee 	.word	0xffeeffee
 80044e0:	ffeeffee 	.word	0xffeeffee
 80044e4:	007b0088 	.word	0x007b0088
 80044e8:	00240024 	.word	0x00240024
 80044ec:	ffee0024 	.word	0xffee0024
 80044f0:	ffee0055 	.word	0xffee0055
 80044f4:	ffeeffee 	.word	0xffeeffee
 80044f8:	0090ffee 	.word	0x0090ffee
 80044fc:	00470059 	.word	0x00470059
 8004500:	ffeeffee 	.word	0xffeeffee
 8004504:	ffee008e 	.word	0xffee008e
 8004508:	ffee007b 	.word	0xffee007b
 800450c:	004bffee 	.word	0x004bffee
 8004510:	3b45      	subs	r3, #69	@ 0x45
 8004512:	2b02      	cmp	r3, #2
 8004514:	d8c9      	bhi.n	80044aa <__ssvfiscanf_r+0xd6>
 8004516:	2305      	movs	r3, #5
 8004518:	e035      	b.n	8004586 <__ssvfiscanf_r+0x1b2>
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	dd0d      	ble.n	800453c <__ssvfiscanf_r+0x168>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	42b2      	cmp	r2, r6
 8004526:	d000      	beq.n	800452a <__ssvfiscanf_r+0x156>
 8004528:	e0a9      	b.n	800467e <__ssvfiscanf_r+0x2aa>
 800452a:	3301      	adds	r3, #1
 800452c:	6862      	ldr	r2, [r4, #4]
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004532:	3a01      	subs	r2, #1
 8004534:	3301      	adds	r3, #1
 8004536:	6062      	str	r2, [r4, #4]
 8004538:	9347      	str	r3, [sp, #284]	@ 0x11c
 800453a:	e774      	b.n	8004426 <__ssvfiscanf_r+0x52>
 800453c:	23c0      	movs	r3, #192	@ 0xc0
 800453e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	0021      	movs	r1, r4
 8004544:	58d3      	ldr	r3, [r2, r3]
 8004546:	9800      	ldr	r0, [sp, #0]
 8004548:	4798      	blx	r3
 800454a:	2800      	cmp	r0, #0
 800454c:	d0e8      	beq.n	8004520 <__ssvfiscanf_r+0x14c>
 800454e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004550:	2800      	cmp	r0, #0
 8004552:	d000      	beq.n	8004556 <__ssvfiscanf_r+0x182>
 8004554:	e08b      	b.n	800466e <__ssvfiscanf_r+0x29a>
 8004556:	2001      	movs	r0, #1
 8004558:	4240      	negs	r0, r0
 800455a:	e08c      	b.n	8004676 <__ssvfiscanf_r+0x2a2>
 800455c:	2220      	movs	r2, #32
 800455e:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8004560:	430a      	orrs	r2, r1
 8004562:	9243      	str	r2, [sp, #268]	@ 0x10c
 8004564:	2280      	movs	r2, #128	@ 0x80
 8004566:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8004568:	0092      	lsls	r2, r2, #2
 800456a:	430a      	orrs	r2, r1
 800456c:	9243      	str	r2, [sp, #268]	@ 0x10c
 800456e:	2210      	movs	r2, #16
 8004570:	9244      	str	r2, [sp, #272]	@ 0x110
 8004572:	2b6e      	cmp	r3, #110	@ 0x6e
 8004574:	d902      	bls.n	800457c <__ssvfiscanf_r+0x1a8>
 8004576:	e005      	b.n	8004584 <__ssvfiscanf_r+0x1b0>
 8004578:	2300      	movs	r3, #0
 800457a:	9344      	str	r3, [sp, #272]	@ 0x110
 800457c:	2303      	movs	r3, #3
 800457e:	e002      	b.n	8004586 <__ssvfiscanf_r+0x1b2>
 8004580:	2308      	movs	r3, #8
 8004582:	9344      	str	r3, [sp, #272]	@ 0x110
 8004584:	2304      	movs	r3, #4
 8004586:	9349      	str	r3, [sp, #292]	@ 0x124
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	dd3e      	ble.n	800460c <__ssvfiscanf_r+0x238>
 800458e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004590:	065b      	lsls	r3, r3, #25
 8004592:	d408      	bmi.n	80045a6 <__ssvfiscanf_r+0x1d2>
 8004594:	26c0      	movs	r6, #192	@ 0xc0
 8004596:	2508      	movs	r5, #8
 8004598:	0076      	lsls	r6, r6, #1
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	493c      	ldr	r1, [pc, #240]	@ (8004690 <__ssvfiscanf_r+0x2bc>)
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	5c8a      	ldrb	r2, [r1, r2]
 80045a2:	422a      	tst	r2, r5
 80045a4:	d13c      	bne.n	8004620 <__ssvfiscanf_r+0x24c>
 80045a6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	dc4c      	bgt.n	8004646 <__ssvfiscanf_r+0x272>
 80045ac:	0022      	movs	r2, r4
 80045ae:	9800      	ldr	r0, [sp, #0]
 80045b0:	ab02      	add	r3, sp, #8
 80045b2:	a943      	add	r1, sp, #268	@ 0x10c
 80045b4:	f000 f9ee 	bl	8004994 <_scanf_chars>
 80045b8:	2801      	cmp	r0, #1
 80045ba:	d060      	beq.n	800467e <__ssvfiscanf_r+0x2aa>
 80045bc:	2802      	cmp	r0, #2
 80045be:	d000      	beq.n	80045c2 <__ssvfiscanf_r+0x1ee>
 80045c0:	e731      	b.n	8004426 <__ssvfiscanf_r+0x52>
 80045c2:	e7c4      	b.n	800454e <__ssvfiscanf_r+0x17a>
 80045c4:	220a      	movs	r2, #10
 80045c6:	e7d3      	b.n	8004570 <__ssvfiscanf_r+0x19c>
 80045c8:	0039      	movs	r1, r7
 80045ca:	a803      	add	r0, sp, #12
 80045cc:	f000 fb42 	bl	8004c54 <__sccl>
 80045d0:	2340      	movs	r3, #64	@ 0x40
 80045d2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80045d4:	0007      	movs	r7, r0
 80045d6:	4313      	orrs	r3, r2
 80045d8:	9343      	str	r3, [sp, #268]	@ 0x10c
 80045da:	2301      	movs	r3, #1
 80045dc:	e7d3      	b.n	8004586 <__ssvfiscanf_r+0x1b2>
 80045de:	2340      	movs	r3, #64	@ 0x40
 80045e0:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80045e2:	4313      	orrs	r3, r2
 80045e4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80045e6:	2300      	movs	r3, #0
 80045e8:	e7cd      	b.n	8004586 <__ssvfiscanf_r+0x1b2>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e7cb      	b.n	8004586 <__ssvfiscanf_r+0x1b2>
 80045ee:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80045f0:	06d3      	lsls	r3, r2, #27
 80045f2:	d500      	bpl.n	80045f6 <__ssvfiscanf_r+0x222>
 80045f4:	e717      	b.n	8004426 <__ssvfiscanf_r+0x52>
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80045fa:	1d18      	adds	r0, r3, #4
 80045fc:	9002      	str	r0, [sp, #8]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	07d5      	lsls	r5, r2, #31
 8004602:	d501      	bpl.n	8004608 <__ssvfiscanf_r+0x234>
 8004604:	8019      	strh	r1, [r3, #0]
 8004606:	e70e      	b.n	8004426 <__ssvfiscanf_r+0x52>
 8004608:	6019      	str	r1, [r3, #0]
 800460a:	e70c      	b.n	8004426 <__ssvfiscanf_r+0x52>
 800460c:	23c0      	movs	r3, #192	@ 0xc0
 800460e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	0021      	movs	r1, r4
 8004614:	58d3      	ldr	r3, [r2, r3]
 8004616:	9800      	ldr	r0, [sp, #0]
 8004618:	4798      	blx	r3
 800461a:	2800      	cmp	r0, #0
 800461c:	d0b7      	beq.n	800458e <__ssvfiscanf_r+0x1ba>
 800461e:	e796      	b.n	800454e <__ssvfiscanf_r+0x17a>
 8004620:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004622:	3201      	adds	r2, #1
 8004624:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	3a01      	subs	r2, #1
 800462a:	6062      	str	r2, [r4, #4]
 800462c:	2a00      	cmp	r2, #0
 800462e:	dd02      	ble.n	8004636 <__ssvfiscanf_r+0x262>
 8004630:	3301      	adds	r3, #1
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	e7b1      	b.n	800459a <__ssvfiscanf_r+0x1c6>
 8004636:	ab43      	add	r3, sp, #268	@ 0x10c
 8004638:	0021      	movs	r1, r4
 800463a:	599b      	ldr	r3, [r3, r6]
 800463c:	9800      	ldr	r0, [sp, #0]
 800463e:	4798      	blx	r3
 8004640:	2800      	cmp	r0, #0
 8004642:	d0aa      	beq.n	800459a <__ssvfiscanf_r+0x1c6>
 8004644:	e783      	b.n	800454e <__ssvfiscanf_r+0x17a>
 8004646:	2b04      	cmp	r3, #4
 8004648:	dc06      	bgt.n	8004658 <__ssvfiscanf_r+0x284>
 800464a:	0022      	movs	r2, r4
 800464c:	9800      	ldr	r0, [sp, #0]
 800464e:	ab02      	add	r3, sp, #8
 8004650:	a943      	add	r1, sp, #268	@ 0x10c
 8004652:	f000 f9ff 	bl	8004a54 <_scanf_i>
 8004656:	e7af      	b.n	80045b8 <__ssvfiscanf_r+0x1e4>
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <__ssvfiscanf_r+0x2c4>)
 800465a:	2b00      	cmp	r3, #0
 800465c:	d100      	bne.n	8004660 <__ssvfiscanf_r+0x28c>
 800465e:	e6e2      	b.n	8004426 <__ssvfiscanf_r+0x52>
 8004660:	0022      	movs	r2, r4
 8004662:	9800      	ldr	r0, [sp, #0]
 8004664:	ab02      	add	r3, sp, #8
 8004666:	a943      	add	r1, sp, #268	@ 0x10c
 8004668:	e000      	b.n	800466c <__ssvfiscanf_r+0x298>
 800466a:	bf00      	nop
 800466c:	e7a4      	b.n	80045b8 <__ssvfiscanf_r+0x1e4>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	065b      	lsls	r3, r3, #25
 8004672:	d500      	bpl.n	8004676 <__ssvfiscanf_r+0x2a2>
 8004674:	e76f      	b.n	8004556 <__ssvfiscanf_r+0x182>
 8004676:	23a5      	movs	r3, #165	@ 0xa5
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	449d      	add	sp, r3
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004680:	e7f9      	b.n	8004676 <__ssvfiscanf_r+0x2a2>
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	fffffd6c 	.word	0xfffffd6c
 8004688:	0800431d 	.word	0x0800431d
 800468c:	08004395 	.word	0x08004395
 8004690:	0800515f 	.word	0x0800515f
 8004694:	08005116 	.word	0x08005116
 8004698:	00000000 	.word	0x00000000

0800469c <_printf_common>:
 800469c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469e:	0016      	movs	r6, r2
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	688a      	ldr	r2, [r1, #8]
 80046a4:	690b      	ldr	r3, [r1, #16]
 80046a6:	000c      	movs	r4, r1
 80046a8:	9000      	str	r0, [sp, #0]
 80046aa:	4293      	cmp	r3, r2
 80046ac:	da00      	bge.n	80046b0 <_printf_common+0x14>
 80046ae:	0013      	movs	r3, r2
 80046b0:	0022      	movs	r2, r4
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	3243      	adds	r2, #67	@ 0x43
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	d001      	beq.n	80046c0 <_printf_common+0x24>
 80046bc:	3301      	adds	r3, #1
 80046be:	6033      	str	r3, [r6, #0]
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	069b      	lsls	r3, r3, #26
 80046c4:	d502      	bpl.n	80046cc <_printf_common+0x30>
 80046c6:	6833      	ldr	r3, [r6, #0]
 80046c8:	3302      	adds	r3, #2
 80046ca:	6033      	str	r3, [r6, #0]
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	2306      	movs	r3, #6
 80046d0:	0015      	movs	r5, r2
 80046d2:	401d      	ands	r5, r3
 80046d4:	421a      	tst	r2, r3
 80046d6:	d027      	beq.n	8004728 <_printf_common+0x8c>
 80046d8:	0023      	movs	r3, r4
 80046da:	3343      	adds	r3, #67	@ 0x43
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	4193      	sbcs	r3, r2
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	0692      	lsls	r2, r2, #26
 80046e6:	d430      	bmi.n	800474a <_printf_common+0xae>
 80046e8:	0022      	movs	r2, r4
 80046ea:	9901      	ldr	r1, [sp, #4]
 80046ec:	9800      	ldr	r0, [sp, #0]
 80046ee:	9d08      	ldr	r5, [sp, #32]
 80046f0:	3243      	adds	r2, #67	@ 0x43
 80046f2:	47a8      	blx	r5
 80046f4:	3001      	adds	r0, #1
 80046f6:	d025      	beq.n	8004744 <_printf_common+0xa8>
 80046f8:	2206      	movs	r2, #6
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	2500      	movs	r5, #0
 80046fe:	4013      	ands	r3, r2
 8004700:	2b04      	cmp	r3, #4
 8004702:	d105      	bne.n	8004710 <_printf_common+0x74>
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	1aed      	subs	r5, r5, r3
 800470a:	43eb      	mvns	r3, r5
 800470c:	17db      	asrs	r3, r3, #31
 800470e:	401d      	ands	r5, r3
 8004710:	68a3      	ldr	r3, [r4, #8]
 8004712:	6922      	ldr	r2, [r4, #16]
 8004714:	4293      	cmp	r3, r2
 8004716:	dd01      	ble.n	800471c <_printf_common+0x80>
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	18ed      	adds	r5, r5, r3
 800471c:	2600      	movs	r6, #0
 800471e:	42b5      	cmp	r5, r6
 8004720:	d120      	bne.n	8004764 <_printf_common+0xc8>
 8004722:	2000      	movs	r0, #0
 8004724:	e010      	b.n	8004748 <_printf_common+0xac>
 8004726:	3501      	adds	r5, #1
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	6832      	ldr	r2, [r6, #0]
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	42ab      	cmp	r3, r5
 8004730:	ddd2      	ble.n	80046d8 <_printf_common+0x3c>
 8004732:	0022      	movs	r2, r4
 8004734:	2301      	movs	r3, #1
 8004736:	9901      	ldr	r1, [sp, #4]
 8004738:	9800      	ldr	r0, [sp, #0]
 800473a:	9f08      	ldr	r7, [sp, #32]
 800473c:	3219      	adds	r2, #25
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	d1f0      	bne.n	8004726 <_printf_common+0x8a>
 8004744:	2001      	movs	r0, #1
 8004746:	4240      	negs	r0, r0
 8004748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800474a:	2030      	movs	r0, #48	@ 0x30
 800474c:	18e1      	adds	r1, r4, r3
 800474e:	3143      	adds	r1, #67	@ 0x43
 8004750:	7008      	strb	r0, [r1, #0]
 8004752:	0021      	movs	r1, r4
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	3145      	adds	r1, #69	@ 0x45
 8004758:	7809      	ldrb	r1, [r1, #0]
 800475a:	18a2      	adds	r2, r4, r2
 800475c:	3243      	adds	r2, #67	@ 0x43
 800475e:	3302      	adds	r3, #2
 8004760:	7011      	strb	r1, [r2, #0]
 8004762:	e7c1      	b.n	80046e8 <_printf_common+0x4c>
 8004764:	0022      	movs	r2, r4
 8004766:	2301      	movs	r3, #1
 8004768:	9901      	ldr	r1, [sp, #4]
 800476a:	9800      	ldr	r0, [sp, #0]
 800476c:	9f08      	ldr	r7, [sp, #32]
 800476e:	321a      	adds	r2, #26
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	d0e6      	beq.n	8004744 <_printf_common+0xa8>
 8004776:	3601      	adds	r6, #1
 8004778:	e7d1      	b.n	800471e <_printf_common+0x82>
	...

0800477c <_printf_i>:
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b08b      	sub	sp, #44	@ 0x2c
 8004780:	9206      	str	r2, [sp, #24]
 8004782:	000a      	movs	r2, r1
 8004784:	3243      	adds	r2, #67	@ 0x43
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	9005      	str	r0, [sp, #20]
 800478a:	9203      	str	r2, [sp, #12]
 800478c:	7e0a      	ldrb	r2, [r1, #24]
 800478e:	000c      	movs	r4, r1
 8004790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004792:	2a78      	cmp	r2, #120	@ 0x78
 8004794:	d809      	bhi.n	80047aa <_printf_i+0x2e>
 8004796:	2a62      	cmp	r2, #98	@ 0x62
 8004798:	d80b      	bhi.n	80047b2 <_printf_i+0x36>
 800479a:	2a00      	cmp	r2, #0
 800479c:	d100      	bne.n	80047a0 <_printf_i+0x24>
 800479e:	e0ba      	b.n	8004916 <_printf_i+0x19a>
 80047a0:	497a      	ldr	r1, [pc, #488]	@ (800498c <_printf_i+0x210>)
 80047a2:	9104      	str	r1, [sp, #16]
 80047a4:	2a58      	cmp	r2, #88	@ 0x58
 80047a6:	d100      	bne.n	80047aa <_printf_i+0x2e>
 80047a8:	e08e      	b.n	80048c8 <_printf_i+0x14c>
 80047aa:	0025      	movs	r5, r4
 80047ac:	3542      	adds	r5, #66	@ 0x42
 80047ae:	702a      	strb	r2, [r5, #0]
 80047b0:	e022      	b.n	80047f8 <_printf_i+0x7c>
 80047b2:	0010      	movs	r0, r2
 80047b4:	3863      	subs	r0, #99	@ 0x63
 80047b6:	2815      	cmp	r0, #21
 80047b8:	d8f7      	bhi.n	80047aa <_printf_i+0x2e>
 80047ba:	f7fb fcad 	bl	8000118 <__gnu_thumb1_case_shi>
 80047be:	0016      	.short	0x0016
 80047c0:	fff6001f 	.word	0xfff6001f
 80047c4:	fff6fff6 	.word	0xfff6fff6
 80047c8:	001ffff6 	.word	0x001ffff6
 80047cc:	fff6fff6 	.word	0xfff6fff6
 80047d0:	fff6fff6 	.word	0xfff6fff6
 80047d4:	0036009f 	.word	0x0036009f
 80047d8:	fff6007e 	.word	0xfff6007e
 80047dc:	00b0fff6 	.word	0x00b0fff6
 80047e0:	0036fff6 	.word	0x0036fff6
 80047e4:	fff6fff6 	.word	0xfff6fff6
 80047e8:	0082      	.short	0x0082
 80047ea:	0025      	movs	r5, r4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	3542      	adds	r5, #66	@ 0x42
 80047f0:	1d11      	adds	r1, r2, #4
 80047f2:	6019      	str	r1, [r3, #0]
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	702b      	strb	r3, [r5, #0]
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09e      	b.n	800493a <_printf_i+0x1be>
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	6809      	ldr	r1, [r1, #0]
 8004800:	1d02      	adds	r2, r0, #4
 8004802:	060d      	lsls	r5, r1, #24
 8004804:	d50b      	bpl.n	800481e <_printf_i+0xa2>
 8004806:	6806      	ldr	r6, [r0, #0]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	2e00      	cmp	r6, #0
 800480c:	da03      	bge.n	8004816 <_printf_i+0x9a>
 800480e:	232d      	movs	r3, #45	@ 0x2d
 8004810:	9a03      	ldr	r2, [sp, #12]
 8004812:	4276      	negs	r6, r6
 8004814:	7013      	strb	r3, [r2, #0]
 8004816:	4b5d      	ldr	r3, [pc, #372]	@ (800498c <_printf_i+0x210>)
 8004818:	270a      	movs	r7, #10
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	e018      	b.n	8004850 <_printf_i+0xd4>
 800481e:	6806      	ldr	r6, [r0, #0]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	0649      	lsls	r1, r1, #25
 8004824:	d5f1      	bpl.n	800480a <_printf_i+0x8e>
 8004826:	b236      	sxth	r6, r6
 8004828:	e7ef      	b.n	800480a <_printf_i+0x8e>
 800482a:	6808      	ldr	r0, [r1, #0]
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	c940      	ldmia	r1!, {r6}
 8004830:	0605      	lsls	r5, r0, #24
 8004832:	d402      	bmi.n	800483a <_printf_i+0xbe>
 8004834:	0640      	lsls	r0, r0, #25
 8004836:	d500      	bpl.n	800483a <_printf_i+0xbe>
 8004838:	b2b6      	uxth	r6, r6
 800483a:	6019      	str	r1, [r3, #0]
 800483c:	4b53      	ldr	r3, [pc, #332]	@ (800498c <_printf_i+0x210>)
 800483e:	270a      	movs	r7, #10
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	2a6f      	cmp	r2, #111	@ 0x6f
 8004844:	d100      	bne.n	8004848 <_printf_i+0xcc>
 8004846:	3f02      	subs	r7, #2
 8004848:	0023      	movs	r3, r4
 800484a:	2200      	movs	r2, #0
 800484c:	3343      	adds	r3, #67	@ 0x43
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	60a3      	str	r3, [r4, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db06      	blt.n	8004866 <_printf_i+0xea>
 8004858:	2104      	movs	r1, #4
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	9d03      	ldr	r5, [sp, #12]
 800485e:	438a      	bics	r2, r1
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	4333      	orrs	r3, r6
 8004864:	d00c      	beq.n	8004880 <_printf_i+0x104>
 8004866:	9d03      	ldr	r5, [sp, #12]
 8004868:	0030      	movs	r0, r6
 800486a:	0039      	movs	r1, r7
 800486c:	f7fb fce4 	bl	8000238 <__aeabi_uidivmod>
 8004870:	9b04      	ldr	r3, [sp, #16]
 8004872:	3d01      	subs	r5, #1
 8004874:	5c5b      	ldrb	r3, [r3, r1]
 8004876:	702b      	strb	r3, [r5, #0]
 8004878:	0033      	movs	r3, r6
 800487a:	0006      	movs	r6, r0
 800487c:	429f      	cmp	r7, r3
 800487e:	d9f3      	bls.n	8004868 <_printf_i+0xec>
 8004880:	2f08      	cmp	r7, #8
 8004882:	d109      	bne.n	8004898 <_printf_i+0x11c>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	07db      	lsls	r3, r3, #31
 8004888:	d506      	bpl.n	8004898 <_printf_i+0x11c>
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	429a      	cmp	r2, r3
 8004890:	dc02      	bgt.n	8004898 <_printf_i+0x11c>
 8004892:	2330      	movs	r3, #48	@ 0x30
 8004894:	3d01      	subs	r5, #1
 8004896:	702b      	strb	r3, [r5, #0]
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	1b5b      	subs	r3, r3, r5
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	9b07      	ldr	r3, [sp, #28]
 80048a0:	0021      	movs	r1, r4
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	9805      	ldr	r0, [sp, #20]
 80048a6:	9b06      	ldr	r3, [sp, #24]
 80048a8:	aa09      	add	r2, sp, #36	@ 0x24
 80048aa:	f7ff fef7 	bl	800469c <_printf_common>
 80048ae:	3001      	adds	r0, #1
 80048b0:	d148      	bne.n	8004944 <_printf_i+0x1c8>
 80048b2:	2001      	movs	r0, #1
 80048b4:	4240      	negs	r0, r0
 80048b6:	b00b      	add	sp, #44	@ 0x2c
 80048b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ba:	2220      	movs	r2, #32
 80048bc:	6809      	ldr	r1, [r1, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	2278      	movs	r2, #120	@ 0x78
 80048c4:	4932      	ldr	r1, [pc, #200]	@ (8004990 <_printf_i+0x214>)
 80048c6:	9104      	str	r1, [sp, #16]
 80048c8:	0021      	movs	r1, r4
 80048ca:	3145      	adds	r1, #69	@ 0x45
 80048cc:	700a      	strb	r2, [r1, #0]
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6822      	ldr	r2, [r4, #0]
 80048d2:	c940      	ldmia	r1!, {r6}
 80048d4:	0610      	lsls	r0, r2, #24
 80048d6:	d402      	bmi.n	80048de <_printf_i+0x162>
 80048d8:	0650      	lsls	r0, r2, #25
 80048da:	d500      	bpl.n	80048de <_printf_i+0x162>
 80048dc:	b2b6      	uxth	r6, r6
 80048de:	6019      	str	r1, [r3, #0]
 80048e0:	07d3      	lsls	r3, r2, #31
 80048e2:	d502      	bpl.n	80048ea <_printf_i+0x16e>
 80048e4:	2320      	movs	r3, #32
 80048e6:	4313      	orrs	r3, r2
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d001      	beq.n	80048f2 <_printf_i+0x176>
 80048ee:	2710      	movs	r7, #16
 80048f0:	e7aa      	b.n	8004848 <_printf_i+0xcc>
 80048f2:	2220      	movs	r2, #32
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	4393      	bics	r3, r2
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	e7f8      	b.n	80048ee <_printf_i+0x172>
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	680d      	ldr	r5, [r1, #0]
 8004900:	1d10      	adds	r0, r2, #4
 8004902:	6949      	ldr	r1, [r1, #20]
 8004904:	6018      	str	r0, [r3, #0]
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	062e      	lsls	r6, r5, #24
 800490a:	d501      	bpl.n	8004910 <_printf_i+0x194>
 800490c:	6019      	str	r1, [r3, #0]
 800490e:	e002      	b.n	8004916 <_printf_i+0x19a>
 8004910:	066d      	lsls	r5, r5, #25
 8004912:	d5fb      	bpl.n	800490c <_printf_i+0x190>
 8004914:	8019      	strh	r1, [r3, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	9d03      	ldr	r5, [sp, #12]
 800491a:	6123      	str	r3, [r4, #16]
 800491c:	e7bf      	b.n	800489e <_printf_i+0x122>
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	1d11      	adds	r1, r2, #4
 8004922:	6019      	str	r1, [r3, #0]
 8004924:	6815      	ldr	r5, [r2, #0]
 8004926:	2100      	movs	r1, #0
 8004928:	0028      	movs	r0, r5
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	f000 fa2e 	bl	8004d8c <memchr>
 8004930:	2800      	cmp	r0, #0
 8004932:	d001      	beq.n	8004938 <_printf_i+0x1bc>
 8004934:	1b40      	subs	r0, r0, r5
 8004936:	6060      	str	r0, [r4, #4]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	2300      	movs	r3, #0
 800493e:	9a03      	ldr	r2, [sp, #12]
 8004940:	7013      	strb	r3, [r2, #0]
 8004942:	e7ac      	b.n	800489e <_printf_i+0x122>
 8004944:	002a      	movs	r2, r5
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	9906      	ldr	r1, [sp, #24]
 800494a:	9805      	ldr	r0, [sp, #20]
 800494c:	9d07      	ldr	r5, [sp, #28]
 800494e:	47a8      	blx	r5
 8004950:	3001      	adds	r0, #1
 8004952:	d0ae      	beq.n	80048b2 <_printf_i+0x136>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d415      	bmi.n	8004986 <_printf_i+0x20a>
 800495a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800495c:	68e0      	ldr	r0, [r4, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	daa9      	bge.n	80048b6 <_printf_i+0x13a>
 8004962:	0018      	movs	r0, r3
 8004964:	e7a7      	b.n	80048b6 <_printf_i+0x13a>
 8004966:	0022      	movs	r2, r4
 8004968:	2301      	movs	r3, #1
 800496a:	9906      	ldr	r1, [sp, #24]
 800496c:	9805      	ldr	r0, [sp, #20]
 800496e:	9e07      	ldr	r6, [sp, #28]
 8004970:	3219      	adds	r2, #25
 8004972:	47b0      	blx	r6
 8004974:	3001      	adds	r0, #1
 8004976:	d09c      	beq.n	80048b2 <_printf_i+0x136>
 8004978:	3501      	adds	r5, #1
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dcf0      	bgt.n	8004966 <_printf_i+0x1ea>
 8004984:	e7e9      	b.n	800495a <_printf_i+0x1de>
 8004986:	2500      	movs	r5, #0
 8004988:	e7f7      	b.n	800497a <_printf_i+0x1fe>
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	08005121 	.word	0x08005121
 8004990:	08005132 	.word	0x08005132

08004994 <_scanf_chars>:
 8004994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004996:	0015      	movs	r5, r2
 8004998:	688a      	ldr	r2, [r1, #8]
 800499a:	000c      	movs	r4, r1
 800499c:	9001      	str	r0, [sp, #4]
 800499e:	2a00      	cmp	r2, #0
 80049a0:	d104      	bne.n	80049ac <_scanf_chars+0x18>
 80049a2:	698a      	ldr	r2, [r1, #24]
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d117      	bne.n	80049d8 <_scanf_chars+0x44>
 80049a8:	3201      	adds	r2, #1
 80049aa:	60a2      	str	r2, [r4, #8]
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	06d2      	lsls	r2, r2, #27
 80049b0:	d403      	bmi.n	80049ba <_scanf_chars+0x26>
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	1d11      	adds	r1, r2, #4
 80049b6:	6019      	str	r1, [r3, #0]
 80049b8:	6817      	ldr	r7, [r2, #0]
 80049ba:	2600      	movs	r6, #0
 80049bc:	69a0      	ldr	r0, [r4, #24]
 80049be:	2800      	cmp	r0, #0
 80049c0:	d016      	beq.n	80049f0 <_scanf_chars+0x5c>
 80049c2:	2801      	cmp	r0, #1
 80049c4:	d10b      	bne.n	80049de <_scanf_chars+0x4a>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	6962      	ldr	r2, [r4, #20]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	5cd3      	ldrb	r3, [r2, r3]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10e      	bne.n	80049f0 <_scanf_chars+0x5c>
 80049d2:	2e00      	cmp	r6, #0
 80049d4:	d03b      	beq.n	8004a4e <_scanf_chars+0xba>
 80049d6:	e029      	b.n	8004a2c <_scanf_chars+0x98>
 80049d8:	2201      	movs	r2, #1
 80049da:	4252      	negs	r2, r2
 80049dc:	e7e5      	b.n	80049aa <_scanf_chars+0x16>
 80049de:	2802      	cmp	r0, #2
 80049e0:	d124      	bne.n	8004a2c <_scanf_chars+0x98>
 80049e2:	682b      	ldr	r3, [r5, #0]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a50 <_scanf_chars+0xbc>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	5cd3      	ldrb	r3, [r2, r3]
 80049ea:	2208      	movs	r2, #8
 80049ec:	4213      	tst	r3, r2
 80049ee:	d11d      	bne.n	8004a2c <_scanf_chars+0x98>
 80049f0:	2210      	movs	r2, #16
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	3601      	adds	r6, #1
 80049f6:	4213      	tst	r3, r2
 80049f8:	d103      	bne.n	8004a02 <_scanf_chars+0x6e>
 80049fa:	682b      	ldr	r3, [r5, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	703b      	strb	r3, [r7, #0]
 8004a00:	3701      	adds	r7, #1
 8004a02:	682a      	ldr	r2, [r5, #0]
 8004a04:	686b      	ldr	r3, [r5, #4]
 8004a06:	3201      	adds	r2, #1
 8004a08:	602a      	str	r2, [r5, #0]
 8004a0a:	68a2      	ldr	r2, [r4, #8]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	606b      	str	r3, [r5, #4]
 8004a12:	60a2      	str	r2, [r4, #8]
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d009      	beq.n	8004a2c <_scanf_chars+0x98>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dccf      	bgt.n	80049bc <_scanf_chars+0x28>
 8004a1c:	23c0      	movs	r3, #192	@ 0xc0
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	0029      	movs	r1, r5
 8004a22:	58e3      	ldr	r3, [r4, r3]
 8004a24:	9801      	ldr	r0, [sp, #4]
 8004a26:	4798      	blx	r3
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d0c7      	beq.n	80049bc <_scanf_chars+0x28>
 8004a2c:	6822      	ldr	r2, [r4, #0]
 8004a2e:	2310      	movs	r3, #16
 8004a30:	0011      	movs	r1, r2
 8004a32:	4019      	ands	r1, r3
 8004a34:	421a      	tst	r2, r3
 8004a36:	d106      	bne.n	8004a46 <_scanf_chars+0xb2>
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60e3      	str	r3, [r4, #12]
 8004a3e:	69a3      	ldr	r3, [r4, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d000      	beq.n	8004a46 <_scanf_chars+0xb2>
 8004a44:	7039      	strb	r1, [r7, #0]
 8004a46:	2000      	movs	r0, #0
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	199b      	adds	r3, r3, r6
 8004a4c:	6123      	str	r3, [r4, #16]
 8004a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a50:	0800515f 	.word	0x0800515f

08004a54 <_scanf_i>:
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	b08b      	sub	sp, #44	@ 0x2c
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	4b78      	ldr	r3, [pc, #480]	@ (8004c3c <_scanf_i+0x1e8>)
 8004a5c:	0016      	movs	r6, r2
 8004a5e:	9004      	str	r0, [sp, #16]
 8004a60:	aa07      	add	r2, sp, #28
 8004a62:	cba1      	ldmia	r3!, {r0, r5, r7}
 8004a64:	c2a1      	stmia	r2!, {r0, r5, r7}
 8004a66:	4a76      	ldr	r2, [pc, #472]	@ (8004c40 <_scanf_i+0x1ec>)
 8004a68:	698b      	ldr	r3, [r1, #24]
 8004a6a:	000c      	movs	r4, r1
 8004a6c:	9205      	str	r2, [sp, #20]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d101      	bne.n	8004a76 <_scanf_i+0x22>
 8004a72:	4b74      	ldr	r3, [pc, #464]	@ (8004c44 <_scanf_i+0x1f0>)
 8004a74:	9305      	str	r3, [sp, #20]
 8004a76:	22ae      	movs	r2, #174	@ 0xae
 8004a78:	2000      	movs	r0, #0
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	0052      	lsls	r2, r2, #1
 8004a7e:	1e59      	subs	r1, r3, #1
 8004a80:	9003      	str	r0, [sp, #12]
 8004a82:	4291      	cmp	r1, r2
 8004a84:	d905      	bls.n	8004a92 <_scanf_i+0x3e>
 8004a86:	3b5e      	subs	r3, #94	@ 0x5e
 8004a88:	3bff      	subs	r3, #255	@ 0xff
 8004a8a:	9303      	str	r3, [sp, #12]
 8004a8c:	235e      	movs	r3, #94	@ 0x5e
 8004a8e:	33ff      	adds	r3, #255	@ 0xff
 8004a90:	60a3      	str	r3, [r4, #8]
 8004a92:	0023      	movs	r3, r4
 8004a94:	331c      	adds	r3, #28
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	23d0      	movs	r3, #208	@ 0xd0
 8004a9a:	2700      	movs	r7, #0
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	9b00      	ldr	r3, [sp, #0]
 8004aa6:	9302      	str	r3, [sp, #8]
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	a807      	add	r0, sp, #28
 8004aac:	7819      	ldrb	r1, [r3, #0]
 8004aae:	00bb      	lsls	r3, r7, #2
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	5818      	ldr	r0, [r3, r0]
 8004ab4:	f000 f96a 	bl	8004d8c <memchr>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d029      	beq.n	8004b10 <_scanf_i+0xbc>
 8004abc:	2f01      	cmp	r7, #1
 8004abe:	d15e      	bne.n	8004b7e <_scanf_i+0x12a>
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <_scanf_i+0x80>
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	33f9      	adds	r3, #249	@ 0xf9
 8004ace:	33ff      	adds	r3, #255	@ 0xff
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c48 <_scanf_i+0x1f4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	60a2      	str	r2, [r4, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d014      	beq.n	8004b10 <_scanf_i+0xbc>
 8004ae6:	6833      	ldr	r3, [r6, #0]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	6032      	str	r2, [r6, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	9a02      	ldr	r2, [sp, #8]
 8004af0:	7013      	strb	r3, [r2, #0]
 8004af2:	6873      	ldr	r3, [r6, #4]
 8004af4:	1c55      	adds	r5, r2, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	6073      	str	r3, [r6, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dc07      	bgt.n	8004b0e <_scanf_i+0xba>
 8004afe:	23c0      	movs	r3, #192	@ 0xc0
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	0031      	movs	r1, r6
 8004b04:	58e3      	ldr	r3, [r4, r3]
 8004b06:	9804      	ldr	r0, [sp, #16]
 8004b08:	4798      	blx	r3
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d17e      	bne.n	8004c0c <_scanf_i+0x1b8>
 8004b0e:	9502      	str	r5, [sp, #8]
 8004b10:	3701      	adds	r7, #1
 8004b12:	2f03      	cmp	r7, #3
 8004b14:	d1c8      	bne.n	8004aa8 <_scanf_i+0x54>
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <_scanf_i+0xcc>
 8004b1c:	330a      	adds	r3, #10
 8004b1e:	6063      	str	r3, [r4, #4]
 8004b20:	2700      	movs	r7, #0
 8004b22:	6863      	ldr	r3, [r4, #4]
 8004b24:	4949      	ldr	r1, [pc, #292]	@ (8004c4c <_scanf_i+0x1f8>)
 8004b26:	6960      	ldr	r0, [r4, #20]
 8004b28:	1ac9      	subs	r1, r1, r3
 8004b2a:	f000 f893 	bl	8004c54 <__sccl>
 8004b2e:	9d02      	ldr	r5, [sp, #8]
 8004b30:	68a3      	ldr	r3, [r4, #8]
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03f      	beq.n	8004bba <_scanf_i+0x166>
 8004b3a:	6831      	ldr	r1, [r6, #0]
 8004b3c:	6963      	ldr	r3, [r4, #20]
 8004b3e:	780a      	ldrb	r2, [r1, #0]
 8004b40:	5c9b      	ldrb	r3, [r3, r2]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d039      	beq.n	8004bba <_scanf_i+0x166>
 8004b46:	2a30      	cmp	r2, #48	@ 0x30
 8004b48:	d128      	bne.n	8004b9c <_scanf_i+0x148>
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	4218      	tst	r0, r3
 8004b50:	d024      	beq.n	8004b9c <_scanf_i+0x148>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	3701      	adds	r7, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <_scanf_i+0x112>
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	9b02      	ldr	r3, [sp, #8]
 8004b5e:	3a01      	subs	r2, #1
 8004b60:	3301      	adds	r3, #1
 8004b62:	9203      	str	r2, [sp, #12]
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	6873      	ldr	r3, [r6, #4]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	6073      	str	r3, [r6, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dd1c      	ble.n	8004baa <_scanf_i+0x156>
 8004b70:	6833      	ldr	r3, [r6, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	e7d8      	b.n	8004b30 <_scanf_i+0xdc>
 8004b7e:	2f02      	cmp	r7, #2
 8004b80:	d1ac      	bne.n	8004adc <_scanf_i+0x88>
 8004b82:	23c0      	movs	r3, #192	@ 0xc0
 8004b84:	2180      	movs	r1, #128	@ 0x80
 8004b86:	6822      	ldr	r2, [r4, #0]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0089      	lsls	r1, r1, #2
 8004b8e:	428b      	cmp	r3, r1
 8004b90:	d1c1      	bne.n	8004b16 <_scanf_i+0xc2>
 8004b92:	2310      	movs	r3, #16
 8004b94:	6063      	str	r3, [r4, #4]
 8004b96:	33f0      	adds	r3, #240	@ 0xf0
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	e79e      	b.n	8004ada <_scanf_i+0x86>
 8004b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004c50 <_scanf_i+0x1fc>)
 8004b9e:	4003      	ands	r3, r0
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	780b      	ldrb	r3, [r1, #0]
 8004ba4:	702b      	strb	r3, [r5, #0]
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7dd      	b.n	8004b66 <_scanf_i+0x112>
 8004baa:	23c0      	movs	r3, #192	@ 0xc0
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	0031      	movs	r1, r6
 8004bb0:	58e3      	ldr	r3, [r4, r3]
 8004bb2:	9804      	ldr	r0, [sp, #16]
 8004bb4:	4798      	blx	r3
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d0dd      	beq.n	8004b76 <_scanf_i+0x122>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	d50e      	bpl.n	8004bde <_scanf_i+0x18a>
 8004bc0:	9b00      	ldr	r3, [sp, #0]
 8004bc2:	429d      	cmp	r5, r3
 8004bc4:	d907      	bls.n	8004bd6 <_scanf_i+0x182>
 8004bc6:	23be      	movs	r3, #190	@ 0xbe
 8004bc8:	3d01      	subs	r5, #1
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	0032      	movs	r2, r6
 8004bce:	7829      	ldrb	r1, [r5, #0]
 8004bd0:	58e3      	ldr	r3, [r4, r3]
 8004bd2:	9804      	ldr	r0, [sp, #16]
 8004bd4:	4798      	blx	r3
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	2001      	movs	r0, #1
 8004bda:	429d      	cmp	r5, r3
 8004bdc:	d029      	beq.n	8004c32 <_scanf_i+0x1de>
 8004bde:	6821      	ldr	r1, [r4, #0]
 8004be0:	2310      	movs	r3, #16
 8004be2:	000a      	movs	r2, r1
 8004be4:	401a      	ands	r2, r3
 8004be6:	4219      	tst	r1, r3
 8004be8:	d11c      	bne.n	8004c24 <_scanf_i+0x1d0>
 8004bea:	702a      	strb	r2, [r5, #0]
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	9900      	ldr	r1, [sp, #0]
 8004bf0:	9804      	ldr	r0, [sp, #16]
 8004bf2:	9e05      	ldr	r6, [sp, #20]
 8004bf4:	47b0      	blx	r6
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	6822      	ldr	r2, [r4, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0691      	lsls	r1, r2, #26
 8004bfe:	d507      	bpl.n	8004c10 <_scanf_i+0x1bc>
 8004c00:	9901      	ldr	r1, [sp, #4]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	600a      	str	r2, [r1, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6018      	str	r0, [r3, #0]
 8004c0a:	e008      	b.n	8004c1e <_scanf_i+0x1ca>
 8004c0c:	2700      	movs	r7, #0
 8004c0e:	e7d4      	b.n	8004bba <_scanf_i+0x166>
 8004c10:	1d19      	adds	r1, r3, #4
 8004c12:	07d6      	lsls	r6, r2, #31
 8004c14:	d50f      	bpl.n	8004c36 <_scanf_i+0x1e2>
 8004c16:	9a01      	ldr	r2, [sp, #4]
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	8018      	strh	r0, [r3, #0]
 8004c1e:	68e3      	ldr	r3, [r4, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60e3      	str	r3, [r4, #12]
 8004c24:	2000      	movs	r0, #0
 8004c26:	9b00      	ldr	r3, [sp, #0]
 8004c28:	1aed      	subs	r5, r5, r3
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	19ed      	adds	r5, r5, r7
 8004c2e:	195b      	adds	r3, r3, r5
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	b00b      	add	sp, #44	@ 0x2c
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c36:	9a01      	ldr	r2, [sp, #4]
 8004c38:	6011      	str	r1, [r2, #0]
 8004c3a:	e7e4      	b.n	8004c06 <_scanf_i+0x1b2>
 8004c3c:	080050cc 	.word	0x080050cc
 8004c40:	08005025 	.word	0x08005025
 8004c44:	08004f19 	.word	0x08004f19
 8004c48:	fffffaff 	.word	0xfffffaff
 8004c4c:	08005153 	.word	0x08005153
 8004c50:	fffff6ff 	.word	0xfffff6ff

08004c54 <__sccl>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	780b      	ldrb	r3, [r1, #0]
 8004c58:	0004      	movs	r4, r0
 8004c5a:	2b5e      	cmp	r3, #94	@ 0x5e
 8004c5c:	d019      	beq.n	8004c92 <__sccl+0x3e>
 8004c5e:	1c4d      	adds	r5, r1, #1
 8004c60:	2100      	movs	r1, #0
 8004c62:	0022      	movs	r2, r4
 8004c64:	1c60      	adds	r0, r4, #1
 8004c66:	30ff      	adds	r0, #255	@ 0xff
 8004c68:	7011      	strb	r1, [r2, #0]
 8004c6a:	3201      	adds	r2, #1
 8004c6c:	4282      	cmp	r2, r0
 8004c6e:	d1fb      	bne.n	8004c68 <__sccl+0x14>
 8004c70:	1e68      	subs	r0, r5, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d026      	beq.n	8004cc4 <__sccl+0x70>
 8004c76:	2601      	movs	r6, #1
 8004c78:	404e      	eors	r6, r1
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	54e6      	strb	r6, [r4, r3]
 8004c7e:	7801      	ldrb	r1, [r0, #0]
 8004c80:	1c45      	adds	r5, r0, #1
 8004c82:	292d      	cmp	r1, #45	@ 0x2d
 8004c84:	d009      	beq.n	8004c9a <__sccl+0x46>
 8004c86:	295d      	cmp	r1, #93	@ 0x5d
 8004c88:	d01b      	beq.n	8004cc2 <__sccl+0x6e>
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	d01a      	beq.n	8004cc4 <__sccl+0x70>
 8004c8e:	000b      	movs	r3, r1
 8004c90:	e7f3      	b.n	8004c7a <__sccl+0x26>
 8004c92:	784b      	ldrb	r3, [r1, #1]
 8004c94:	1c8d      	adds	r5, r1, #2
 8004c96:	2101      	movs	r1, #1
 8004c98:	e7e3      	b.n	8004c62 <__sccl+0xe>
 8004c9a:	7842      	ldrb	r2, [r0, #1]
 8004c9c:	2a5d      	cmp	r2, #93	@ 0x5d
 8004c9e:	d0f6      	beq.n	8004c8e <__sccl+0x3a>
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	dcf4      	bgt.n	8004c8e <__sccl+0x3a>
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	3002      	adds	r0, #2
 8004ca8:	3101      	adds	r1, #1
 8004caa:	5466      	strb	r6, [r4, r1]
 8004cac:	428a      	cmp	r2, r1
 8004cae:	dcfb      	bgt.n	8004ca8 <__sccl+0x54>
 8004cb0:	1c59      	adds	r1, r3, #1
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	db02      	blt.n	8004cbc <__sccl+0x68>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	188b      	adds	r3, r1, r2
 8004cba:	e7e0      	b.n	8004c7e <__sccl+0x2a>
 8004cbc:	1ad2      	subs	r2, r2, r3
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	e7fa      	b.n	8004cb8 <__sccl+0x64>
 8004cc2:	0028      	movs	r0, r5
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cc8 <__submore>:
 8004cc8:	000b      	movs	r3, r1
 8004cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ccc:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8004cce:	3344      	adds	r3, #68	@ 0x44
 8004cd0:	000c      	movs	r4, r1
 8004cd2:	429d      	cmp	r5, r3
 8004cd4:	d11c      	bne.n	8004d10 <__submore+0x48>
 8004cd6:	2680      	movs	r6, #128	@ 0x80
 8004cd8:	00f6      	lsls	r6, r6, #3
 8004cda:	0031      	movs	r1, r6
 8004cdc:	f7ff f930 	bl	8003f40 <_malloc_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d102      	bne.n	8004cea <__submore+0x22>
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	4240      	negs	r0, r0
 8004ce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cea:	0023      	movs	r3, r4
 8004cec:	6360      	str	r0, [r4, #52]	@ 0x34
 8004cee:	63a6      	str	r6, [r4, #56]	@ 0x38
 8004cf0:	3346      	adds	r3, #70	@ 0x46
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <__submore+0x70>)
 8004cf6:	54c2      	strb	r2, [r0, r3]
 8004cf8:	0023      	movs	r3, r4
 8004cfa:	3345      	adds	r3, #69	@ 0x45
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <__submore+0x74>)
 8004d00:	54c2      	strb	r2, [r0, r3]
 8004d02:	782a      	ldrb	r2, [r5, #0]
 8004d04:	4b0e      	ldr	r3, [pc, #56]	@ (8004d40 <__submore+0x78>)
 8004d06:	54c2      	strb	r2, [r0, r3]
 8004d08:	18c0      	adds	r0, r0, r3
 8004d0a:	6020      	str	r0, [r4, #0]
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7eb      	b.n	8004ce8 <__submore+0x20>
 8004d10:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8004d12:	0029      	movs	r1, r5
 8004d14:	0073      	lsls	r3, r6, #1
 8004d16:	001a      	movs	r2, r3
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	f000 f842 	bl	8004da2 <_realloc_r>
 8004d1e:	1e05      	subs	r5, r0, #0
 8004d20:	d0e0      	beq.n	8004ce4 <__submore+0x1c>
 8004d22:	1987      	adds	r7, r0, r6
 8004d24:	0001      	movs	r1, r0
 8004d26:	0032      	movs	r2, r6
 8004d28:	0038      	movs	r0, r7
 8004d2a:	f7ff f893 	bl	8003e54 <memcpy>
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	6027      	str	r7, [r4, #0]
 8004d32:	6365      	str	r5, [r4, #52]	@ 0x34
 8004d34:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004d36:	e7e9      	b.n	8004d0c <__submore+0x44>
 8004d38:	000003ff 	.word	0x000003ff
 8004d3c:	000003fe 	.word	0x000003fe
 8004d40:	000003fd 	.word	0x000003fd

08004d44 <memmove>:
 8004d44:	b510      	push	{r4, lr}
 8004d46:	4288      	cmp	r0, r1
 8004d48:	d902      	bls.n	8004d50 <memmove+0xc>
 8004d4a:	188b      	adds	r3, r1, r2
 8004d4c:	4298      	cmp	r0, r3
 8004d4e:	d308      	bcc.n	8004d62 <memmove+0x1e>
 8004d50:	2300      	movs	r3, #0
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d007      	beq.n	8004d66 <memmove+0x22>
 8004d56:	5ccc      	ldrb	r4, [r1, r3]
 8004d58:	54c4      	strb	r4, [r0, r3]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	e7f9      	b.n	8004d52 <memmove+0xe>
 8004d5e:	5c8b      	ldrb	r3, [r1, r2]
 8004d60:	5483      	strb	r3, [r0, r2]
 8004d62:	3a01      	subs	r2, #1
 8004d64:	d2fb      	bcs.n	8004d5e <memmove+0x1a>
 8004d66:	bd10      	pop	{r4, pc}

08004d68 <_sbrk_r>:
 8004d68:	2300      	movs	r3, #0
 8004d6a:	b570      	push	{r4, r5, r6, lr}
 8004d6c:	4d06      	ldr	r5, [pc, #24]	@ (8004d88 <_sbrk_r+0x20>)
 8004d6e:	0004      	movs	r4, r0
 8004d70:	0008      	movs	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fb fc3c 	bl	80005f0 <_sbrk>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d103      	bne.n	8004d84 <_sbrk_r+0x1c>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d000      	beq.n	8004d84 <_sbrk_r+0x1c>
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	20000444 	.word	0x20000444

08004d8c <memchr>:
 8004d8c:	b2c9      	uxtb	r1, r1
 8004d8e:	1882      	adds	r2, r0, r2
 8004d90:	4290      	cmp	r0, r2
 8004d92:	d101      	bne.n	8004d98 <memchr+0xc>
 8004d94:	2000      	movs	r0, #0
 8004d96:	4770      	bx	lr
 8004d98:	7803      	ldrb	r3, [r0, #0]
 8004d9a:	428b      	cmp	r3, r1
 8004d9c:	d0fb      	beq.n	8004d96 <memchr+0xa>
 8004d9e:	3001      	adds	r0, #1
 8004da0:	e7f6      	b.n	8004d90 <memchr+0x4>

08004da2 <_realloc_r>:
 8004da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004da4:	0006      	movs	r6, r0
 8004da6:	000c      	movs	r4, r1
 8004da8:	0015      	movs	r5, r2
 8004daa:	2900      	cmp	r1, #0
 8004dac:	d105      	bne.n	8004dba <_realloc_r+0x18>
 8004dae:	0011      	movs	r1, r2
 8004db0:	f7ff f8c6 	bl	8003f40 <_malloc_r>
 8004db4:	0004      	movs	r4, r0
 8004db6:	0020      	movs	r0, r4
 8004db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	d103      	bne.n	8004dc6 <_realloc_r+0x24>
 8004dbe:	f7ff f853 	bl	8003e68 <_free_r>
 8004dc2:	002c      	movs	r4, r5
 8004dc4:	e7f7      	b.n	8004db6 <_realloc_r+0x14>
 8004dc6:	f000 f931 	bl	800502c <_malloc_usable_size_r>
 8004dca:	0007      	movs	r7, r0
 8004dcc:	4285      	cmp	r5, r0
 8004dce:	d802      	bhi.n	8004dd6 <_realloc_r+0x34>
 8004dd0:	0843      	lsrs	r3, r0, #1
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	d3ef      	bcc.n	8004db6 <_realloc_r+0x14>
 8004dd6:	0029      	movs	r1, r5
 8004dd8:	0030      	movs	r0, r6
 8004dda:	f7ff f8b1 	bl	8003f40 <_malloc_r>
 8004dde:	9001      	str	r0, [sp, #4]
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d101      	bne.n	8004de8 <_realloc_r+0x46>
 8004de4:	9c01      	ldr	r4, [sp, #4]
 8004de6:	e7e6      	b.n	8004db6 <_realloc_r+0x14>
 8004de8:	002a      	movs	r2, r5
 8004dea:	42bd      	cmp	r5, r7
 8004dec:	d900      	bls.n	8004df0 <_realloc_r+0x4e>
 8004dee:	003a      	movs	r2, r7
 8004df0:	0021      	movs	r1, r4
 8004df2:	9801      	ldr	r0, [sp, #4]
 8004df4:	f7ff f82e 	bl	8003e54 <memcpy>
 8004df8:	0021      	movs	r1, r4
 8004dfa:	0030      	movs	r0, r6
 8004dfc:	f7ff f834 	bl	8003e68 <_free_r>
 8004e00:	e7f0      	b.n	8004de4 <_realloc_r+0x42>
	...

08004e04 <_strtol_l.isra.0>:
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e06:	b085      	sub	sp, #20
 8004e08:	0017      	movs	r7, r2
 8004e0a:	001e      	movs	r6, r3
 8004e0c:	9003      	str	r0, [sp, #12]
 8004e0e:	9101      	str	r1, [sp, #4]
 8004e10:	2b24      	cmp	r3, #36	@ 0x24
 8004e12:	d823      	bhi.n	8004e5c <_strtol_l.isra.0+0x58>
 8004e14:	000c      	movs	r4, r1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d020      	beq.n	8004e5c <_strtol_l.isra.0+0x58>
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <_strtol_l.isra.0+0x10c>)
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	469c      	mov	ip, r3
 8004e20:	0023      	movs	r3, r4
 8004e22:	4661      	mov	r1, ip
 8004e24:	781d      	ldrb	r5, [r3, #0]
 8004e26:	3401      	adds	r4, #1
 8004e28:	5d48      	ldrb	r0, [r1, r5]
 8004e2a:	0001      	movs	r1, r0
 8004e2c:	4011      	ands	r1, r2
 8004e2e:	4210      	tst	r0, r2
 8004e30:	d1f6      	bne.n	8004e20 <_strtol_l.isra.0+0x1c>
 8004e32:	2d2d      	cmp	r5, #45	@ 0x2d
 8004e34:	d119      	bne.n	8004e6a <_strtol_l.isra.0+0x66>
 8004e36:	7825      	ldrb	r5, [r4, #0]
 8004e38:	1c9c      	adds	r4, r3, #2
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	0033      	movs	r3, r6
 8004e42:	4393      	bics	r3, r2
 8004e44:	d11d      	bne.n	8004e82 <_strtol_l.isra.0+0x7e>
 8004e46:	2d30      	cmp	r5, #48	@ 0x30
 8004e48:	d115      	bne.n	8004e76 <_strtol_l.isra.0+0x72>
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	7823      	ldrb	r3, [r4, #0]
 8004e4e:	438b      	bics	r3, r1
 8004e50:	2b58      	cmp	r3, #88	@ 0x58
 8004e52:	d110      	bne.n	8004e76 <_strtol_l.isra.0+0x72>
 8004e54:	7865      	ldrb	r5, [r4, #1]
 8004e56:	3402      	adds	r4, #2
 8004e58:	2610      	movs	r6, #16
 8004e5a:	e012      	b.n	8004e82 <_strtol_l.isra.0+0x7e>
 8004e5c:	f7fe ffce 	bl	8003dfc <__errno>
 8004e60:	2316      	movs	r3, #22
 8004e62:	6003      	str	r3, [r0, #0]
 8004e64:	2000      	movs	r0, #0
 8004e66:	b005      	add	sp, #20
 8004e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6a:	9100      	str	r1, [sp, #0]
 8004e6c:	2d2b      	cmp	r5, #43	@ 0x2b
 8004e6e:	d1e6      	bne.n	8004e3e <_strtol_l.isra.0+0x3a>
 8004e70:	7825      	ldrb	r5, [r4, #0]
 8004e72:	1c9c      	adds	r4, r3, #2
 8004e74:	e7e3      	b.n	8004e3e <_strtol_l.isra.0+0x3a>
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	d1ee      	bne.n	8004e58 <_strtol_l.isra.0+0x54>
 8004e7a:	360a      	adds	r6, #10
 8004e7c:	2d30      	cmp	r5, #48	@ 0x30
 8004e7e:	d100      	bne.n	8004e82 <_strtol_l.isra.0+0x7e>
 8004e80:	3e02      	subs	r6, #2
 8004e82:	4a24      	ldr	r2, [pc, #144]	@ (8004f14 <_strtol_l.isra.0+0x110>)
 8004e84:	9b00      	ldr	r3, [sp, #0]
 8004e86:	4694      	mov	ip, r2
 8004e88:	4463      	add	r3, ip
 8004e8a:	0031      	movs	r1, r6
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	9302      	str	r3, [sp, #8]
 8004e90:	f7fb f9d2 	bl	8000238 <__aeabi_uidivmod>
 8004e94:	2200      	movs	r2, #0
 8004e96:	4684      	mov	ip, r0
 8004e98:	0010      	movs	r0, r2
 8004e9a:	002b      	movs	r3, r5
 8004e9c:	3b30      	subs	r3, #48	@ 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d811      	bhi.n	8004ec6 <_strtol_l.isra.0+0xc2>
 8004ea2:	001d      	movs	r5, r3
 8004ea4:	42ae      	cmp	r6, r5
 8004ea6:	dd1d      	ble.n	8004ee4 <_strtol_l.isra.0+0xe0>
 8004ea8:	1c53      	adds	r3, r2, #1
 8004eaa:	d009      	beq.n	8004ec0 <_strtol_l.isra.0+0xbc>
 8004eac:	2201      	movs	r2, #1
 8004eae:	4252      	negs	r2, r2
 8004eb0:	4584      	cmp	ip, r0
 8004eb2:	d305      	bcc.n	8004ec0 <_strtol_l.isra.0+0xbc>
 8004eb4:	d101      	bne.n	8004eba <_strtol_l.isra.0+0xb6>
 8004eb6:	42a9      	cmp	r1, r5
 8004eb8:	db11      	blt.n	8004ede <_strtol_l.isra.0+0xda>
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4370      	muls	r0, r6
 8004ebe:	1828      	adds	r0, r5, r0
 8004ec0:	7825      	ldrb	r5, [r4, #0]
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	e7e9      	b.n	8004e9a <_strtol_l.isra.0+0x96>
 8004ec6:	002b      	movs	r3, r5
 8004ec8:	3b41      	subs	r3, #65	@ 0x41
 8004eca:	2b19      	cmp	r3, #25
 8004ecc:	d801      	bhi.n	8004ed2 <_strtol_l.isra.0+0xce>
 8004ece:	3d37      	subs	r5, #55	@ 0x37
 8004ed0:	e7e8      	b.n	8004ea4 <_strtol_l.isra.0+0xa0>
 8004ed2:	002b      	movs	r3, r5
 8004ed4:	3b61      	subs	r3, #97	@ 0x61
 8004ed6:	2b19      	cmp	r3, #25
 8004ed8:	d804      	bhi.n	8004ee4 <_strtol_l.isra.0+0xe0>
 8004eda:	3d57      	subs	r5, #87	@ 0x57
 8004edc:	e7e2      	b.n	8004ea4 <_strtol_l.isra.0+0xa0>
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4252      	negs	r2, r2
 8004ee2:	e7ed      	b.n	8004ec0 <_strtol_l.isra.0+0xbc>
 8004ee4:	1c53      	adds	r3, r2, #1
 8004ee6:	d108      	bne.n	8004efa <_strtol_l.isra.0+0xf6>
 8004ee8:	2322      	movs	r3, #34	@ 0x22
 8004eea:	9a03      	ldr	r2, [sp, #12]
 8004eec:	9802      	ldr	r0, [sp, #8]
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	2f00      	cmp	r7, #0
 8004ef2:	d0b8      	beq.n	8004e66 <_strtol_l.isra.0+0x62>
 8004ef4:	1e63      	subs	r3, r4, #1
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	e007      	b.n	8004f0a <_strtol_l.isra.0+0x106>
 8004efa:	9b00      	ldr	r3, [sp, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d000      	beq.n	8004f02 <_strtol_l.isra.0+0xfe>
 8004f00:	4240      	negs	r0, r0
 8004f02:	2f00      	cmp	r7, #0
 8004f04:	d0af      	beq.n	8004e66 <_strtol_l.isra.0+0x62>
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d1f4      	bne.n	8004ef4 <_strtol_l.isra.0+0xf0>
 8004f0a:	9b01      	ldr	r3, [sp, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	e7aa      	b.n	8004e66 <_strtol_l.isra.0+0x62>
 8004f10:	0800515f 	.word	0x0800515f
 8004f14:	7fffffff 	.word	0x7fffffff

08004f18 <_strtol_r>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	f7ff ff73 	bl	8004e04 <_strtol_l.isra.0>
 8004f1e:	bd10      	pop	{r4, pc}

08004f20 <_strtoul_l.isra.0>:
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	001e      	movs	r6, r3
 8004f24:	4b3e      	ldr	r3, [pc, #248]	@ (8005020 <_strtoul_l.isra.0+0x100>)
 8004f26:	0017      	movs	r7, r2
 8004f28:	000c      	movs	r4, r1
 8004f2a:	469c      	mov	ip, r3
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	b085      	sub	sp, #20
 8004f30:	9003      	str	r0, [sp, #12]
 8004f32:	9100      	str	r1, [sp, #0]
 8004f34:	0023      	movs	r3, r4
 8004f36:	4661      	mov	r1, ip
 8004f38:	781d      	ldrb	r5, [r3, #0]
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	5d48      	ldrb	r0, [r1, r5]
 8004f3e:	0001      	movs	r1, r0
 8004f40:	4011      	ands	r1, r2
 8004f42:	4210      	tst	r0, r2
 8004f44:	d1f6      	bne.n	8004f34 <_strtoul_l.isra.0+0x14>
 8004f46:	2d2d      	cmp	r5, #45	@ 0x2d
 8004f48:	d112      	bne.n	8004f70 <_strtoul_l.isra.0+0x50>
 8004f4a:	7825      	ldrb	r5, [r4, #0]
 8004f4c:	1c9c      	adds	r4, r3, #2
 8004f4e:	2301      	movs	r3, #1
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	2210      	movs	r2, #16
 8004f54:	0033      	movs	r3, r6
 8004f56:	4393      	bics	r3, r2
 8004f58:	d116      	bne.n	8004f88 <_strtoul_l.isra.0+0x68>
 8004f5a:	2d30      	cmp	r5, #48	@ 0x30
 8004f5c:	d10e      	bne.n	8004f7c <_strtoul_l.isra.0+0x5c>
 8004f5e:	2120      	movs	r1, #32
 8004f60:	7823      	ldrb	r3, [r4, #0]
 8004f62:	438b      	bics	r3, r1
 8004f64:	2b58      	cmp	r3, #88	@ 0x58
 8004f66:	d109      	bne.n	8004f7c <_strtoul_l.isra.0+0x5c>
 8004f68:	7865      	ldrb	r5, [r4, #1]
 8004f6a:	3402      	adds	r4, #2
 8004f6c:	2610      	movs	r6, #16
 8004f6e:	e00b      	b.n	8004f88 <_strtoul_l.isra.0+0x68>
 8004f70:	9102      	str	r1, [sp, #8]
 8004f72:	2d2b      	cmp	r5, #43	@ 0x2b
 8004f74:	d1ed      	bne.n	8004f52 <_strtoul_l.isra.0+0x32>
 8004f76:	7825      	ldrb	r5, [r4, #0]
 8004f78:	1c9c      	adds	r4, r3, #2
 8004f7a:	e7ea      	b.n	8004f52 <_strtoul_l.isra.0+0x32>
 8004f7c:	2e00      	cmp	r6, #0
 8004f7e:	d1f5      	bne.n	8004f6c <_strtoul_l.isra.0+0x4c>
 8004f80:	360a      	adds	r6, #10
 8004f82:	2d30      	cmp	r5, #48	@ 0x30
 8004f84:	d100      	bne.n	8004f88 <_strtoul_l.isra.0+0x68>
 8004f86:	3e02      	subs	r6, #2
 8004f88:	2001      	movs	r0, #1
 8004f8a:	0031      	movs	r1, r6
 8004f8c:	4240      	negs	r0, r0
 8004f8e:	f7fb f8cd 	bl	800012c <__udivsi3>
 8004f92:	9001      	str	r0, [sp, #4]
 8004f94:	2001      	movs	r0, #1
 8004f96:	0031      	movs	r1, r6
 8004f98:	4240      	negs	r0, r0
 8004f9a:	f7fb f94d 	bl	8000238 <__aeabi_uidivmod>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	4694      	mov	ip, r2
 8004fa6:	002a      	movs	r2, r5
 8004fa8:	3a30      	subs	r2, #48	@ 0x30
 8004faa:	2a09      	cmp	r2, #9
 8004fac:	d812      	bhi.n	8004fd4 <_strtoul_l.isra.0+0xb4>
 8004fae:	0015      	movs	r5, r2
 8004fb0:	42ae      	cmp	r6, r5
 8004fb2:	dd1e      	ble.n	8004ff2 <_strtoul_l.isra.0+0xd2>
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	d00a      	beq.n	8004fce <_strtoul_l.isra.0+0xae>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	9a01      	ldr	r2, [sp, #4]
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	4282      	cmp	r2, r0
 8004fc0:	d305      	bcc.n	8004fce <_strtoul_l.isra.0+0xae>
 8004fc2:	d101      	bne.n	8004fc8 <_strtoul_l.isra.0+0xa8>
 8004fc4:	42a9      	cmp	r1, r5
 8004fc6:	db11      	blt.n	8004fec <_strtoul_l.isra.0+0xcc>
 8004fc8:	4663      	mov	r3, ip
 8004fca:	4370      	muls	r0, r6
 8004fcc:	1828      	adds	r0, r5, r0
 8004fce:	7825      	ldrb	r5, [r4, #0]
 8004fd0:	3401      	adds	r4, #1
 8004fd2:	e7e8      	b.n	8004fa6 <_strtoul_l.isra.0+0x86>
 8004fd4:	002a      	movs	r2, r5
 8004fd6:	3a41      	subs	r2, #65	@ 0x41
 8004fd8:	2a19      	cmp	r2, #25
 8004fda:	d801      	bhi.n	8004fe0 <_strtoul_l.isra.0+0xc0>
 8004fdc:	3d37      	subs	r5, #55	@ 0x37
 8004fde:	e7e7      	b.n	8004fb0 <_strtoul_l.isra.0+0x90>
 8004fe0:	002a      	movs	r2, r5
 8004fe2:	3a61      	subs	r2, #97	@ 0x61
 8004fe4:	2a19      	cmp	r2, #25
 8004fe6:	d804      	bhi.n	8004ff2 <_strtoul_l.isra.0+0xd2>
 8004fe8:	3d57      	subs	r5, #87	@ 0x57
 8004fea:	e7e1      	b.n	8004fb0 <_strtoul_l.isra.0+0x90>
 8004fec:	2301      	movs	r3, #1
 8004fee:	425b      	negs	r3, r3
 8004ff0:	e7ed      	b.n	8004fce <_strtoul_l.isra.0+0xae>
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	d107      	bne.n	8005006 <_strtoul_l.isra.0+0xe6>
 8004ff6:	2222      	movs	r2, #34	@ 0x22
 8004ff8:	9903      	ldr	r1, [sp, #12]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	600a      	str	r2, [r1, #0]
 8004ffe:	2f00      	cmp	r7, #0
 8005000:	d109      	bne.n	8005016 <_strtoul_l.isra.0+0xf6>
 8005002:	b005      	add	sp, #20
 8005004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005006:	9a02      	ldr	r2, [sp, #8]
 8005008:	2a00      	cmp	r2, #0
 800500a:	d000      	beq.n	800500e <_strtoul_l.isra.0+0xee>
 800500c:	4240      	negs	r0, r0
 800500e:	2f00      	cmp	r7, #0
 8005010:	d0f7      	beq.n	8005002 <_strtoul_l.isra.0+0xe2>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <_strtoul_l.isra.0+0xfa>
 8005016:	1e63      	subs	r3, r4, #1
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	9b00      	ldr	r3, [sp, #0]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	e7f0      	b.n	8005002 <_strtoul_l.isra.0+0xe2>
 8005020:	0800515f 	.word	0x0800515f

08005024 <_strtoul_r>:
 8005024:	b510      	push	{r4, lr}
 8005026:	f7ff ff7b 	bl	8004f20 <_strtoul_l.isra.0>
 800502a:	bd10      	pop	{r4, pc}

0800502c <_malloc_usable_size_r>:
 800502c:	1f0b      	subs	r3, r1, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1f18      	subs	r0, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	da01      	bge.n	800503a <_malloc_usable_size_r+0xe>
 8005036:	580b      	ldr	r3, [r1, r0]
 8005038:	18c0      	adds	r0, r0, r3
 800503a:	4770      	bx	lr

0800503c <_init>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr

08005048 <_fini>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr
