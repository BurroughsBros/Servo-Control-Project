
PD_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003554  08003554  00004554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800359c  0800359c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800359c  0800359c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800359c  0800359c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035a0  080035a0  000045a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  080035b0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080035b0  00005218  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d245  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa7  00000000  00000000  00012279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00014220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098e  00000000  00000000  00014e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a589  00000000  00000000  000157e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001053d  00000000  00000000  0002fd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988f7  00000000  00000000  000402ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b0c  00000000  00000000  000d8be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000db6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800353c 	.word	0x0800353c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800353c 	.word	0x0800353c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_GPIO_Init+0x2c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <MX_GPIO_Init+0x2c>)
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	0289      	lsls	r1, r1, #10
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <MX_GPIO_Init+0x2c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	029b      	lsls	r3, r3, #10
 800024c:	4013      	ands	r3, r2
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	40021000 	.word	0x40021000

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b09f      	sub	sp, #124	@ 0x7c
 8000264:	af1e      	add	r7, sp, #120	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fbbd 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f845 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f7ff ffdf 	bl	8000230 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000272:	f000 f941 	bl	80004f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000276:	f000 fa03 	bl	8000680 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800027a:	f000 fb0d 	bl	8000898 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Initializing
  motor_initEncoder(htim2);
 800027e:	4c19      	ldr	r4, [pc, #100]	@ (80002e4 <main+0x84>)
 8000280:	466b      	mov	r3, sp
 8000282:	0018      	movs	r0, r3
 8000284:	0023      	movs	r3, r4
 8000286:	3310      	adds	r3, #16
 8000288:	2238      	movs	r2, #56	@ 0x38
 800028a:	0019      	movs	r1, r3
 800028c:	f003 f94c 	bl	8003528 <memcpy>
 8000290:	6820      	ldr	r0, [r4, #0]
 8000292:	6861      	ldr	r1, [r4, #4]
 8000294:	68a2      	ldr	r2, [r4, #8]
 8000296:	68e3      	ldr	r3, [r4, #12]
 8000298:	f000 f88c 	bl	80003b4 <motor_initEncoder>
//  motor_initPWM(htim1);
  terminal_init(huart2);
 800029c:	4c12      	ldr	r4, [pc, #72]	@ (80002e8 <main+0x88>)
 800029e:	466b      	mov	r3, sp
 80002a0:	0018      	movs	r0, r3
 80002a2:	0023      	movs	r3, r4
 80002a4:	3310      	adds	r3, #16
 80002a6:	2278      	movs	r2, #120	@ 0x78
 80002a8:	0019      	movs	r1, r3
 80002aa:	f003 f93d 	bl	8003528 <memcpy>
 80002ae:	6820      	ldr	r0, [r4, #0]
 80002b0:	6861      	ldr	r1, [r4, #4]
 80002b2:	68a2      	ldr	r2, [r4, #8]
 80002b4:	68e3      	ldr	r3, [r4, #12]
 80002b6:	f000 f8ed 	bl	8000494 <terminal_init>

  terminal_print("Hello World!\r\n");
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <main+0x8c>)
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f903 	bl	80004c8 <terminal_print>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <main+0x90>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fcb4 	bl	8001c34 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <main+0x90>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	22fa      	movs	r2, #250	@ 0xfa
 80002d2:	0052      	lsls	r2, r2, #1
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34

  while (1)
  {
	  x = motor_getCount();
 80002d6:	f000 f891 	bl	80003fc <motor_getCount>
 80002da:	0002      	movs	r2, r0
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <main+0x94>)
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	e7f9      	b.n	80002d6 <main+0x76>
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	20000144 	.word	0x20000144
 80002e8:	2000018c 	.word	0x2000018c
 80002ec:	08003554 	.word	0x08003554
 80002f0:	200000fc 	.word	0x200000fc
 80002f4:	20000028 	.word	0x20000028

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b099      	sub	sp, #100	@ 0x64
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	242c      	movs	r4, #44	@ 0x2c
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	2334      	movs	r3, #52	@ 0x34
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f003 f8e1 	bl	80034d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030e:	231c      	movs	r3, #28
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	2310      	movs	r3, #16
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f003 f8d9 	bl	80034d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	231c      	movs	r3, #28
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f003 f8d2 	bl	80034d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	0021      	movs	r1, r4
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2201      	movs	r2, #1
 8000338:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2210      	movs	r2, #16
 800033e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	187b      	adds	r3, r7, r1
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fddb 	bl	8000f04 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000352:	f000 f828 	bl	80003a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	211c      	movs	r1, #28
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2100      	movs	r1, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f001 f94b 	bl	8001610 <HAL_RCC_ClockConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800037e:	f000 f812 	bl	80003a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000382:	003b      	movs	r3, r7
 8000384:	2202      	movs	r2, #2
 8000386:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000388:	003b      	movs	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038e:	003b      	movs	r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	f001 faa9 	bl	80018e8 <HAL_RCCEx_PeriphCLKConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800039a:	f000 f804 	bl	80003a6 <Error_Handler>
  }
}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b019      	add	sp, #100	@ 0x64
 80003a4:	bd90      	pop	{r4, r7, pc}

080003a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003aa:	b672      	cpsid	i
}
 80003ac:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	e7fd      	b.n	80003ae <Error_Handler+0x8>
	...

080003b4 <motor_initEncoder>:
TIM_HandleTypeDef encoderHandle;
TIM_HandleTypeDef PWMHandle;
int timmerChannel1 = 0;
int timmerChannel2 = 0;

void motor_initEncoder(TIM_HandleTypeDef timmerHandler){
 80003b4:	b084      	sub	sp, #16
 80003b6:	b5b0      	push	{r4, r5, r7, lr}
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	2510      	movs	r5, #16
 80003bc:	197c      	adds	r4, r7, r5
 80003be:	6020      	str	r0, [r4, #0]
 80003c0:	6061      	str	r1, [r4, #4]
 80003c2:	60a2      	str	r2, [r4, #8]
 80003c4:	60e3      	str	r3, [r4, #12]
	encoderHandle = timmerHandler;
 80003c6:	4a0c      	ldr	r2, [pc, #48]	@ (80003f8 <motor_initEncoder+0x44>)
 80003c8:	197b      	adds	r3, r7, r5
 80003ca:	0010      	movs	r0, r2
 80003cc:	0019      	movs	r1, r3
 80003ce:	2348      	movs	r3, #72	@ 0x48
 80003d0:	001a      	movs	r2, r3
 80003d2:	f003 f8a9 	bl	8003528 <memcpy>
	HAL_TIM_Encoder_Start(&encoderHandle, 1);
 80003d6:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <motor_initEncoder+0x44>)
 80003d8:	2101      	movs	r1, #1
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fd8a 	bl	8001ef4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&encoderHandle, 2);
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <motor_initEncoder+0x44>)
 80003e2:	2102      	movs	r1, #2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fd85 	bl	8001ef4 <HAL_TIM_Encoder_Start>
}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bcb0      	pop	{r4, r5, r7}
 80003f0:	bc08      	pop	{r3}
 80003f2:	b004      	add	sp, #16
 80003f4:	4718      	bx	r3
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	2000002c 	.word	0x2000002c

080003fc <motor_getCount>:
}
void motor_PWMSetBackward(int x){
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel1, 0);
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, x);
}
int motor_getCount(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&encoderHandle);
 8000400:	4b02      	ldr	r3, [pc, #8]	@ (800040c <motor_getCount+0x10>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000406:	0018      	movs	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000002c 	.word	0x2000002c

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <HAL_MspInit+0x44>)
 8000418:	699a      	ldr	r2, [r3, #24]
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <HAL_MspInit+0x44>)
 800041c:	2101      	movs	r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	619a      	str	r2, [r3, #24]
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <HAL_MspInit+0x44>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <HAL_MspInit+0x44>)
 8000430:	69da      	ldr	r2, [r3, #28]
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <HAL_MspInit+0x44>)
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	0549      	lsls	r1, r1, #21
 8000438:	430a      	orrs	r2, r1
 800043a:	61da      	str	r2, [r3, #28]
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <HAL_MspInit+0x44>)
 800043e:	69da      	ldr	r2, [r3, #28]
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	055b      	lsls	r3, r3, #21
 8000444:	4013      	ands	r3, r2
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	40021000 	.word	0x40021000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	e7fd      	b.n	800045c <NMI_Handler+0x4>

08000460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	e7fd      	b.n	8000464 <HardFault_Handler+0x4>

08000468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 faf8 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <terminal_init>:
UART_HandleTypeDef terminal_uart;

// Structures

// Functions
void terminal_init(UART_HandleTypeDef huart){
 8000494:	b084      	sub	sp, #16
 8000496:	b5b0      	push	{r4, r5, r7, lr}
 8000498:	af00      	add	r7, sp, #0
 800049a:	2510      	movs	r5, #16
 800049c:	197c      	adds	r4, r7, r5
 800049e:	6020      	str	r0, [r4, #0]
 80004a0:	6061      	str	r1, [r4, #4]
 80004a2:	60a2      	str	r2, [r4, #8]
 80004a4:	60e3      	str	r3, [r4, #12]
	terminal_uart = huart;
 80004a6:	4a07      	ldr	r2, [pc, #28]	@ (80004c4 <terminal_init+0x30>)
 80004a8:	197b      	adds	r3, r7, r5
 80004aa:	0010      	movs	r0, r2
 80004ac:	0019      	movs	r1, r3
 80004ae:	2388      	movs	r3, #136	@ 0x88
 80004b0:	001a      	movs	r2, r3
 80004b2:	f003 f839 	bl	8003528 <memcpy>
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bcb0      	pop	{r4, r5, r7}
 80004bc:	bc08      	pop	{r3}
 80004be:	b004      	add	sp, #16
 80004c0:	4718      	bx	r3
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	20000074 	.word	0x20000074

080004c8 <terminal_print>:
		  rxBuff[i+1] = '\n';
		  break;
	  }
	}
}
void terminal_print(char *txBuff){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// Has to be null terminated!
	size_t len = strlen((char*)txBuff);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	0018      	movs	r0, r3
 80004d4:	f7ff fe18 	bl	8000108 <strlen>
 80004d8:	0003      	movs	r3, r0
 80004da:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&terminal_uart, txBuff, len, TIMEOUT);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <terminal_print+0x2c>)
 80004e8:	f002 fb9a 	bl	8002c20 <HAL_UART_Transmit>
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b004      	add	sp, #16
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000074 	.word	0x20000074

080004f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	@ 0x58
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fe:	2348      	movs	r3, #72	@ 0x48
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2310      	movs	r3, #16
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 ffe1 	bl	80034d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050e:	2340      	movs	r3, #64	@ 0x40
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2308      	movs	r3, #8
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 ffd9 	bl	80034d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051e:	2324      	movs	r3, #36	@ 0x24
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	231c      	movs	r3, #28
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f002 ffd1 	bl	80034d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	0018      	movs	r0, r3
 8000532:	2320      	movs	r3, #32
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f002 ffca 	bl	80034d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800053c:	4b4d      	ldr	r3, [pc, #308]	@ (8000674 <MX_TIM1_Init+0x17c>)
 800053e:	4a4e      	ldr	r2, [pc, #312]	@ (8000678 <MX_TIM1_Init+0x180>)
 8000540:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000542:	4b4c      	ldr	r3, [pc, #304]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	4b4a      	ldr	r3, [pc, #296]	@ (8000674 <MX_TIM1_Init+0x17c>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800054e:	4b49      	ldr	r3, [pc, #292]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000550:	4a4a      	ldr	r2, [pc, #296]	@ (800067c <MX_TIM1_Init+0x184>)
 8000552:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b47      	ldr	r3, [pc, #284]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800055a:	4b46      	ldr	r3, [pc, #280]	@ (8000674 <MX_TIM1_Init+0x17c>)
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000560:	4b44      	ldr	r3, [pc, #272]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000566:	4b43      	ldr	r3, [pc, #268]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fabb 	bl	8001ae4 <HAL_TIM_Base_Init>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000572:	f7ff ff18 	bl	80003a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000576:	2148      	movs	r1, #72	@ 0x48
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	0152      	lsls	r2, r2, #5
 800057e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000580:	187a      	adds	r2, r7, r1
 8000582:	4b3c      	ldr	r3, [pc, #240]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fe1e 	bl	80021c8 <HAL_TIM_ConfigClockSource>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000590:	f7ff ff09 	bl	80003a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000594:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 faf4 	bl	8001b84 <HAL_TIM_PWM_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005a0:	f7ff ff01 	bl	80003a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005b2:	187a      	adds	r2, r7, r1
 80005b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000674 <MX_TIM1_Init+0x17c>)
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fa21 	bl	8002a00 <HAL_TIMEx_MasterConfigSynchronization>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80005c2:	f7ff fef0 	bl	80003a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c6:	2124      	movs	r1, #36	@ 0x24
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2260      	movs	r2, #96	@ 0x60
 80005cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	22fa      	movs	r2, #250	@ 0xfa
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f4:	1879      	adds	r1, r7, r1
 80005f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_TIM1_Init+0x17c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fd1e 	bl	800203c <HAL_TIM_PWM_ConfigChannel>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000604:	f7ff fecf 	bl	80003a6 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000608:	2124      	movs	r1, #36	@ 0x24
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000610:	1879      	adds	r1, r7, r1
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000614:	2204      	movs	r2, #4
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fd10 	bl	800203c <HAL_TIM_PWM_ConfigChannel>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000620:	f7ff fec1 	bl	80003a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2280      	movs	r2, #128	@ 0x80
 8000646:	0192      	lsls	r2, r2, #6
 8000648:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fa30 	bl	8002abc <HAL_TIMEx_ConfigBreakDeadTime>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8000660:	f7ff fea1 	bl	80003a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <MX_TIM1_Init+0x17c>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 f8d6 	bl	8000818 <HAL_TIM_MspPostInit>

}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b016      	add	sp, #88	@ 0x58
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000fc 	.word	0x200000fc
 8000678:	40012c00 	.word	0x40012c00
 800067c:	000003ff 	.word	0x000003ff

08000680 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08d      	sub	sp, #52	@ 0x34
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000686:	240c      	movs	r4, #12
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2324      	movs	r3, #36	@ 0x24
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f002 ff1d 	bl	80034d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	2308      	movs	r3, #8
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 ff16 	bl	80034d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a4:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <MX_TIM2_Init+0xc0>)
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	05d2      	lsls	r2, r2, #23
 80006aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_TIM2_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_TIM2_Init+0xc0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_TIM2_Init+0xc0>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	4252      	negs	r2, r2
 80006be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_TIM2_Init+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_TIM2_Init+0xc0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006cc:	0021      	movs	r1, r4
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2201      	movs	r2, #1
 80006f6:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000704:	187a      	adds	r2, r7, r1
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_TIM2_Init+0xc0>)
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fb4a 	bl	8001da4 <HAL_TIM_Encoder_Init>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000714:	f7ff fe47 	bl	80003a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000724:	1d3a      	adds	r2, r7, #4
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_TIM2_Init+0xc0>)
 8000728:	0011      	movs	r1, r2
 800072a:	0018      	movs	r0, r3
 800072c:	f002 f968 	bl	8002a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000734:	f7ff fe37 	bl	80003a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b00d      	add	sp, #52	@ 0x34
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	20000144 	.word	0x20000144

08000744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <HAL_TIM_Base_MspInit+0x38>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10d      	bne.n	8000772 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_TIM_Base_MspInit+0x3c>)
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_TIM_Base_MspInit+0x3c>)
 800075c:	2180      	movs	r1, #128	@ 0x80
 800075e:	0109      	lsls	r1, r1, #4
 8000760:	430a      	orrs	r2, r1
 8000762:	619a      	str	r2, [r3, #24]
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_TIM_Base_MspInit+0x3c>)
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	2380      	movs	r3, #128	@ 0x80
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	4013      	ands	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	40012c00 	.word	0x40012c00
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08b      	sub	sp, #44	@ 0x2c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2414      	movs	r4, #20
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fe9a 	bl	80034d0 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d130      	bne.n	800080a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_TIM_Encoder_MspInit+0x90>)
 80007aa:	69da      	ldr	r2, [r3, #28]
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <HAL_TIM_Encoder_MspInit+0x90>)
 80007ae:	2101      	movs	r1, #1
 80007b0:	430a      	orrs	r2, r1
 80007b2:	61da      	str	r2, [r3, #28]
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_TIM_Encoder_MspInit+0x90>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	2201      	movs	r2, #1
 80007ba:	4013      	ands	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_TIM_Encoder_MspInit+0x90>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <HAL_TIM_Encoder_MspInit+0x90>)
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	0289      	lsls	r1, r1, #10
 80007ca:	430a      	orrs	r2, r1
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_TIM_Encoder_MspInit+0x90>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	2380      	movs	r3, #128	@ 0x80
 80007d4:	029b      	lsls	r3, r3, #10
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODE_A_Pin|ENCODE_B_Pin;
 80007dc:	0021      	movs	r1, r4
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2203      	movs	r2, #3
 80007e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	187a      	adds	r2, r7, r1
 80007fe:	2390      	movs	r3, #144	@ 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fa05 	bl	8000c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b00b      	add	sp, #44	@ 0x2c
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	@ 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	240c      	movs	r4, #12
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	2314      	movs	r3, #20
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f002 fe50 	bl	80034d0 <memset>
  if(timHandle->Instance==TIM1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <HAL_TIM_MspPostInit+0x78>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d125      	bne.n	8000886 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <HAL_TIM_MspPostInit+0x7c>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_TIM_MspPostInit+0x7c>)
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	0289      	lsls	r1, r1, #10
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_TIM_MspPostInit+0x7c>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	029b      	lsls	r3, r3, #10
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	22c0      	movs	r2, #192	@ 0xc0
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2202      	movs	r2, #2
 8000864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	187a      	adds	r2, r7, r1
 800087a:	2390      	movs	r3, #144	@ 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f9c7 	bl	8000c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	40012c00 	.word	0x40012c00
 8000894:	40021000 	.word	0x40021000

08000898 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	2296      	movs	r2, #150	@ 0x96
 80008a6:	0192      	lsls	r2, r2, #6
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 f94b 	bl	8002b78 <HAL_UART_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f7ff fd5e 	bl	80003a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000018c 	.word	0x2000018c
 80008f4:	40004400 	.word	0x40004400

080008f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08b      	sub	sp, #44	@ 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	2414      	movs	r4, #20
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fde0 	bl	80034d0 <memset>
  if(uartHandle->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <HAL_UART_MspInit+0x90>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d132      	bne.n	8000980 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <HAL_UART_MspInit+0x94>)
 800091c:	69da      	ldr	r2, [r3, #28]
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <HAL_UART_MspInit+0x94>)
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	0289      	lsls	r1, r1, #10
 8000924:	430a      	orrs	r2, r1
 8000926:	61da      	str	r2, [r3, #28]
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <HAL_UART_MspInit+0x94>)
 800092a:	69da      	ldr	r2, [r3, #28]
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	029b      	lsls	r3, r3, #10
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <HAL_UART_MspInit+0x94>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <HAL_UART_MspInit+0x94>)
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	0289      	lsls	r1, r1, #10
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <HAL_UART_MspInit+0x94>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	@ 0x80
 800094a:	029b      	lsls	r3, r3, #10
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	0021      	movs	r1, r4
 8000954:	187b      	adds	r3, r7, r1
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2203      	movs	r2, #3
 800096a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	187a      	adds	r2, r7, r1
 8000974:	2390      	movs	r3, #144	@ 0x90
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f94a 	bl	8000c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b00b      	add	sp, #44	@ 0x2c
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000994:	f7ff fd79 	bl	800048a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	@ (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009be:	f002 fd8f 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fc4d 	bl	8000260 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d4:	080035a4 	.word	0x080035a4
  ldr r2, =_sbss
 80009d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009dc:	20000218 	.word	0x20000218

080009e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_COMP_IRQHandler>
	...

080009e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <HAL_Init+0x24>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_Init+0x24>)
 80009ee:	2110      	movs	r1, #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f809 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fa:	f7ff fd09 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_InitTick+0x5c>)
 8000a16:	681c      	ldr	r4, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	23fa      	movs	r3, #250	@ 0xfa
 8000a20:	0098      	lsls	r0, r3, #2
 8000a22:	f7ff fb79 	bl	8000118 <__udivsi3>
 8000a26:	0003      	movs	r3, r0
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f7ff fb74 	bl	8000118 <__udivsi3>
 8000a30:	0003      	movs	r3, r0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f8e1 	bl	8000bfa <HAL_SYSTICK_Config>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e00f      	b.n	8000a60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d80b      	bhi.n	8000a5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	425b      	negs	r3, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f8be 	bl	8000bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_InitTick+0x64>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	18d2      	adds	r2, r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000214 	.word	0x20000214

08000a98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	@ (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	20000214 	.word	0x20000214

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ac0:	d828      	bhi.n	8000b14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8000b80 <__NVIC_SetPriority+0xd4>)
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	33c0      	adds	r3, #192	@ 0xc0
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	589b      	ldr	r3, [r3, r2]
 8000ad2:	1dfa      	adds	r2, r7, #7
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	2203      	movs	r2, #3
 8000ada:	400a      	ands	r2, r1
 8000adc:	00d2      	lsls	r2, r2, #3
 8000ade:	21ff      	movs	r1, #255	@ 0xff
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	22ff      	movs	r2, #255	@ 0xff
 8000af0:	401a      	ands	r2, r3
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0018      	movs	r0, r3
 8000af8:	2303      	movs	r3, #3
 8000afa:	4003      	ands	r3, r0
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	481f      	ldr	r0, [pc, #124]	@ (8000b80 <__NVIC_SetPriority+0xd4>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	33c0      	adds	r3, #192	@ 0xc0
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b12:	e031      	b.n	8000b78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b14:	4a1b      	ldr	r2, [pc, #108]	@ (8000b84 <__NVIC_SetPriority+0xd8>)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	400b      	ands	r3, r1
 8000b20:	3b08      	subs	r3, #8
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	3306      	adds	r3, #6
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	1dfa      	adds	r2, r7, #7
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	400a      	ands	r2, r1
 8000b38:	00d2      	lsls	r2, r2, #3
 8000b3a:	21ff      	movs	r1, #255	@ 0xff
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	000a      	movs	r2, r1
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	401a      	ands	r2, r3
 8000b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	22ff      	movs	r2, #255	@ 0xff
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	2303      	movs	r3, #3
 8000b56:	4003      	ands	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	001c      	movs	r4, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	4023      	ands	r3, r4
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	3306      	adds	r3, #6
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	18c3      	adds	r3, r0, r3
 8000b74:	3304      	adds	r3, #4
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	045b      	lsls	r3, r3, #17
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d301      	bcc.n	8000ba0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e010      	b.n	8000bc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <SysTick_Config+0x44>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba8:	2301      	movs	r3, #1
 8000baa:	425b      	negs	r3, r3
 8000bac:	2103      	movs	r1, #3
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff ff7c 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <SysTick_Config+0x44>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <SysTick_Config+0x44>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	210f      	movs	r1, #15
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	1c02      	adds	r2, r0, #0
 8000be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ffbf 	bl	8000b88 <SysTick_Config>
 8000c0a:	0003      	movs	r3, r0
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	e155      	b.n	8000ed0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d100      	bne.n	8000c3c <HAL_GPIO_Init+0x28>
 8000c3a:	e146      	b.n	8000eca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d005      	beq.n	8000c54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d130      	bne.n	8000cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	43da      	mvns	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d017      	beq.n	8000cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d123      	bne.n	8000d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	58d3      	ldr	r3, [r2, r3]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2207      	movs	r2, #7
 8000d10:	4013      	ands	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2107      	movs	r1, #7
 8000d2a:	400b      	ands	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	6939      	ldr	r1, [r7, #16]
 8000d44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2203      	movs	r2, #3
 8000d64:	401a      	ands	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	23c0      	movs	r3, #192	@ 0xc0
 8000d80:	029b      	lsls	r3, r3, #10
 8000d82:	4013      	ands	r3, r2
 8000d84:	d100      	bne.n	8000d88 <HAL_GPIO_Init+0x174>
 8000d86:	e0a0      	b.n	8000eca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	4b57      	ldr	r3, [pc, #348]	@ (8000ee8 <HAL_GPIO_Init+0x2d4>)
 8000d8a:	699a      	ldr	r2, [r3, #24]
 8000d8c:	4b56      	ldr	r3, [pc, #344]	@ (8000ee8 <HAL_GPIO_Init+0x2d4>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	430a      	orrs	r2, r1
 8000d92:	619a      	str	r2, [r3, #24]
 8000d94:	4b54      	ldr	r3, [pc, #336]	@ (8000ee8 <HAL_GPIO_Init+0x2d4>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da0:	4a52      	ldr	r2, [pc, #328]	@ (8000eec <HAL_GPIO_Init+0x2d8>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	589b      	ldr	r3, [r3, r2]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4013      	ands	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	409a      	lsls	r2, r3
 8000dba:	0013      	movs	r3, r2
 8000dbc:	43da      	mvns	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	2390      	movs	r3, #144	@ 0x90
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x1ee>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a47      	ldr	r2, [pc, #284]	@ (8000ef0 <HAL_GPIO_Init+0x2dc>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x1ea>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a46      	ldr	r2, [pc, #280]	@ (8000ef4 <HAL_GPIO_Init+0x2e0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x1e6>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a45      	ldr	r2, [pc, #276]	@ (8000ef8 <HAL_GPIO_Init+0x2e4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x1e2>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a44      	ldr	r2, [pc, #272]	@ (8000efc <HAL_GPIO_Init+0x2e8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x1de>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000df2:	2305      	movs	r3, #5
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000e02:	2300      	movs	r3, #0
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	2103      	movs	r1, #3
 8000e08:	400a      	ands	r2, r1
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	@ (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b37      	ldr	r3, [pc, #220]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	035b      	lsls	r3, r3, #13
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e46:	4b2e      	ldr	r3, [pc, #184]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	039b      	lsls	r3, r3, #14
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	1e13      	subs	r3, r2, #0
 8000eda:	d000      	beq.n	8000ede <HAL_GPIO_Init+0x2ca>
 8000edc:	e6a2      	b.n	8000c24 <HAL_GPIO_Init+0x10>
  } 
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b006      	add	sp, #24
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000c00 	.word	0x48000c00
 8000efc:	48001000 	.word	0x48001000
 8000f00:	40010400 	.word	0x40010400

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f000 fb76 	bl	8001604 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_RCC_OscConfig+0x20>
 8000f22:	e08e      	b.n	8001042 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f24:	4bc5      	ldr	r3, [pc, #788]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	220c      	movs	r2, #12
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d00e      	beq.n	8000f4e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f30:	4bc2      	ldr	r3, [pc, #776]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	220c      	movs	r2, #12
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d117      	bne.n	8000f6c <HAL_RCC_OscConfig+0x68>
 8000f3c:	4bbf      	ldr	r3, [pc, #764]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	23c0      	movs	r3, #192	@ 0xc0
 8000f42:	025b      	lsls	r3, r3, #9
 8000f44:	401a      	ands	r2, r3
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d10e      	bne.n	8000f6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	4bbb      	ldr	r3, [pc, #748]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	029b      	lsls	r3, r3, #10
 8000f56:	4013      	ands	r3, r2
 8000f58:	d100      	bne.n	8000f5c <HAL_RCC_OscConfig+0x58>
 8000f5a:	e071      	b.n	8001040 <HAL_RCC_OscConfig+0x13c>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d000      	beq.n	8000f66 <HAL_RCC_OscConfig+0x62>
 8000f64:	e06c      	b.n	8001040 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f000 fb4c 	bl	8001604 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d107      	bne.n	8000f84 <HAL_RCC_OscConfig+0x80>
 8000f74:	4bb1      	ldr	r3, [pc, #708]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4bb0      	ldr	r3, [pc, #704]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	0249      	lsls	r1, r1, #9
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e02f      	b.n	8000fe4 <HAL_RCC_OscConfig+0xe0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0xa2>
 8000f8c:	4bab      	ldr	r3, [pc, #684]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4baa      	ldr	r3, [pc, #680]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f92:	49ab      	ldr	r1, [pc, #684]	@ (8001240 <HAL_RCC_OscConfig+0x33c>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	4ba8      	ldr	r3, [pc, #672]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4ba7      	ldr	r3, [pc, #668]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f9e:	49a9      	ldr	r1, [pc, #676]	@ (8001244 <HAL_RCC_OscConfig+0x340>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e01e      	b.n	8000fe4 <HAL_RCC_OscConfig+0xe0>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d10e      	bne.n	8000fcc <HAL_RCC_OscConfig+0xc8>
 8000fae:	4ba3      	ldr	r3, [pc, #652]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4ba2      	ldr	r3, [pc, #648]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	02c9      	lsls	r1, r1, #11
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	4b9f      	ldr	r3, [pc, #636]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b9e      	ldr	r3, [pc, #632]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fc2:	2180      	movs	r1, #128	@ 0x80
 8000fc4:	0249      	lsls	r1, r1, #9
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0xe0>
 8000fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b9a      	ldr	r3, [pc, #616]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fd2:	499b      	ldr	r1, [pc, #620]	@ (8001240 <HAL_RCC_OscConfig+0x33c>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	4b98      	ldr	r3, [pc, #608]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b97      	ldr	r3, [pc, #604]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fde:	4999      	ldr	r1, [pc, #612]	@ (8001244 <HAL_RCC_OscConfig+0x340>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d014      	beq.n	8001016 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fd54 	bl	8000a98 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fd4f 	bl	8000a98 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	@ 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e2fd      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001008:	4b8c      	ldr	r3, [pc, #560]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	029b      	lsls	r3, r3, #10
 8001010:	4013      	ands	r3, r2
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0xf2>
 8001014:	e015      	b.n	8001042 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fd3f 	bl	8000a98 <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fd3a 	bl	8000a98 <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	@ 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e2e8      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b82      	ldr	r3, [pc, #520]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	029b      	lsls	r3, r3, #10
 800103a:	4013      	ands	r3, r2
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x11c>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2202      	movs	r2, #2
 8001048:	4013      	ands	r3, r2
 800104a:	d100      	bne.n	800104e <HAL_RCC_OscConfig+0x14a>
 800104c:	e06c      	b.n	8001128 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800104e:	4b7b      	ldr	r3, [pc, #492]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	220c      	movs	r2, #12
 8001054:	4013      	ands	r3, r2
 8001056:	d00e      	beq.n	8001076 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001058:	4b78      	ldr	r3, [pc, #480]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	220c      	movs	r2, #12
 800105e:	4013      	ands	r3, r2
 8001060:	2b08      	cmp	r3, #8
 8001062:	d11f      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1a0>
 8001064:	4b75      	ldr	r3, [pc, #468]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	23c0      	movs	r3, #192	@ 0xc0
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	401a      	ands	r2, r3
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	429a      	cmp	r2, r3
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b71      	ldr	r3, [pc, #452]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d005      	beq.n	800108c <HAL_RCC_OscConfig+0x188>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d001      	beq.n	800108c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e2bb      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b6b      	ldr	r3, [pc, #428]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22f8      	movs	r2, #248	@ 0xf8
 8001092:	4393      	bics	r3, r2
 8001094:	0019      	movs	r1, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00da      	lsls	r2, r3, #3
 800109c:	4b67      	ldr	r3, [pc, #412]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e041      	b.n	8001128 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d024      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b63      	ldr	r3, [pc, #396]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b62      	ldr	r3, [pc, #392]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fcee 	bl	8000a98 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fce9 	bl	8000a98 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e297      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4b59      	ldr	r3, [pc, #356]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d0f1      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4b57      	ldr	r3, [pc, #348]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	22f8      	movs	r2, #248	@ 0xf8
 80010e4:	4393      	bics	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	00da      	lsls	r2, r3, #3
 80010ee:	4b53      	ldr	r3, [pc, #332]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e018      	b.n	8001128 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b51      	ldr	r3, [pc, #324]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b50      	ldr	r3, [pc, #320]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fcc9 	bl	8000a98 <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fcc4 	bl	8000a98 <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e272      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	4b47      	ldr	r3, [pc, #284]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d1f1      	bne.n	800110c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2208      	movs	r2, #8
 800112e:	4013      	ands	r3, r2
 8001130:	d036      	beq.n	80011a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d019      	beq.n	800116e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113a:	4b40      	ldr	r3, [pc, #256]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800113c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001140:	2101      	movs	r1, #1
 8001142:	430a      	orrs	r2, r1
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fca7 	bl	8000a98 <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fca2 	bl	8000a98 <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e250      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	4b36      	ldr	r3, [pc, #216]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d0f1      	beq.n	8001150 <HAL_RCC_OscConfig+0x24c>
 800116c:	e018      	b.n	80011a0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b33      	ldr	r3, [pc, #204]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001172:	4b32      	ldr	r3, [pc, #200]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fc8d 	bl	8000a98 <HAL_GetTick>
 800117e:	0003      	movs	r3, r0
 8001180:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fc88 	bl	8000a98 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e236      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	2202      	movs	r2, #2
 800119c:	4013      	ands	r3, r2
 800119e:	d1f1      	bne.n	8001184 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2204      	movs	r2, #4
 80011a6:	4013      	ands	r3, r2
 80011a8:	d100      	bne.n	80011ac <HAL_RCC_OscConfig+0x2a8>
 80011aa:	e0b5      	b.n	8001318 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ac:	201f      	movs	r0, #31
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	055b      	lsls	r3, r3, #21
 80011bc:	4013      	ands	r3, r2
 80011be:	d110      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011c2:	69da      	ldr	r2, [r3, #28]
 80011c4:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011c6:	2180      	movs	r1, #128	@ 0x80
 80011c8:	0549      	lsls	r1, r1, #21
 80011ca:	430a      	orrs	r2, r1
 80011cc:	61da      	str	r2, [r3, #28]
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011d0:	69da      	ldr	r2, [r3, #28]
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	055b      	lsls	r3, r3, #21
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011dc:	183b      	adds	r3, r7, r0
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_RCC_OscConfig+0x344>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	d11a      	bne.n	8001224 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_RCC_OscConfig+0x344>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_RCC_OscConfig+0x344>)
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	0049      	lsls	r1, r1, #1
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc4c 	bl	8000a98 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001206:	f7ff fc47 	bl	8000a98 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	@ 0x64
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1f5      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_RCC_OscConfig+0x344>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4013      	ands	r3, r2
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10f      	bne.n	800124c <HAL_RCC_OscConfig+0x348>
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800122e:	6a1a      	ldr	r2, [r3, #32]
 8001230:	4b02      	ldr	r3, [pc, #8]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001232:	2101      	movs	r1, #1
 8001234:	430a      	orrs	r2, r1
 8001236:	621a      	str	r2, [r3, #32]
 8001238:	e036      	b.n	80012a8 <HAL_RCC_OscConfig+0x3a4>
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	40021000 	.word	0x40021000
 8001240:	fffeffff 	.word	0xfffeffff
 8001244:	fffbffff 	.word	0xfffbffff
 8001248:	40007000 	.word	0x40007000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <HAL_RCC_OscConfig+0x36a>
 8001254:	4bca      	ldr	r3, [pc, #808]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	4bc9      	ldr	r3, [pc, #804]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	621a      	str	r2, [r3, #32]
 8001260:	4bc7      	ldr	r3, [pc, #796]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	4bc6      	ldr	r3, [pc, #792]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001266:	2104      	movs	r1, #4
 8001268:	438a      	bics	r2, r1
 800126a:	621a      	str	r2, [r3, #32]
 800126c:	e01c      	b.n	80012a8 <HAL_RCC_OscConfig+0x3a4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x38c>
 8001276:	4bc2      	ldr	r3, [pc, #776]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	4bc1      	ldr	r3, [pc, #772]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800127c:	2104      	movs	r1, #4
 800127e:	430a      	orrs	r2, r1
 8001280:	621a      	str	r2, [r3, #32]
 8001282:	4bbf      	ldr	r3, [pc, #764]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001284:	6a1a      	ldr	r2, [r3, #32]
 8001286:	4bbe      	ldr	r3, [pc, #760]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	621a      	str	r2, [r3, #32]
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0x3a4>
 8001290:	4bbb      	ldr	r3, [pc, #748]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4bba      	ldr	r3, [pc, #744]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001296:	2101      	movs	r1, #1
 8001298:	438a      	bics	r2, r1
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	4bb8      	ldr	r3, [pc, #736]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	4bb7      	ldr	r3, [pc, #732]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	2104      	movs	r1, #4
 80012a4:	438a      	bics	r2, r1
 80012a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d014      	beq.n	80012da <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fbf2 	bl	8000a98 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	e009      	b.n	80012ce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fbed 	bl	8000a98 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	4aaf      	ldr	r2, [pc, #700]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e19a      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ce:	4bac      	ldr	r3, [pc, #688]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x3b6>
 80012d8:	e013      	b.n	8001302 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fbdd 	bl	8000a98 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e2:	e009      	b.n	80012f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff fbd8 	bl	8000a98 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4aa5      	ldr	r2, [pc, #660]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e185      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f8:	4ba1      	ldr	r3, [pc, #644]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001302:	231f      	movs	r3, #31
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b9c      	ldr	r3, [pc, #624]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800130e:	69da      	ldr	r2, [r3, #28]
 8001310:	4b9b      	ldr	r3, [pc, #620]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001312:	499d      	ldr	r1, [pc, #628]	@ (8001588 <HAL_RCC_OscConfig+0x684>)
 8001314:	400a      	ands	r2, r1
 8001316:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	4013      	ands	r3, r2
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d12a      	bne.n	8001380 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800132a:	4b95      	ldr	r3, [pc, #596]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800132c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800132e:	4b94      	ldr	r3, [pc, #592]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001330:	2104      	movs	r1, #4
 8001332:	430a      	orrs	r2, r1
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001336:	4b92      	ldr	r3, [pc, #584]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133a:	4b91      	ldr	r3, [pc, #580]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800133c:	2101      	movs	r1, #1
 800133e:	430a      	orrs	r2, r1
 8001340:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fba9 	bl	8000a98 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800134c:	f7ff fba4 	bl	8000a98 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e152      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800135e:	4b88      	ldr	r3, [pc, #544]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d0f1      	beq.n	800134c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001368:	4b85      	ldr	r3, [pc, #532]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136c:	22f8      	movs	r2, #248	@ 0xf8
 800136e:	4393      	bics	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	00da      	lsls	r2, r3, #3
 8001378:	4b81      	ldr	r3, [pc, #516]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800137a:	430a      	orrs	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	@ 0x34
 800137e:	e034      	b.n	80013ea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	3305      	adds	r3, #5
 8001386:	d111      	bne.n	80013ac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001388:	4b7d      	ldr	r3, [pc, #500]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800138c:	4b7c      	ldr	r3, [pc, #496]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800138e:	2104      	movs	r1, #4
 8001390:	438a      	bics	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001394:	4b7a      	ldr	r3, [pc, #488]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001398:	22f8      	movs	r2, #248	@ 0xf8
 800139a:	4393      	bics	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	00da      	lsls	r2, r3, #3
 80013a4:	4b76      	ldr	r3, [pc, #472]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013aa:	e01e      	b.n	80013ea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013ac:	4b74      	ldr	r3, [pc, #464]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013b0:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013b2:	2104      	movs	r1, #4
 80013b4:	430a      	orrs	r2, r1
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013b8:	4b71      	ldr	r3, [pc, #452]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013bc:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb68 	bl	8000a98 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013ce:	f7ff fb63 	bl	8000a98 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e111      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e0:	4b67      	ldr	r3, [pc, #412]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e4:	2202      	movs	r2, #2
 80013e6:	4013      	ands	r3, r2
 80013e8:	d1f1      	bne.n	80013ce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2220      	movs	r2, #32
 80013f0:	4013      	ands	r3, r2
 80013f2:	d05c      	beq.n	80014ae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013f4:	4b62      	ldr	r3, [pc, #392]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	220c      	movs	r2, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d00e      	beq.n	800141e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001400:	4b5f      	ldr	r3, [pc, #380]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	220c      	movs	r2, #12
 8001406:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001408:	2b08      	cmp	r3, #8
 800140a:	d114      	bne.n	8001436 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800140c:	4b5c      	ldr	r3, [pc, #368]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	23c0      	movs	r3, #192	@ 0xc0
 8001412:	025b      	lsls	r3, r3, #9
 8001414:	401a      	ands	r2, r3
 8001416:	23c0      	movs	r3, #192	@ 0xc0
 8001418:	025b      	lsls	r3, r3, #9
 800141a:	429a      	cmp	r2, r3
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800141e:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d040      	beq.n	80014ac <HAL_RCC_OscConfig+0x5a8>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d03c      	beq.n	80014ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0e6      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01b      	beq.n	8001476 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800143e:	4b50      	ldr	r3, [pc, #320]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001442:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	0249      	lsls	r1, r1, #9
 8001448:	430a      	orrs	r2, r1
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb24 	bl	8000a98 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001456:	f7ff fb1f 	bl	8000a98 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e0cd      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001468:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x552>
 8001474:	e01b      	b.n	80014ae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001476:	4b42      	ldr	r3, [pc, #264]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800147c:	4943      	ldr	r1, [pc, #268]	@ (800158c <HAL_RCC_OscConfig+0x688>)
 800147e:	400a      	ands	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fb09 	bl	8000a98 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800148c:	f7ff fb04 	bl	8000a98 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0b2      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x588>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014ac:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d100      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5b4>
 80014b6:	e0a4      	b.n	8001602 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	220c      	movs	r2, #12
 80014be:	4013      	ands	r3, r2
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5c2>
 80014c4:	e078      	b.n	80015b8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d14c      	bne.n	8001568 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	492e      	ldr	r1, [pc, #184]	@ (8001590 <HAL_RCC_OscConfig+0x68c>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fadd 	bl	8000a98 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fad8 	bl	8000a98 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e086      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	049b      	lsls	r3, r3, #18
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001506:	220f      	movs	r2, #15
 8001508:	4393      	bics	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_RCC_OscConfig+0x690>)
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	431a      	orrs	r2, r3
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 8001536:	2180      	movs	r1, #128	@ 0x80
 8001538:	0449      	lsls	r1, r1, #17
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff faab 	bl	8000a98 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff faa6 	bl	8000a98 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e054      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	049b      	lsls	r3, r3, #18
 8001562:	4013      	ands	r3, r2
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x644>
 8001566:	e04c      	b.n	8001602 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <HAL_RCC_OscConfig+0x67c>)
 800156e:	4908      	ldr	r1, [pc, #32]	@ (8001590 <HAL_RCC_OscConfig+0x68c>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fa90 	bl	8000a98 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x6a6>
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	40021000 	.word	0x40021000
 8001584:	00001388 	.word	0x00001388
 8001588:	efffffff 	.word	0xefffffff
 800158c:	fffeffff 	.word	0xfffeffff
 8001590:	feffffff 	.word	0xfeffffff
 8001594:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fa7e 	bl	8000a98 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e02c      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_RCC_OscConfig+0x708>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x694>
 80015b6:	e024      	b.n	8001602 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e01f      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_RCC_OscConfig+0x708>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_RCC_OscConfig+0x708>)
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ce:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	23c0      	movs	r3, #192	@ 0xc0
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	401a      	ands	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10e      	bne.n	80015fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	220f      	movs	r2, #15
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	23f0      	movs	r3, #240	@ 0xf0
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	401a      	ands	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b008      	add	sp, #32
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0bf      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d911      	bls.n	8001656 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b5e      	ldr	r3, [pc, #376]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4393      	bics	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001644:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0a6      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d015      	beq.n	800168c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2204      	movs	r2, #4
 8001666:	4013      	ands	r3, r2
 8001668:	d006      	beq.n	8001678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800166a:	4b51      	ldr	r3, [pc, #324]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	21e0      	movs	r1, #224	@ 0xe0
 8001672:	00c9      	lsls	r1, r1, #3
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4b4d      	ldr	r3, [pc, #308]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	22f0      	movs	r2, #240	@ 0xf0
 800167e:	4393      	bics	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d04c      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	4013      	ands	r3, r2
 80016a8:	d120      	bne.n	80016ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07a      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	049b      	lsls	r3, r3, #18
 80016be:	4013      	ands	r3, r2
 80016c0:	d114      	bne.n	80016ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06e      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016ce:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 80016d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	029b      	lsls	r3, r3, #10
 80016d6:	4013      	ands	r3, r2
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e062      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2202      	movs	r2, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e05b      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ec:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	4393      	bics	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff f9ca 	bl	8000a98 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001708:	e009      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f7ff f9c5 	bl	8000a98 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4a27      	ldr	r2, [pc, #156]	@ (80017b4 <HAL_RCC_ClockConfig+0x1a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e042      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	220c      	movs	r2, #12
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1ec      	bne.n	800170a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	4013      	ands	r3, r2
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d211      	bcs.n	8001762 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4393      	bics	r3, r2
 8001746:	0019      	movs	r1, r3
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_RCC_ClockConfig+0x19c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e020      	b.n	80017a4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d009      	beq.n	8001780 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a11      	ldr	r2, [pc, #68]	@ (80017b8 <HAL_RCC_ClockConfig+0x1a8>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001780:	f000 f820 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001784:	0001      	movs	r1, r0
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	220f      	movs	r2, #15
 800178e:	4013      	ands	r3, r2
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_RCC_ClockConfig+0x1ac>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	000a      	movs	r2, r1
 8001796:	40da      	lsrs	r2, r3
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 800179a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800179c:	2003      	movs	r0, #3
 800179e:	f7ff f935 	bl	8000a0c <HAL_InitTick>
  
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40022000 	.word	0x40022000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	00001388 	.word	0x00001388
 80017b8:	fffff8ff 	.word	0xfffff8ff
 80017bc:	08003564 	.word	0x08003564
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80017de:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_RCC_GetSysClockFreq+0xd0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	220c      	movs	r2, #12
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d046      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0xb8>
 80017ee:	d848      	bhi.n	8001882 <HAL_RCC_GetSysClockFreq+0xbe>
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d002      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x36>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d003      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x3c>
 80017f8:	e043      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017fa:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017fc:	613b      	str	r3, [r7, #16]
      break;
 80017fe:	e043      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0c9b      	lsrs	r3, r3, #18
 8001804:	220f      	movs	r2, #15
 8001806:	4013      	ands	r3, r2
 8001808:	4a24      	ldr	r2, [pc, #144]	@ (800189c <HAL_RCC_GetSysClockFreq+0xd8>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	220f      	movs	r2, #15
 8001814:	4013      	ands	r3, r2
 8001816:	4a22      	ldr	r2, [pc, #136]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	401a      	ands	r2, r3
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	429a      	cmp	r2, r3
 800182a:	d109      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	481a      	ldr	r0, [pc, #104]	@ (8001898 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001830:	f7fe fc72 	bl	8000118 <__udivsi3>
 8001834:	0003      	movs	r3, r0
 8001836:	001a      	movs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4353      	muls	r3, r2
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e01a      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	23c0      	movs	r3, #192	@ 0xc0
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	401a      	ands	r2, r3
 8001848:	23c0      	movs	r3, #192	@ 0xc0
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	429a      	cmp	r2, r3
 800184e:	d109      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	4814      	ldr	r0, [pc, #80]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001854:	f7fe fc60 	bl	8000118 <__udivsi3>
 8001858:	0003      	movs	r3, r0
 800185a:	001a      	movs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4353      	muls	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e008      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	480c      	ldr	r0, [pc, #48]	@ (8001898 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001868:	f7fe fc56 	bl	8000118 <__udivsi3>
 800186c:	0003      	movs	r3, r0
 800186e:	001a      	movs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4353      	muls	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	613b      	str	r3, [r7, #16]
      break;
 800187a:	e005      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	e002      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001884:	613b      	str	r3, [r7, #16]
      break;
 8001886:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001888:	693b      	ldr	r3, [r7, #16]
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b006      	add	sp, #24
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	40021000 	.word	0x40021000
 8001898:	007a1200 	.word	0x007a1200
 800189c:	0800357c 	.word	0x0800357c
 80018a0:	0800358c 	.word	0x0800358c
 80018a4:	02dc6c00 	.word	0x02dc6c00

080018a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ac:	4b02      	ldr	r3, [pc, #8]	@ (80018b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018c0:	f7ff fff2 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018c4:	0001      	movs	r1, r0
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	2207      	movs	r2, #7
 80018ce:	4013      	ands	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	@ (80018e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	40d9      	lsrs	r1, r3
 80018d6:	000b      	movs	r3, r1
}    
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08003574 	.word	0x08003574

080018e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001904:	e08e      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2017      	movs	r0, #23
 8001908:	183b      	adds	r3, r7, r0
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	055b      	lsls	r3, r3, #21
 8001916:	4013      	ands	r3, r2
 8001918:	d110      	bne.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	0549      	lsls	r1, r1, #21
 8001924:	430a      	orrs	r2, r1
 8001926:	61da      	str	r2, [r3, #28]
 8001928:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	055b      	lsls	r3, r3, #21
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001936:	183b      	adds	r3, r7, r0
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b63      	ldr	r3, [pc, #396]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d11a      	bne.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001948:	4b60      	ldr	r3, [pc, #384]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b5f      	ldr	r3, [pc, #380]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0049      	lsls	r1, r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff f89f 	bl	8000a98 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	e008      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff f89a 	bl	8000a98 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0a6      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b56      	ldr	r3, [pc, #344]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4013      	ands	r3, r2
 800197c:	d0f0      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800197e:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	23c0      	movs	r3, #192	@ 0xc0
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d034      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	23c0      	movs	r3, #192	@ 0xc0
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4013      	ands	r3, r2
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d02c      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019a0:	4b49      	ldr	r3, [pc, #292]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b0:	2180      	movs	r1, #128	@ 0x80
 80019b2:	0249      	lsls	r1, r1, #9
 80019b4:	430a      	orrs	r2, r1
 80019b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019b8:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	4b42      	ldr	r3, [pc, #264]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019be:	4945      	ldr	r1, [pc, #276]	@ (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019c4:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff f861 	bl	8000a98 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	e009      	b.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f85c 	bl	8000a98 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e067      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019fa:	4b33      	ldr	r3, [pc, #204]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a34      	ldr	r2, [pc, #208]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	0019      	movs	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a0e:	2317      	movs	r3, #23
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a1e:	492f      	ldr	r1, [pc, #188]	@ (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	2203      	movs	r2, #3
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2220      	movs	r2, #32
 8001a66:	4013      	ands	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	2210      	movs	r2, #16
 8001a70:	4393      	bics	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	029b      	lsls	r3, r3, #10
 8001a86:	4013      	ands	r3, r2
 8001a88:	d009      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001aaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	2240      	movs	r2, #64	@ 0x40
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b006      	add	sp, #24
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	fffffcff 	.word	0xfffffcff
 8001ad4:	fffeffff 	.word	0xfffeffff
 8001ad8:	00001388 	.word	0x00001388
 8001adc:	efffffff 	.word	0xefffffff
 8001ae0:	fffcffff 	.word	0xfffcffff

08001ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e042      	b.n	8001b7c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	223d      	movs	r2, #61	@ 0x3d
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	223c      	movs	r2, #60	@ 0x3c
 8001b06:	2100      	movs	r1, #0
 8001b08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe fe19 	bl	8000744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	223d      	movs	r2, #61	@ 0x3d
 8001b16:	2102      	movs	r1, #2
 8001b18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3304      	adds	r3, #4
 8001b22:	0019      	movs	r1, r3
 8001b24:	0010      	movs	r0, r2
 8001b26:	f000 fc23 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2246      	movs	r2, #70	@ 0x46
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	223e      	movs	r2, #62	@ 0x3e
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	223f      	movs	r2, #63	@ 0x3f
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	2101      	movs	r1, #1
 8001b48:	5499      	strb	r1, [r3, r2]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2241      	movs	r2, #65	@ 0x41
 8001b4e:	2101      	movs	r1, #1
 8001b50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2242      	movs	r2, #66	@ 0x42
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2243      	movs	r2, #67	@ 0x43
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2244      	movs	r2, #68	@ 0x44
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2245      	movs	r2, #69	@ 0x45
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	223d      	movs	r2, #61	@ 0x3d
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e042      	b.n	8001c1c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	223d      	movs	r2, #61	@ 0x3d
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	223c      	movs	r2, #60	@ 0x3c
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 f839 	bl	8001c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	223d      	movs	r2, #61	@ 0x3d
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	f000 fbd3 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2246      	movs	r2, #70	@ 0x46
 8001bce:	2101      	movs	r1, #1
 8001bd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223e      	movs	r2, #62	@ 0x3e
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	223f      	movs	r2, #63	@ 0x3f
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2241      	movs	r2, #65	@ 0x41
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2242      	movs	r2, #66	@ 0x42
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2243      	movs	r2, #67	@ 0x43
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2244      	movs	r2, #68	@ 0x44
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2245      	movs	r2, #69	@ 0x45
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	223d      	movs	r2, #61	@ 0x3d
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c2c:	46c0      	nop			@ (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d108      	bne.n	8001c56 <HAL_TIM_PWM_Start+0x22>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	223e      	movs	r2, #62	@ 0x3e
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	4193      	sbcs	r3, r2
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	e01f      	b.n	8001c96 <HAL_TIM_PWM_Start+0x62>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d108      	bne.n	8001c6e <HAL_TIM_PWM_Start+0x3a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	223f      	movs	r2, #63	@ 0x3f
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	4193      	sbcs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	e013      	b.n	8001c96 <HAL_TIM_PWM_Start+0x62>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d108      	bne.n	8001c86 <HAL_TIM_PWM_Start+0x52>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2240      	movs	r2, #64	@ 0x40
 8001c78:	5c9b      	ldrb	r3, [r3, r2]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	1e5a      	subs	r2, r3, #1
 8001c80:	4193      	sbcs	r3, r2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	e007      	b.n	8001c96 <HAL_TIM_PWM_Start+0x62>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2241      	movs	r2, #65	@ 0x41
 8001c8a:	5c9b      	ldrb	r3, [r3, r2]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	4193      	sbcs	r3, r2
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e074      	b.n	8001d88 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_PWM_Start+0x7a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	223e      	movs	r2, #62	@ 0x3e
 8001ca8:	2102      	movs	r1, #2
 8001caa:	5499      	strb	r1, [r3, r2]
 8001cac:	e013      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xa2>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_PWM_Start+0x8a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	223f      	movs	r2, #63	@ 0x3f
 8001cb8:	2102      	movs	r1, #2
 8001cba:	5499      	strb	r1, [r3, r2]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xa2>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d104      	bne.n	8001cce <HAL_TIM_PWM_Start+0x9a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	2102      	movs	r1, #2
 8001cca:	5499      	strb	r1, [r3, r2]
 8001ccc:	e003      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xa2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2241      	movs	r2, #65	@ 0x41
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 fe6a 	bl	80029b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a29      	ldr	r2, [pc, #164]	@ (8001d90 <HAL_TIM_PWM_Start+0x15c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_TIM_PWM_Start+0xd8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a28      	ldr	r2, [pc, #160]	@ (8001d94 <HAL_TIM_PWM_Start+0x160>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_TIM_PWM_Start+0xd8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a26      	ldr	r2, [pc, #152]	@ (8001d98 <HAL_TIM_PWM_Start+0x164>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_TIM_PWM_Start+0xd8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a25      	ldr	r2, [pc, #148]	@ (8001d9c <HAL_TIM_PWM_Start+0x168>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_TIM_PWM_Start+0xdc>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_TIM_PWM_Start+0xde>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2180      	movs	r1, #128	@ 0x80
 8001d22:	0209      	lsls	r1, r1, #8
 8001d24:	430a      	orrs	r2, r1
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a18      	ldr	r2, [pc, #96]	@ (8001d90 <HAL_TIM_PWM_Start+0x15c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00f      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x11e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d009      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x11e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <HAL_TIM_PWM_Start+0x16c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x11e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	@ (8001d94 <HAL_TIM_PWM_Start+0x160>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d111      	bne.n	8001d76 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2207      	movs	r2, #7
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d010      	beq.n	8001d86 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	e007      	b.n	8001d86 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40014000 	.word	0x40014000
 8001d98:	40014400 	.word	0x40014400
 8001d9c:	40014800 	.word	0x40014800
 8001da0:	40000400 	.word	0x40000400

08001da4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e090      	b.n	8001eda <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	223d      	movs	r2, #61	@ 0x3d
 8001dbc:	5c9b      	ldrb	r3, [r3, r2]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	223c      	movs	r2, #60	@ 0x3c
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe fcd8 	bl	8000784 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	223d      	movs	r2, #61	@ 0x3d
 8001dd8:	2102      	movs	r1, #2
 8001dda:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	493f      	ldr	r1, [pc, #252]	@ (8001ee4 <HAL_TIM_Encoder_Init+0x140>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	0019      	movs	r1, r3
 8001df6:	0010      	movs	r0, r2
 8001df8:	f000 faba 	bl	8002370 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <HAL_TIM_Encoder_Init+0x144>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4313      	orrs	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001eec <HAL_TIM_Encoder_Init+0x148>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef0 <HAL_TIM_Encoder_Init+0x14c>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	4313      	orrs	r3, r2
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	011a      	lsls	r2, r3, #4
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	031b      	lsls	r3, r3, #12
 8001e66:	4313      	orrs	r3, r2
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2222      	movs	r2, #34	@ 0x22
 8001e72:	4393      	bics	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2288      	movs	r2, #136	@ 0x88
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2246      	movs	r2, #70	@ 0x46
 8001eac:	2101      	movs	r1, #1
 8001eae:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	223e      	movs	r2, #62	@ 0x3e
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	223f      	movs	r2, #63	@ 0x3f
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2242      	movs	r2, #66	@ 0x42
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2243      	movs	r2, #67	@ 0x43
 8001ecc:	2101      	movs	r1, #1
 8001ece:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	223d      	movs	r2, #61	@ 0x3d
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b006      	add	sp, #24
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	ffffbff8 	.word	0xffffbff8
 8001ee8:	fffffcfc 	.word	0xfffffcfc
 8001eec:	fffff3f3 	.word	0xfffff3f3
 8001ef0:	ffff0f0f 	.word	0xffff0f0f

08001ef4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001efe:	200f      	movs	r0, #15
 8001f00:	183b      	adds	r3, r7, r0
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	213e      	movs	r1, #62	@ 0x3e
 8001f06:	5c52      	ldrb	r2, [r2, r1]
 8001f08:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f0a:	230e      	movs	r3, #14
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	213f      	movs	r1, #63	@ 0x3f
 8001f12:	5c52      	ldrb	r2, [r2, r1]
 8001f14:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f16:	240d      	movs	r4, #13
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	2142      	movs	r1, #66	@ 0x42
 8001f1e:	5c52      	ldrb	r2, [r2, r1]
 8001f20:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f22:	230c      	movs	r3, #12
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	2143      	movs	r1, #67	@ 0x43
 8001f2a:	5c52      	ldrb	r2, [r2, r1]
 8001f2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d112      	bne.n	8001f5a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d103      	bne.n	8001f44 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d001      	beq.n	8001f48 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e075      	b.n	8002034 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	223e      	movs	r2, #62	@ 0x3e
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2242      	movs	r2, #66	@ 0x42
 8001f54:	2102      	movs	r1, #2
 8001f56:	5499      	strb	r1, [r3, r2]
 8001f58:	e03d      	b.n	8001fd6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d114      	bne.n	8001f8a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f60:	230e      	movs	r3, #14
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d104      	bne.n	8001f74 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e05d      	b.n	8002034 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	223f      	movs	r2, #63	@ 0x3f
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2243      	movs	r2, #67	@ 0x43
 8001f84:	2102      	movs	r1, #2
 8001f86:	5499      	strb	r1, [r3, r2]
 8001f88:	e025      	b.n	8001fd6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f8a:	230f      	movs	r3, #15
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10e      	bne.n	8001fb2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f94:	230e      	movs	r3, #14
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d109      	bne.n	8001fb2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f9e:	230d      	movs	r3, #13
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d104      	bne.n	8001fb2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fa8:	230c      	movs	r3, #12
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e03e      	b.n	8002034 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	223e      	movs	r2, #62	@ 0x3e
 8001fba:	2102      	movs	r1, #2
 8001fbc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223f      	movs	r2, #63	@ 0x3f
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2242      	movs	r2, #66	@ 0x42
 8001fca:	2102      	movs	r1, #2
 8001fcc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2243      	movs	r2, #67	@ 0x43
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_TIM_Encoder_Start+0xf0>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d008      	beq.n	8001ff4 <HAL_TIM_Encoder_Start+0x100>
 8001fe2:	e00f      	b.n	8002004 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2100      	movs	r1, #0
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fce3 	bl	80029b8 <TIM_CCxChannelCmd>
      break;
 8001ff2:	e016      	b.n	8002022 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 fcdb 	bl	80029b8 <TIM_CCxChannelCmd>
      break;
 8002002:	e00e      	b.n	8002022 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	2100      	movs	r1, #0
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fcd3 	bl	80029b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	2104      	movs	r1, #4
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fccc 	bl	80029b8 <TIM_CCxChannelCmd>
      break;
 8002020:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b005      	add	sp, #20
 800203a:	bd90      	pop	{r4, r7, pc}

0800203c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002048:	2317      	movs	r3, #23
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	223c      	movs	r2, #60	@ 0x3c
 8002054:	5c9b      	ldrb	r3, [r3, r2]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_TIM_PWM_ConfigChannel+0x22>
 800205a:	2302      	movs	r3, #2
 800205c:	e0ad      	b.n	80021ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	223c      	movs	r2, #60	@ 0x3c
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d100      	bne.n	800206e <HAL_TIM_PWM_ConfigChannel+0x32>
 800206c:	e076      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x120>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d900      	bls.n	8002076 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002074:	e095      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d04e      	beq.n	800211a <HAL_TIM_PWM_ConfigChannel+0xde>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d900      	bls.n	8002084 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002082:	e08e      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_PWM_ConfigChannel+0x56>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d021      	beq.n	80020d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002090:	e087      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	0011      	movs	r1, r2
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f9f6 	bl	800248c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2108      	movs	r1, #8
 80020ac:	430a      	orrs	r2, r1
 80020ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2104      	movs	r1, #4
 80020bc:	438a      	bics	r2, r1
 80020be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6999      	ldr	r1, [r3, #24]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	619a      	str	r2, [r3, #24]
      break;
 80020d2:	e06b      	b.n	80021ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	0011      	movs	r1, r2
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 fa5d 	bl	800259c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	0109      	lsls	r1, r1, #4
 80020f0:	430a      	orrs	r2, r1
 80020f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4931      	ldr	r1, [pc, #196]	@ (80021c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002100:	400a      	ands	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6999      	ldr	r1, [r3, #24]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	021a      	lsls	r2, r3, #8
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	619a      	str	r2, [r3, #24]
      break;
 8002118:	e048      	b.n	80021ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	0011      	movs	r1, r2
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fabe 	bl	80026a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2108      	movs	r1, #8
 8002134:	430a      	orrs	r2, r1
 8002136:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2104      	movs	r1, #4
 8002144:	438a      	bics	r2, r1
 8002146:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69d9      	ldr	r1, [r3, #28]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	61da      	str	r2, [r3, #28]
      break;
 800215a:	e027      	b.n	80021ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f000 fb23 	bl	80027b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	0109      	lsls	r1, r1, #4
 8002178:	430a      	orrs	r2, r1
 800217a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	490f      	ldr	r1, [pc, #60]	@ (80021c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002188:	400a      	ands	r2, r1
 800218a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69d9      	ldr	r1, [r3, #28]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	021a      	lsls	r2, r3, #8
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	61da      	str	r2, [r3, #28]
      break;
 80021a0:	e004      	b.n	80021ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80021a2:	2317      	movs	r3, #23
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	223c      	movs	r2, #60	@ 0x3c
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]

  return status;
 80021b4:	2317      	movs	r3, #23
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b006      	add	sp, #24
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	fffffbff 	.word	0xfffffbff

080021c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	230f      	movs	r3, #15
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	223c      	movs	r2, #60	@ 0x3c
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIM_ConfigClockSource+0x20>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0bc      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x19a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	223c      	movs	r2, #60	@ 0x3c
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	223d      	movs	r2, #61	@ 0x3d
 80021f4:	2102      	movs	r1, #2
 80021f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2277      	movs	r2, #119	@ 0x77
 8002204:	4393      	bics	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4a58      	ldr	r2, [pc, #352]	@ (800236c <HAL_TIM_ConfigClockSource+0x1a4>)
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2280      	movs	r2, #128	@ 0x80
 800221e:	0192      	lsls	r2, r2, #6
 8002220:	4293      	cmp	r3, r2
 8002222:	d040      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0xde>
 8002224:	2280      	movs	r2, #128	@ 0x80
 8002226:	0192      	lsls	r2, r2, #6
 8002228:	4293      	cmp	r3, r2
 800222a:	d900      	bls.n	800222e <HAL_TIM_ConfigClockSource+0x66>
 800222c:	e088      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	0152      	lsls	r2, r2, #5
 8002232:	4293      	cmp	r3, r2
 8002234:	d100      	bne.n	8002238 <HAL_TIM_ConfigClockSource+0x70>
 8002236:	e088      	b.n	800234a <HAL_TIM_ConfigClockSource+0x182>
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	0152      	lsls	r2, r2, #5
 800223c:	4293      	cmp	r3, r2
 800223e:	d900      	bls.n	8002242 <HAL_TIM_ConfigClockSource+0x7a>
 8002240:	e07e      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002242:	2b70      	cmp	r3, #112	@ 0x70
 8002244:	d018      	beq.n	8002278 <HAL_TIM_ConfigClockSource+0xb0>
 8002246:	d900      	bls.n	800224a <HAL_TIM_ConfigClockSource+0x82>
 8002248:	e07a      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800224a:	2b60      	cmp	r3, #96	@ 0x60
 800224c:	d04f      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x126>
 800224e:	d900      	bls.n	8002252 <HAL_TIM_ConfigClockSource+0x8a>
 8002250:	e076      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002252:	2b50      	cmp	r3, #80	@ 0x50
 8002254:	d03b      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x106>
 8002256:	d900      	bls.n	800225a <HAL_TIM_ConfigClockSource+0x92>
 8002258:	e072      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800225a:	2b40      	cmp	r3, #64	@ 0x40
 800225c:	d057      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x146>
 800225e:	d900      	bls.n	8002262 <HAL_TIM_ConfigClockSource+0x9a>
 8002260:	e06e      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002262:	2b30      	cmp	r3, #48	@ 0x30
 8002264:	d063      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 8002266:	d86b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002268:	2b20      	cmp	r3, #32
 800226a:	d060      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 800226c:	d868      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d05d      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 8002272:	2b10      	cmp	r3, #16
 8002274:	d05b      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 8002276:	e063      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002288:	f000 fb76 	bl	8002978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2277      	movs	r2, #119	@ 0x77
 8002298:	4313      	orrs	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]
      break;
 80022a4:	e052      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	f000 fb5f 	bl	8002978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	01c9      	lsls	r1, r1, #7
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
      break;
 80022cc:	e03e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022da:	001a      	movs	r2, r3
 80022dc:	f000 fad2 	bl	8002884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2150      	movs	r1, #80	@ 0x50
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fb2c 	bl	8002944 <TIM_ITRx_SetConfig>
      break;
 80022ec:	e02e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fa:	001a      	movs	r2, r3
 80022fc:	f000 faf0 	bl	80028e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2160      	movs	r1, #96	@ 0x60
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fb1c 	bl	8002944 <TIM_ITRx_SetConfig>
      break;
 800230c:	e01e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	001a      	movs	r2, r3
 800231c:	f000 fab2 	bl	8002884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2140      	movs	r1, #64	@ 0x40
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fb0c 	bl	8002944 <TIM_ITRx_SetConfig>
      break;
 800232c:	e00e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0019      	movs	r1, r3
 8002338:	0010      	movs	r0, r2
 800233a:	f000 fb03 	bl	8002944 <TIM_ITRx_SetConfig>
      break;
 800233e:	e005      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
      break;
 8002348:	e000      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800234a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	223d      	movs	r2, #61	@ 0x3d
 8002350:	2101      	movs	r1, #1
 8002352:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	223c      	movs	r2, #60	@ 0x3c
 8002358:	2100      	movs	r1, #0
 800235a:	5499      	strb	r1, [r3, r2]

  return status;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	ffff00ff 	.word	0xffff00ff

08002370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3b      	ldr	r2, [pc, #236]	@ (8002470 <TIM_Base_SetConfig+0x100>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d008      	beq.n	800239a <TIM_Base_SetConfig+0x2a>
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	05db      	lsls	r3, r3, #23
 800238e:	429a      	cmp	r2, r3
 8002390:	d003      	beq.n	800239a <TIM_Base_SetConfig+0x2a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a37      	ldr	r2, [pc, #220]	@ (8002474 <TIM_Base_SetConfig+0x104>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d108      	bne.n	80023ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2270      	movs	r2, #112	@ 0x70
 800239e:	4393      	bics	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a30      	ldr	r2, [pc, #192]	@ (8002470 <TIM_Base_SetConfig+0x100>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d018      	beq.n	80023e6 <TIM_Base_SetConfig+0x76>
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	05db      	lsls	r3, r3, #23
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d013      	beq.n	80023e6 <TIM_Base_SetConfig+0x76>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002474 <TIM_Base_SetConfig+0x104>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00f      	beq.n	80023e6 <TIM_Base_SetConfig+0x76>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <TIM_Base_SetConfig+0x108>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_Base_SetConfig+0x76>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2a      	ldr	r2, [pc, #168]	@ (800247c <TIM_Base_SetConfig+0x10c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <TIM_Base_SetConfig+0x76>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a29      	ldr	r2, [pc, #164]	@ (8002480 <TIM_Base_SetConfig+0x110>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_Base_SetConfig+0x76>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <TIM_Base_SetConfig+0x114>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d108      	bne.n	80023f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <TIM_Base_SetConfig+0x118>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2280      	movs	r2, #128	@ 0x80
 80023fc:	4393      	bics	r3, r2
 80023fe:	001a      	movs	r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a13      	ldr	r2, [pc, #76]	@ (8002470 <TIM_Base_SetConfig+0x100>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00b      	beq.n	800243e <TIM_Base_SetConfig+0xce>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a14      	ldr	r2, [pc, #80]	@ (800247c <TIM_Base_SetConfig+0x10c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <TIM_Base_SetConfig+0xce>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a13      	ldr	r2, [pc, #76]	@ (8002480 <TIM_Base_SetConfig+0x110>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d003      	beq.n	800243e <TIM_Base_SetConfig+0xce>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <TIM_Base_SetConfig+0x114>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d103      	bne.n	8002446 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2201      	movs	r2, #1
 800245e:	4393      	bics	r3, r2
 8002460:	001a      	movs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]
  }
}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40002000 	.word	0x40002000
 800247c:	40014000 	.word	0x40014000
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800
 8002488:	fffffcff 	.word	0xfffffcff

0800248c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	2201      	movs	r2, #1
 80024a2:	4393      	bics	r3, r2
 80024a4:	001a      	movs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2270      	movs	r2, #112	@ 0x70
 80024ba:	4393      	bics	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2203      	movs	r2, #3
 80024c2:	4393      	bics	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4393      	bics	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a27      	ldr	r2, [pc, #156]	@ (8002584 <TIM_OC1_SetConfig+0xf8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00b      	beq.n	8002502 <TIM_OC1_SetConfig+0x76>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a26      	ldr	r2, [pc, #152]	@ (8002588 <TIM_OC1_SetConfig+0xfc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <TIM_OC1_SetConfig+0x76>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <TIM_OC1_SetConfig+0x100>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d003      	beq.n	8002502 <TIM_OC1_SetConfig+0x76>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <TIM_OC1_SetConfig+0x104>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10c      	bne.n	800251c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2208      	movs	r2, #8
 8002506:	4393      	bics	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2204      	movs	r2, #4
 8002518:	4393      	bics	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a19      	ldr	r2, [pc, #100]	@ (8002584 <TIM_OC1_SetConfig+0xf8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00b      	beq.n	800253c <TIM_OC1_SetConfig+0xb0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a18      	ldr	r2, [pc, #96]	@ (8002588 <TIM_OC1_SetConfig+0xfc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d007      	beq.n	800253c <TIM_OC1_SetConfig+0xb0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a17      	ldr	r2, [pc, #92]	@ (800258c <TIM_OC1_SetConfig+0x100>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d003      	beq.n	800253c <TIM_OC1_SetConfig+0xb0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a16      	ldr	r2, [pc, #88]	@ (8002590 <TIM_OC1_SetConfig+0x104>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4a15      	ldr	r2, [pc, #84]	@ (8002594 <TIM_OC1_SetConfig+0x108>)
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <TIM_OC1_SetConfig+0x10c>)
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40014000 	.word	0x40014000
 800258c:	40014400 	.word	0x40014400
 8002590:	40014800 	.word	0x40014800
 8002594:	fffffeff 	.word	0xfffffeff
 8002598:	fffffdff 	.word	0xfffffdff

0800259c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4393      	bics	r3, r2
 80025b4:	001a      	movs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002684 <TIM_OC2_SetConfig+0xe8>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <TIM_OC2_SetConfig+0xec>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2220      	movs	r2, #32
 80025e6:	4393      	bics	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a24      	ldr	r2, [pc, #144]	@ (800268c <TIM_OC2_SetConfig+0xf0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10d      	bne.n	800261a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	4393      	bics	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2240      	movs	r2, #64	@ 0x40
 8002616:	4393      	bics	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <TIM_OC2_SetConfig+0xf0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00b      	beq.n	800263a <TIM_OC2_SetConfig+0x9e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <TIM_OC2_SetConfig+0xf4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <TIM_OC2_SetConfig+0x9e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <TIM_OC2_SetConfig+0xf8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_OC2_SetConfig+0x9e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <TIM_OC2_SetConfig+0xfc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d113      	bne.n	8002662 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4a17      	ldr	r2, [pc, #92]	@ (800269c <TIM_OC2_SetConfig+0x100>)
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <TIM_OC2_SetConfig+0x104>)
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	621a      	str	r2, [r3, #32]
}
 800267c:	46c0      	nop			@ (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	ffff8fff 	.word	0xffff8fff
 8002688:	fffffcff 	.word	0xfffffcff
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	fffffbff 	.word	0xfffffbff
 80026a0:	fffff7ff 	.word	0xfffff7ff

080026a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a33      	ldr	r2, [pc, #204]	@ (8002788 <TIM_OC3_SetConfig+0xe4>)
 80026ba:	401a      	ands	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2270      	movs	r2, #112	@ 0x70
 80026d0:	4393      	bics	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2203      	movs	r2, #3
 80026d8:	4393      	bics	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a28      	ldr	r2, [pc, #160]	@ (800278c <TIM_OC3_SetConfig+0xe8>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <TIM_OC3_SetConfig+0xec>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10d      	bne.n	800271e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	4a23      	ldr	r2, [pc, #140]	@ (8002794 <TIM_OC3_SetConfig+0xf0>)
 8002706:	4013      	ands	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <TIM_OC3_SetConfig+0xf4>)
 800271a:	4013      	ands	r3, r2
 800271c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1b      	ldr	r2, [pc, #108]	@ (8002790 <TIM_OC3_SetConfig+0xec>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00b      	beq.n	800273e <TIM_OC3_SetConfig+0x9a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1c      	ldr	r2, [pc, #112]	@ (800279c <TIM_OC3_SetConfig+0xf8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <TIM_OC3_SetConfig+0x9a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <TIM_OC3_SetConfig+0xfc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d003      	beq.n	800273e <TIM_OC3_SetConfig+0x9a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <TIM_OC3_SetConfig+0x100>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d113      	bne.n	8002766 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <TIM_OC3_SetConfig+0x104>)
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4a18      	ldr	r2, [pc, #96]	@ (80027ac <TIM_OC3_SetConfig+0x108>)
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b006      	add	sp, #24
 8002786:	bd80      	pop	{r7, pc}
 8002788:	fffffeff 	.word	0xfffffeff
 800278c:	fffffdff 	.word	0xfffffdff
 8002790:	40012c00 	.word	0x40012c00
 8002794:	fffff7ff 	.word	0xfffff7ff
 8002798:	fffffbff 	.word	0xfffffbff
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800
 80027a8:	ffffefff 	.word	0xffffefff
 80027ac:	ffffdfff 	.word	0xffffdfff

080027b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a26      	ldr	r2, [pc, #152]	@ (8002860 <TIM_OC4_SetConfig+0xb0>)
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a22      	ldr	r2, [pc, #136]	@ (8002864 <TIM_OC4_SetConfig+0xb4>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a21      	ldr	r2, [pc, #132]	@ (8002868 <TIM_OC4_SetConfig+0xb8>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <TIM_OC4_SetConfig+0xbc>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	031b      	lsls	r3, r3, #12
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <TIM_OC4_SetConfig+0xc0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00b      	beq.n	8002828 <TIM_OC4_SetConfig+0x78>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <TIM_OC4_SetConfig+0xc4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_OC4_SetConfig+0x78>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a17      	ldr	r2, [pc, #92]	@ (8002878 <TIM_OC4_SetConfig+0xc8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_OC4_SetConfig+0x78>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a16      	ldr	r2, [pc, #88]	@ (800287c <TIM_OC4_SetConfig+0xcc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d109      	bne.n	800283c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <TIM_OC4_SetConfig+0xd0>)
 800282c:	4013      	ands	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b006      	add	sp, #24
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	ffffefff 	.word	0xffffefff
 8002864:	ffff8fff 	.word	0xffff8fff
 8002868:	fffffcff 	.word	0xfffffcff
 800286c:	ffffdfff 	.word	0xffffdfff
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800
 8002880:	ffffbfff 	.word	0xffffbfff

08002884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	2201      	movs	r2, #1
 800289c:	4393      	bics	r3, r2
 800289e:	001a      	movs	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	22f0      	movs	r2, #240	@ 0xf0
 80028ae:	4393      	bics	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	220a      	movs	r2, #10
 80028c0:	4393      	bics	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	46c0      	nop			@ (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b006      	add	sp, #24
 80028de:	bd80      	pop	{r7, pc}

080028e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	2210      	movs	r2, #16
 80028f8:	4393      	bics	r3, r2
 80028fa:	001a      	movs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <TIM_TI2_ConfigInputStage+0x60>)
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	22a0      	movs	r2, #160	@ 0xa0
 800291c:	4393      	bics	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b006      	add	sp, #24
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	ffff0fff 	.word	0xffff0fff

08002944 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2270      	movs	r2, #112	@ 0x70
 8002958:	4393      	bics	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	2207      	movs	r2, #7
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b004      	add	sp, #16
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <TIM_ETR_SetConfig+0x3c>)
 8002990:	4013      	ands	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	021a      	lsls	r2, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	431a      	orrs	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b006      	add	sp, #24
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	ffff00ff 	.word	0xffff00ff

080029b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	221f      	movs	r2, #31
 80029c8:	4013      	ands	r3, r2
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	0013      	movs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	43d2      	mvns	r2, r2
 80029da:	401a      	ands	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	211f      	movs	r1, #31
 80029e8:	400b      	ands	r3, r1
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4099      	lsls	r1, r3
 80029ee:	000b      	movs	r3, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b006      	add	sp, #24
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	223c      	movs	r2, #60	@ 0x3c
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e047      	b.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	223c      	movs	r2, #60	@ 0x3c
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	223d      	movs	r2, #61	@ 0x3d
 8002a24:	2102      	movs	r1, #2
 8002a26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2270      	movs	r2, #112	@ 0x70
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00f      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	05db      	lsls	r3, r3, #23
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d009      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a10      	ldr	r2, [pc, #64]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10c      	bne.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2280      	movs	r2, #128	@ 0x80
 8002a80:	4393      	bics	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223d      	movs	r2, #61	@ 0x3d
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223c      	movs	r2, #60	@ 0x3c
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b004      	add	sp, #16
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40014000 	.word	0x40014000

08002abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	223c      	movs	r2, #60	@ 0x3c
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e03e      	b.n	8002b56 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	223c      	movs	r2, #60	@ 0x3c
 8002adc:	2101      	movs	r1, #1
 8002ade:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22ff      	movs	r2, #255	@ 0xff
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b60 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002af4:	401a      	ands	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a18      	ldr	r2, [pc, #96]	@ (8002b64 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002b02:	401a      	ands	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a16      	ldr	r2, [pc, #88]	@ (8002b68 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002b10:	401a      	ands	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002b1e:	401a      	ands	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223c      	movs	r2, #60	@ 0x3c
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	fffffcff 	.word	0xfffffcff
 8002b64:	fffffbff 	.word	0xfffffbff
 8002b68:	fffff7ff 	.word	0xfffff7ff
 8002b6c:	ffffefff 	.word	0xffffefff
 8002b70:	ffffdfff 	.word	0xffffdfff
 8002b74:	ffffbfff 	.word	0xffffbfff

08002b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e044      	b.n	8002c14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2278      	movs	r2, #120	@ 0x78
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fd feab 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2224      	movs	r2, #36	@ 0x24
 8002ba6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fa54 	bl	8003070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 f8c8 	bl	8002d60 <UART_SetConfig>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01c      	b.n	8002c14 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	490d      	ldr	r1, [pc, #52]	@ (8002c1c <HAL_UART_Init+0xa4>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	212a      	movs	r1, #42	@ 0x2a
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 fae3 	bl	80031d8 <UART_CheckIdleState>
 8002c12:	0003      	movs	r3, r0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	ffffb7ff 	.word	0xffffb7ff

08002c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	1dbb      	adds	r3, r7, #6
 8002c2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d000      	beq.n	8002c3a <HAL_UART_Transmit+0x1a>
 8002c38:	e08c      	b.n	8002d54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_UART_Transmit+0x28>
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e084      	b.n	8002d56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d109      	bne.n	8002c6c <HAL_UART_Transmit+0x4c>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e074      	b.n	8002d56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2284      	movs	r2, #132	@ 0x84
 8002c70:	2100      	movs	r1, #0
 8002c72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2221      	movs	r2, #33	@ 0x21
 8002c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7a:	f7fd ff0d 	bl	8000a98 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1dba      	adds	r2, r7, #6
 8002c86:	2150      	movs	r1, #80	@ 0x50
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1dba      	adds	r2, r7, #6
 8002c90:	2152      	movs	r1, #82	@ 0x52
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	015b      	lsls	r3, r3, #5
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Transmit+0x94>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cbc:	e02f      	b.n	8002d1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	f000 fb2c 	bl	8003328 <UART_WaitOnFlagUntilTimeout>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e03b      	b.n	8002d56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	05d2      	lsls	r2, r2, #23
 8002cee:	0dd2      	lsrs	r2, r2, #23
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e007      	b.n	8002d0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2252      	movs	r2, #82	@ 0x52
 8002d10:	5a9b      	ldrh	r3, [r3, r2]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b299      	uxth	r1, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2252      	movs	r2, #82	@ 0x52
 8002d1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2252      	movs	r2, #82	@ 0x52
 8002d22:	5a9b      	ldrh	r3, [r3, r2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1c9      	bne.n	8002cbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	0013      	movs	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	@ 0x40
 8002d38:	f000 faf6 	bl	8003328 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e005      	b.n	8002d56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b008      	add	sp, #32
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d68:	231e      	movs	r3, #30
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4aaf      	ldr	r2, [pc, #700]	@ (800304c <UART_SetConfig+0x2ec>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4aaa      	ldr	r2, [pc, #680]	@ (8003050 <UART_SetConfig+0x2f0>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4aa1      	ldr	r2, [pc, #644]	@ (8003054 <UART_SetConfig+0x2f4>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a9d      	ldr	r2, [pc, #628]	@ (8003058 <UART_SetConfig+0x2f8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d127      	bne.n	8002e36 <UART_SetConfig+0xd6>
 8002de6:	4b9d      	ldr	r3, [pc, #628]	@ (800305c <UART_SetConfig+0x2fc>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	2203      	movs	r2, #3
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d00d      	beq.n	8002e0e <UART_SetConfig+0xae>
 8002df2:	d81b      	bhi.n	8002e2c <UART_SetConfig+0xcc>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d014      	beq.n	8002e22 <UART_SetConfig+0xc2>
 8002df8:	d818      	bhi.n	8002e2c <UART_SetConfig+0xcc>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <UART_SetConfig+0xa4>
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d00a      	beq.n	8002e18 <UART_SetConfig+0xb8>
 8002e02:	e013      	b.n	8002e2c <UART_SetConfig+0xcc>
 8002e04:	231f      	movs	r3, #31
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e065      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e0e:	231f      	movs	r3, #31
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	2202      	movs	r2, #2
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e060      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e18:	231f      	movs	r3, #31
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e05b      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e22:	231f      	movs	r3, #31
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	2208      	movs	r2, #8
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e056      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e2c:	231f      	movs	r3, #31
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2210      	movs	r2, #16
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e051      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a89      	ldr	r2, [pc, #548]	@ (8003060 <UART_SetConfig+0x300>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d134      	bne.n	8002eaa <UART_SetConfig+0x14a>
 8002e40:	4b86      	ldr	r3, [pc, #536]	@ (800305c <UART_SetConfig+0x2fc>)
 8002e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e44:	23c0      	movs	r3, #192	@ 0xc0
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	4013      	ands	r3, r2
 8002e4a:	22c0      	movs	r2, #192	@ 0xc0
 8002e4c:	0292      	lsls	r2, r2, #10
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d017      	beq.n	8002e82 <UART_SetConfig+0x122>
 8002e52:	22c0      	movs	r2, #192	@ 0xc0
 8002e54:	0292      	lsls	r2, r2, #10
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d822      	bhi.n	8002ea0 <UART_SetConfig+0x140>
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	0292      	lsls	r2, r2, #10
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <UART_SetConfig+0x136>
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	0292      	lsls	r2, r2, #10
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d81a      	bhi.n	8002ea0 <UART_SetConfig+0x140>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <UART_SetConfig+0x118>
 8002e6e:	2280      	movs	r2, #128	@ 0x80
 8002e70:	0252      	lsls	r2, r2, #9
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00a      	beq.n	8002e8c <UART_SetConfig+0x12c>
 8002e76:	e013      	b.n	8002ea0 <UART_SetConfig+0x140>
 8002e78:	231f      	movs	r3, #31
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e02b      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e82:	231f      	movs	r3, #31
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e026      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e8c:	231f      	movs	r3, #31
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2204      	movs	r2, #4
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e021      	b.n	8002eda <UART_SetConfig+0x17a>
 8002e96:	231f      	movs	r3, #31
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e01c      	b.n	8002eda <UART_SetConfig+0x17a>
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e017      	b.n	8002eda <UART_SetConfig+0x17a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6d      	ldr	r2, [pc, #436]	@ (8003064 <UART_SetConfig+0x304>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d104      	bne.n	8002ebe <UART_SetConfig+0x15e>
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e00d      	b.n	8002eda <UART_SetConfig+0x17a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a69      	ldr	r2, [pc, #420]	@ (8003068 <UART_SetConfig+0x308>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d104      	bne.n	8002ed2 <UART_SetConfig+0x172>
 8002ec8:	231f      	movs	r3, #31
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e003      	b.n	8002eda <UART_SetConfig+0x17a>
 8002ed2:	231f      	movs	r3, #31
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d15c      	bne.n	8002fa0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002ee6:	231f      	movs	r3, #31
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d015      	beq.n	8002f1c <UART_SetConfig+0x1bc>
 8002ef0:	dc18      	bgt.n	8002f24 <UART_SetConfig+0x1c4>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d00d      	beq.n	8002f12 <UART_SetConfig+0x1b2>
 8002ef6:	dc15      	bgt.n	8002f24 <UART_SetConfig+0x1c4>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <UART_SetConfig+0x1a2>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d005      	beq.n	8002f0c <UART_SetConfig+0x1ac>
 8002f00:	e010      	b.n	8002f24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f02:	f7fe fcdb 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 8002f06:	0003      	movs	r3, r0
 8002f08:	61bb      	str	r3, [r7, #24]
        break;
 8002f0a:	e012      	b.n	8002f32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0c:	4b57      	ldr	r3, [pc, #348]	@ (800306c <UART_SetConfig+0x30c>)
 8002f0e:	61bb      	str	r3, [r7, #24]
        break;
 8002f10:	e00f      	b.n	8002f32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f12:	f7fe fc57 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8002f16:	0003      	movs	r3, r0
 8002f18:	61bb      	str	r3, [r7, #24]
        break;
 8002f1a:	e00a      	b.n	8002f32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	61bb      	str	r3, [r7, #24]
        break;
 8002f22:	e006      	b.n	8002f32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f28:	231e      	movs	r3, #30
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
        break;
 8002f30:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d100      	bne.n	8002f3a <UART_SetConfig+0x1da>
 8002f38:	e07a      	b.n	8003030 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	005a      	lsls	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	18d2      	adds	r2, r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	f7fd f8e3 	bl	8000118 <__udivsi3>
 8002f52:	0003      	movs	r3, r0
 8002f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d91c      	bls.n	8002f96 <UART_SetConfig+0x236>
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	2380      	movs	r3, #128	@ 0x80
 8002f60:	025b      	lsls	r3, r3, #9
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d217      	bcs.n	8002f96 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	200e      	movs	r0, #14
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	210f      	movs	r1, #15
 8002f70:	438a      	bics	r2, r1
 8002f72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b299      	uxth	r1, r3
 8002f80:	183b      	adds	r3, r7, r0
 8002f82:	183a      	adds	r2, r7, r0
 8002f84:	8812      	ldrh	r2, [r2, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	183a      	adds	r2, r7, r0
 8002f90:	8812      	ldrh	r2, [r2, #0]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	e04c      	b.n	8003030 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f96:	231e      	movs	r3, #30
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e047      	b.n	8003030 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa0:	231f      	movs	r3, #31
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d015      	beq.n	8002fd6 <UART_SetConfig+0x276>
 8002faa:	dc18      	bgt.n	8002fde <UART_SetConfig+0x27e>
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d00d      	beq.n	8002fcc <UART_SetConfig+0x26c>
 8002fb0:	dc15      	bgt.n	8002fde <UART_SetConfig+0x27e>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <UART_SetConfig+0x25c>
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d005      	beq.n	8002fc6 <UART_SetConfig+0x266>
 8002fba:	e010      	b.n	8002fde <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f7fe fc7e 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	61bb      	str	r3, [r7, #24]
        break;
 8002fc4:	e012      	b.n	8002fec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc6:	4b29      	ldr	r3, [pc, #164]	@ (800306c <UART_SetConfig+0x30c>)
 8002fc8:	61bb      	str	r3, [r7, #24]
        break;
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fcc:	f7fe fbfa 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	61bb      	str	r3, [r7, #24]
        break;
 8002fd4:	e00a      	b.n	8002fec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	61bb      	str	r3, [r7, #24]
        break;
 8002fdc:	e006      	b.n	8002fec <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fe2:	231e      	movs	r3, #30
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
        break;
 8002fea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01e      	beq.n	8003030 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085a      	lsrs	r2, r3, #1
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	18d2      	adds	r2, r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0019      	movs	r1, r3
 8003002:	0010      	movs	r0, r2
 8003004:	f7fd f888 	bl	8000118 <__udivsi3>
 8003008:	0003      	movs	r3, r0
 800300a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	d90a      	bls.n	8003028 <UART_SetConfig+0x2c8>
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	025b      	lsls	r3, r3, #9
 8003018:	429a      	cmp	r2, r3
 800301a:	d205      	bcs.n	8003028 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	e003      	b.n	8003030 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003028:	231e      	movs	r3, #30
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800303c:	231e      	movs	r3, #30
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b008      	add	sp, #32
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	efff69f3 	.word	0xefff69f3
 8003050:	ffffcfff 	.word	0xffffcfff
 8003054:	fffff4ff 	.word	0xfffff4ff
 8003058:	40013800 	.word	0x40013800
 800305c:	40021000 	.word	0x40021000
 8003060:	40004400 	.word	0x40004400
 8003064:	40004800 	.word	0x40004800
 8003068:	40004c00 	.word	0x40004c00
 800306c:	007a1200 	.word	0x007a1200

08003070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	2208      	movs	r2, #8
 800307e:	4013      	ands	r3, r2
 8003080:	d00b      	beq.n	800309a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a4a      	ldr	r2, [pc, #296]	@ (80031b4 <UART_AdvFeatureConfig+0x144>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d00b      	beq.n	80030bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a43      	ldr	r2, [pc, #268]	@ (80031b8 <UART_AdvFeatureConfig+0x148>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d00b      	beq.n	80030de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a3b      	ldr	r2, [pc, #236]	@ (80031bc <UART_AdvFeatureConfig+0x14c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d00b      	beq.n	8003100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a34      	ldr	r2, [pc, #208]	@ (80031c0 <UART_AdvFeatureConfig+0x150>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	2210      	movs	r2, #16
 8003106:	4013      	ands	r3, r2
 8003108:	d00b      	beq.n	8003122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a2c      	ldr	r2, [pc, #176]	@ (80031c4 <UART_AdvFeatureConfig+0x154>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	2220      	movs	r2, #32
 8003128:	4013      	ands	r3, r2
 800312a:	d00b      	beq.n	8003144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4a25      	ldr	r2, [pc, #148]	@ (80031c8 <UART_AdvFeatureConfig+0x158>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	2240      	movs	r2, #64	@ 0x40
 800314a:	4013      	ands	r3, r2
 800314c:	d01d      	beq.n	800318a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <UART_AdvFeatureConfig+0x15c>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	035b      	lsls	r3, r3, #13
 800316e:	429a      	cmp	r2, r3
 8003170:	d10b      	bne.n	800318a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <UART_AdvFeatureConfig+0x160>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	4013      	ands	r3, r2
 8003192:	d00b      	beq.n	80031ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <UART_AdvFeatureConfig+0x164>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }
}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	ffff7fff 	.word	0xffff7fff
 80031b8:	fffdffff 	.word	0xfffdffff
 80031bc:	fffeffff 	.word	0xfffeffff
 80031c0:	fffbffff 	.word	0xfffbffff
 80031c4:	ffffefff 	.word	0xffffefff
 80031c8:	ffffdfff 	.word	0xffffdfff
 80031cc:	ffefffff 	.word	0xffefffff
 80031d0:	ff9fffff 	.word	0xff9fffff
 80031d4:	fff7ffff 	.word	0xfff7ffff

080031d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b092      	sub	sp, #72	@ 0x48
 80031dc:	af02      	add	r7, sp, #8
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2284      	movs	r2, #132	@ 0x84
 80031e4:	2100      	movs	r1, #0
 80031e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e8:	f7fd fc56 	bl	8000a98 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2208      	movs	r2, #8
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d12c      	bne.n	8003258 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003200:	2280      	movs	r2, #128	@ 0x80
 8003202:	0391      	lsls	r1, r2, #14
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4a46      	ldr	r2, [pc, #280]	@ (8003320 <UART_CheckIdleState+0x148>)
 8003208:	9200      	str	r2, [sp, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	f000 f88c 	bl	8003328 <UART_WaitOnFlagUntilTimeout>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d021      	beq.n	8003258 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003214:	f3ef 8310 	mrs	r3, PRIMASK
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800321c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800321e:	2301      	movs	r3, #1
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	438a      	bics	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2278      	movs	r2, #120	@ 0x78
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e05f      	b.n	8003318 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	2b04      	cmp	r3, #4
 8003264:	d146      	bne.n	80032f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	03d1      	lsls	r1, r2, #15
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4a2c      	ldr	r2, [pc, #176]	@ (8003320 <UART_CheckIdleState+0x148>)
 8003270:	9200      	str	r2, [sp, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	f000 f858 	bl	8003328 <UART_WaitOnFlagUntilTimeout>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d03b      	beq.n	80032f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327c:	f3ef 8310 	mrs	r3, PRIMASK
 8003280:	60fb      	str	r3, [r7, #12]
  return(result);
 8003282:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34
 8003286:	2301      	movs	r3, #1
 8003288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4921      	ldr	r1, [pc, #132]	@ (8003324 <UART_CheckIdleState+0x14c>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80032b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80032b8:	2301      	movs	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	2120      	movs	r1, #32
 80032e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2278      	movs	r2, #120	@ 0x78
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e011      	b.n	8003318 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	2120      	movs	r1, #32
 8003300:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2278      	movs	r2, #120	@ 0x78
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b010      	add	sp, #64	@ 0x40
 800331e:	bd80      	pop	{r7, pc}
 8003320:	01ffffff 	.word	0x01ffffff
 8003324:	fffffedf 	.word	0xfffffedf

08003328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003338:	e051      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	3301      	adds	r3, #1
 800333e:	d04e      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003340:	f7fd fbaa 	bl	8000a98 <HAL_GetTick>
 8003344:	0002      	movs	r2, r0
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	429a      	cmp	r2, r3
 800334e:	d302      	bcc.n	8003356 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e051      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2204      	movs	r2, #4
 8003362:	4013      	ands	r3, r2
 8003364:	d03b      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xb6>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b80      	cmp	r3, #128	@ 0x80
 800336a:	d038      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xb6>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d035      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2208      	movs	r2, #8
 800337a:	4013      	ands	r3, r2
 800337c:	2b08      	cmp	r3, #8
 800337e:	d111      	bne.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f83c 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2284      	movs	r2, #132	@ 0x84
 8003394:	2108      	movs	r1, #8
 8003396:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2278      	movs	r2, #120	@ 0x78
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e02c      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	401a      	ands	r2, r3
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d112      	bne.n	80033de <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2280      	movs	r2, #128	@ 0x80
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f81f 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2284      	movs	r2, #132	@ 0x84
 80033ce:	2120      	movs	r1, #32
 80033d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2278      	movs	r2, #120	@ 0x78
 80033d6:	2100      	movs	r1, #0
 80033d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00f      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	425a      	negs	r2, r3
 80033ee:	4153      	adcs	r3, r2
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	001a      	movs	r2, r3
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d09e      	beq.n	800333a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	@ 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003410:	f3ef 8310 	mrs	r3, PRIMASK
 8003414:	617b      	str	r3, [r7, #20]
  return(result);
 8003416:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003418:	637b      	str	r3, [r7, #52]	@ 0x34
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4926      	ldr	r1, [pc, #152]	@ (80034cc <UART_EndRxTransfer+0xc4>)
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f383 8810 	msr	PRIMASK, r3
}
 8003440:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	623b      	str	r3, [r7, #32]
  return(result);
 8003448:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344a:	633b      	str	r3, [r7, #48]	@ 0x30
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	438a      	bics	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003478:	2b01      	cmp	r3, #1
 800347a:	d118      	bne.n	80034ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347c:	f3ef 8310 	mrs	r3, PRIMASK
 8003480:	60bb      	str	r3, [r7, #8]
  return(result);
 8003482:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003486:	2301      	movs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2110      	movs	r1, #16
 800349e:	438a      	bics	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f383 8810 	msr	PRIMASK, r3
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	2120      	movs	r1, #32
 80034b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b00e      	add	sp, #56	@ 0x38
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	fffffedf 	.word	0xfffffedf

080034d0 <memset>:
 80034d0:	0003      	movs	r3, r0
 80034d2:	1882      	adds	r2, r0, r2
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	7019      	strb	r1, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	2600      	movs	r6, #0
 80034e4:	4c0c      	ldr	r4, [pc, #48]	@ (8003518 <__libc_init_array+0x38>)
 80034e6:	4d0d      	ldr	r5, [pc, #52]	@ (800351c <__libc_init_array+0x3c>)
 80034e8:	1b64      	subs	r4, r4, r5
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	2600      	movs	r6, #0
 80034f2:	f000 f823 	bl	800353c <_init>
 80034f6:	4c0a      	ldr	r4, [pc, #40]	@ (8003520 <__libc_init_array+0x40>)
 80034f8:	4d0a      	ldr	r5, [pc, #40]	@ (8003524 <__libc_init_array+0x44>)
 80034fa:	1b64      	subs	r4, r4, r5
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	00b3      	lsls	r3, r6, #2
 8003506:	58eb      	ldr	r3, [r5, r3]
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	00b3      	lsls	r3, r6, #2
 8003510:	58eb      	ldr	r3, [r5, r3]
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	0800359c 	.word	0x0800359c
 800351c:	0800359c 	.word	0x0800359c
 8003520:	080035a0 	.word	0x080035a0
 8003524:	0800359c 	.word	0x0800359c

08003528 <memcpy>:
 8003528:	2300      	movs	r3, #0
 800352a:	b510      	push	{r4, lr}
 800352c:	429a      	cmp	r2, r3
 800352e:	d100      	bne.n	8003532 <memcpy+0xa>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	5ccc      	ldrb	r4, [r1, r3]
 8003534:	54c4      	strb	r4, [r0, r3]
 8003536:	3301      	adds	r3, #1
 8003538:	e7f8      	b.n	800352c <memcpy+0x4>
	...

0800353c <_init>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr

08003548 <_fini>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr
