
PD_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006578  08006578  00007578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006784  08006784  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006784  08006784  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006788  08006788  00007788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800678c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000005c  080067e8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080067e8  000084a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f49f  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267f  00000000  00000000  00017523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00019ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa2  00000000  00000000  0001a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b231  00000000  00000000  0001b3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129b4  00000000  00000000  0003661b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc9b  00000000  00000000  00048fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4c6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b8  00000000  00000000  000e4cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e8568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006560 	.word	0x08006560

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006560 	.word	0x08006560

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_fadd>:
 8000244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000246:	024b      	lsls	r3, r1, #9
 8000248:	0a5a      	lsrs	r2, r3, #9
 800024a:	4694      	mov	ip, r2
 800024c:	004a      	lsls	r2, r1, #1
 800024e:	0fc9      	lsrs	r1, r1, #31
 8000250:	46ce      	mov	lr, r9
 8000252:	4647      	mov	r7, r8
 8000254:	4689      	mov	r9, r1
 8000256:	0045      	lsls	r5, r0, #1
 8000258:	0246      	lsls	r6, r0, #9
 800025a:	0e2d      	lsrs	r5, r5, #24
 800025c:	0e12      	lsrs	r2, r2, #24
 800025e:	b580      	push	{r7, lr}
 8000260:	0999      	lsrs	r1, r3, #6
 8000262:	0a77      	lsrs	r7, r6, #9
 8000264:	0fc4      	lsrs	r4, r0, #31
 8000266:	09b6      	lsrs	r6, r6, #6
 8000268:	1aab      	subs	r3, r5, r2
 800026a:	454c      	cmp	r4, r9
 800026c:	d020      	beq.n	80002b0 <__aeabi_fadd+0x6c>
 800026e:	2b00      	cmp	r3, #0
 8000270:	dd0c      	ble.n	800028c <__aeabi_fadd+0x48>
 8000272:	2a00      	cmp	r2, #0
 8000274:	d134      	bne.n	80002e0 <__aeabi_fadd+0x9c>
 8000276:	2900      	cmp	r1, #0
 8000278:	d02a      	beq.n	80002d0 <__aeabi_fadd+0x8c>
 800027a:	1e5a      	subs	r2, r3, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	d100      	bne.n	8000282 <__aeabi_fadd+0x3e>
 8000280:	e08f      	b.n	80003a2 <__aeabi_fadd+0x15e>
 8000282:	2bff      	cmp	r3, #255	@ 0xff
 8000284:	d100      	bne.n	8000288 <__aeabi_fadd+0x44>
 8000286:	e0cd      	b.n	8000424 <__aeabi_fadd+0x1e0>
 8000288:	0013      	movs	r3, r2
 800028a:	e02f      	b.n	80002ec <__aeabi_fadd+0xa8>
 800028c:	2b00      	cmp	r3, #0
 800028e:	d060      	beq.n	8000352 <__aeabi_fadd+0x10e>
 8000290:	1b53      	subs	r3, r2, r5
 8000292:	2d00      	cmp	r5, #0
 8000294:	d000      	beq.n	8000298 <__aeabi_fadd+0x54>
 8000296:	e0ee      	b.n	8000476 <__aeabi_fadd+0x232>
 8000298:	2e00      	cmp	r6, #0
 800029a:	d100      	bne.n	800029e <__aeabi_fadd+0x5a>
 800029c:	e13e      	b.n	800051c <__aeabi_fadd+0x2d8>
 800029e:	1e5c      	subs	r4, r3, #1
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d100      	bne.n	80002a6 <__aeabi_fadd+0x62>
 80002a4:	e16b      	b.n	800057e <__aeabi_fadd+0x33a>
 80002a6:	2bff      	cmp	r3, #255	@ 0xff
 80002a8:	d100      	bne.n	80002ac <__aeabi_fadd+0x68>
 80002aa:	e0b9      	b.n	8000420 <__aeabi_fadd+0x1dc>
 80002ac:	0023      	movs	r3, r4
 80002ae:	e0e7      	b.n	8000480 <__aeabi_fadd+0x23c>
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dc00      	bgt.n	80002b6 <__aeabi_fadd+0x72>
 80002b4:	e0a4      	b.n	8000400 <__aeabi_fadd+0x1bc>
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d069      	beq.n	800038e <__aeabi_fadd+0x14a>
 80002ba:	2dff      	cmp	r5, #255	@ 0xff
 80002bc:	d100      	bne.n	80002c0 <__aeabi_fadd+0x7c>
 80002be:	e0b1      	b.n	8000424 <__aeabi_fadd+0x1e0>
 80002c0:	2280      	movs	r2, #128	@ 0x80
 80002c2:	04d2      	lsls	r2, r2, #19
 80002c4:	4311      	orrs	r1, r2
 80002c6:	2b1b      	cmp	r3, #27
 80002c8:	dc00      	bgt.n	80002cc <__aeabi_fadd+0x88>
 80002ca:	e0e9      	b.n	80004a0 <__aeabi_fadd+0x25c>
 80002cc:	002b      	movs	r3, r5
 80002ce:	3605      	adds	r6, #5
 80002d0:	08f7      	lsrs	r7, r6, #3
 80002d2:	2bff      	cmp	r3, #255	@ 0xff
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fadd+0x94>
 80002d6:	e0a5      	b.n	8000424 <__aeabi_fadd+0x1e0>
 80002d8:	027a      	lsls	r2, r7, #9
 80002da:	0a52      	lsrs	r2, r2, #9
 80002dc:	b2d8      	uxtb	r0, r3
 80002de:	e030      	b.n	8000342 <__aeabi_fadd+0xfe>
 80002e0:	2dff      	cmp	r5, #255	@ 0xff
 80002e2:	d100      	bne.n	80002e6 <__aeabi_fadd+0xa2>
 80002e4:	e09e      	b.n	8000424 <__aeabi_fadd+0x1e0>
 80002e6:	2280      	movs	r2, #128	@ 0x80
 80002e8:	04d2      	lsls	r2, r2, #19
 80002ea:	4311      	orrs	r1, r2
 80002ec:	2001      	movs	r0, #1
 80002ee:	2b1b      	cmp	r3, #27
 80002f0:	dc08      	bgt.n	8000304 <__aeabi_fadd+0xc0>
 80002f2:	0008      	movs	r0, r1
 80002f4:	2220      	movs	r2, #32
 80002f6:	40d8      	lsrs	r0, r3
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	4099      	lsls	r1, r3
 80002fc:	000b      	movs	r3, r1
 80002fe:	1e5a      	subs	r2, r3, #1
 8000300:	4193      	sbcs	r3, r2
 8000302:	4318      	orrs	r0, r3
 8000304:	1a36      	subs	r6, r6, r0
 8000306:	0173      	lsls	r3, r6, #5
 8000308:	d400      	bmi.n	800030c <__aeabi_fadd+0xc8>
 800030a:	e071      	b.n	80003f0 <__aeabi_fadd+0x1ac>
 800030c:	01b6      	lsls	r6, r6, #6
 800030e:	09b7      	lsrs	r7, r6, #6
 8000310:	0038      	movs	r0, r7
 8000312:	f000 fdb7 	bl	8000e84 <__clzsi2>
 8000316:	003b      	movs	r3, r7
 8000318:	3805      	subs	r0, #5
 800031a:	4083      	lsls	r3, r0
 800031c:	4285      	cmp	r5, r0
 800031e:	dd4d      	ble.n	80003bc <__aeabi_fadd+0x178>
 8000320:	4eb4      	ldr	r6, [pc, #720]	@ (80005f4 <__aeabi_fadd+0x3b0>)
 8000322:	1a2d      	subs	r5, r5, r0
 8000324:	401e      	ands	r6, r3
 8000326:	075a      	lsls	r2, r3, #29
 8000328:	d068      	beq.n	80003fc <__aeabi_fadd+0x1b8>
 800032a:	220f      	movs	r2, #15
 800032c:	4013      	ands	r3, r2
 800032e:	2b04      	cmp	r3, #4
 8000330:	d064      	beq.n	80003fc <__aeabi_fadd+0x1b8>
 8000332:	3604      	adds	r6, #4
 8000334:	0173      	lsls	r3, r6, #5
 8000336:	d561      	bpl.n	80003fc <__aeabi_fadd+0x1b8>
 8000338:	1c68      	adds	r0, r5, #1
 800033a:	2dfe      	cmp	r5, #254	@ 0xfe
 800033c:	d154      	bne.n	80003e8 <__aeabi_fadd+0x1a4>
 800033e:	20ff      	movs	r0, #255	@ 0xff
 8000340:	2200      	movs	r2, #0
 8000342:	05c0      	lsls	r0, r0, #23
 8000344:	4310      	orrs	r0, r2
 8000346:	07e4      	lsls	r4, r4, #31
 8000348:	4320      	orrs	r0, r4
 800034a:	bcc0      	pop	{r6, r7}
 800034c:	46b9      	mov	r9, r7
 800034e:	46b0      	mov	r8, r6
 8000350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000352:	22fe      	movs	r2, #254	@ 0xfe
 8000354:	4690      	mov	r8, r2
 8000356:	1c68      	adds	r0, r5, #1
 8000358:	0002      	movs	r2, r0
 800035a:	4640      	mov	r0, r8
 800035c:	4210      	tst	r0, r2
 800035e:	d16b      	bne.n	8000438 <__aeabi_fadd+0x1f4>
 8000360:	2d00      	cmp	r5, #0
 8000362:	d000      	beq.n	8000366 <__aeabi_fadd+0x122>
 8000364:	e0dd      	b.n	8000522 <__aeabi_fadd+0x2de>
 8000366:	2e00      	cmp	r6, #0
 8000368:	d100      	bne.n	800036c <__aeabi_fadd+0x128>
 800036a:	e102      	b.n	8000572 <__aeabi_fadd+0x32e>
 800036c:	2900      	cmp	r1, #0
 800036e:	d0b3      	beq.n	80002d8 <__aeabi_fadd+0x94>
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	1a77      	subs	r7, r6, r1
 8000374:	04d2      	lsls	r2, r2, #19
 8000376:	4217      	tst	r7, r2
 8000378:	d100      	bne.n	800037c <__aeabi_fadd+0x138>
 800037a:	e136      	b.n	80005ea <__aeabi_fadd+0x3a6>
 800037c:	464c      	mov	r4, r9
 800037e:	1b8e      	subs	r6, r1, r6
 8000380:	d061      	beq.n	8000446 <__aeabi_fadd+0x202>
 8000382:	2001      	movs	r0, #1
 8000384:	4216      	tst	r6, r2
 8000386:	d130      	bne.n	80003ea <__aeabi_fadd+0x1a6>
 8000388:	2300      	movs	r3, #0
 800038a:	08f7      	lsrs	r7, r6, #3
 800038c:	e7a4      	b.n	80002d8 <__aeabi_fadd+0x94>
 800038e:	2900      	cmp	r1, #0
 8000390:	d09e      	beq.n	80002d0 <__aeabi_fadd+0x8c>
 8000392:	1e5a      	subs	r2, r3, #1
 8000394:	2b01      	cmp	r3, #1
 8000396:	d100      	bne.n	800039a <__aeabi_fadd+0x156>
 8000398:	e0ca      	b.n	8000530 <__aeabi_fadd+0x2ec>
 800039a:	2bff      	cmp	r3, #255	@ 0xff
 800039c:	d042      	beq.n	8000424 <__aeabi_fadd+0x1e0>
 800039e:	0013      	movs	r3, r2
 80003a0:	e791      	b.n	80002c6 <__aeabi_fadd+0x82>
 80003a2:	1a71      	subs	r1, r6, r1
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	d400      	bmi.n	80003aa <__aeabi_fadd+0x166>
 80003a8:	e0d1      	b.n	800054e <__aeabi_fadd+0x30a>
 80003aa:	018f      	lsls	r7, r1, #6
 80003ac:	09bf      	lsrs	r7, r7, #6
 80003ae:	0038      	movs	r0, r7
 80003b0:	f000 fd68 	bl	8000e84 <__clzsi2>
 80003b4:	003b      	movs	r3, r7
 80003b6:	3805      	subs	r0, #5
 80003b8:	4083      	lsls	r3, r0
 80003ba:	2501      	movs	r5, #1
 80003bc:	2220      	movs	r2, #32
 80003be:	1b40      	subs	r0, r0, r5
 80003c0:	3001      	adds	r0, #1
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	001e      	movs	r6, r3
 80003c6:	4093      	lsls	r3, r2
 80003c8:	40c6      	lsrs	r6, r0
 80003ca:	1e5a      	subs	r2, r3, #1
 80003cc:	4193      	sbcs	r3, r2
 80003ce:	431e      	orrs	r6, r3
 80003d0:	d039      	beq.n	8000446 <__aeabi_fadd+0x202>
 80003d2:	0773      	lsls	r3, r6, #29
 80003d4:	d100      	bne.n	80003d8 <__aeabi_fadd+0x194>
 80003d6:	e11b      	b.n	8000610 <__aeabi_fadd+0x3cc>
 80003d8:	230f      	movs	r3, #15
 80003da:	2500      	movs	r5, #0
 80003dc:	4033      	ands	r3, r6
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d1a7      	bne.n	8000332 <__aeabi_fadd+0xee>
 80003e2:	2001      	movs	r0, #1
 80003e4:	0172      	lsls	r2, r6, #5
 80003e6:	d57c      	bpl.n	80004e2 <__aeabi_fadd+0x29e>
 80003e8:	b2c0      	uxtb	r0, r0
 80003ea:	01b2      	lsls	r2, r6, #6
 80003ec:	0a52      	lsrs	r2, r2, #9
 80003ee:	e7a8      	b.n	8000342 <__aeabi_fadd+0xfe>
 80003f0:	0773      	lsls	r3, r6, #29
 80003f2:	d003      	beq.n	80003fc <__aeabi_fadd+0x1b8>
 80003f4:	230f      	movs	r3, #15
 80003f6:	4033      	ands	r3, r6
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d19a      	bne.n	8000332 <__aeabi_fadd+0xee>
 80003fc:	002b      	movs	r3, r5
 80003fe:	e767      	b.n	80002d0 <__aeabi_fadd+0x8c>
 8000400:	2b00      	cmp	r3, #0
 8000402:	d023      	beq.n	800044c <__aeabi_fadd+0x208>
 8000404:	1b53      	subs	r3, r2, r5
 8000406:	2d00      	cmp	r5, #0
 8000408:	d17b      	bne.n	8000502 <__aeabi_fadd+0x2be>
 800040a:	2e00      	cmp	r6, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fadd+0x1cc>
 800040e:	e086      	b.n	800051e <__aeabi_fadd+0x2da>
 8000410:	1e5d      	subs	r5, r3, #1
 8000412:	2b01      	cmp	r3, #1
 8000414:	d100      	bne.n	8000418 <__aeabi_fadd+0x1d4>
 8000416:	e08b      	b.n	8000530 <__aeabi_fadd+0x2ec>
 8000418:	2bff      	cmp	r3, #255	@ 0xff
 800041a:	d002      	beq.n	8000422 <__aeabi_fadd+0x1de>
 800041c:	002b      	movs	r3, r5
 800041e:	e075      	b.n	800050c <__aeabi_fadd+0x2c8>
 8000420:	464c      	mov	r4, r9
 8000422:	4667      	mov	r7, ip
 8000424:	2f00      	cmp	r7, #0
 8000426:	d100      	bne.n	800042a <__aeabi_fadd+0x1e6>
 8000428:	e789      	b.n	800033e <__aeabi_fadd+0xfa>
 800042a:	2280      	movs	r2, #128	@ 0x80
 800042c:	03d2      	lsls	r2, r2, #15
 800042e:	433a      	orrs	r2, r7
 8000430:	0252      	lsls	r2, r2, #9
 8000432:	20ff      	movs	r0, #255	@ 0xff
 8000434:	0a52      	lsrs	r2, r2, #9
 8000436:	e784      	b.n	8000342 <__aeabi_fadd+0xfe>
 8000438:	1a77      	subs	r7, r6, r1
 800043a:	017b      	lsls	r3, r7, #5
 800043c:	d46b      	bmi.n	8000516 <__aeabi_fadd+0x2d2>
 800043e:	2f00      	cmp	r7, #0
 8000440:	d000      	beq.n	8000444 <__aeabi_fadd+0x200>
 8000442:	e765      	b.n	8000310 <__aeabi_fadd+0xcc>
 8000444:	2400      	movs	r4, #0
 8000446:	2000      	movs	r0, #0
 8000448:	2200      	movs	r2, #0
 800044a:	e77a      	b.n	8000342 <__aeabi_fadd+0xfe>
 800044c:	22fe      	movs	r2, #254	@ 0xfe
 800044e:	1c6b      	adds	r3, r5, #1
 8000450:	421a      	tst	r2, r3
 8000452:	d149      	bne.n	80004e8 <__aeabi_fadd+0x2a4>
 8000454:	2d00      	cmp	r5, #0
 8000456:	d000      	beq.n	800045a <__aeabi_fadd+0x216>
 8000458:	e09f      	b.n	800059a <__aeabi_fadd+0x356>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_fadd+0x21c>
 800045e:	e0ba      	b.n	80005d6 <__aeabi_fadd+0x392>
 8000460:	2900      	cmp	r1, #0
 8000462:	d100      	bne.n	8000466 <__aeabi_fadd+0x222>
 8000464:	e0cf      	b.n	8000606 <__aeabi_fadd+0x3c2>
 8000466:	1872      	adds	r2, r6, r1
 8000468:	0153      	lsls	r3, r2, #5
 800046a:	d400      	bmi.n	800046e <__aeabi_fadd+0x22a>
 800046c:	e0cd      	b.n	800060a <__aeabi_fadd+0x3c6>
 800046e:	0192      	lsls	r2, r2, #6
 8000470:	2001      	movs	r0, #1
 8000472:	0a52      	lsrs	r2, r2, #9
 8000474:	e765      	b.n	8000342 <__aeabi_fadd+0xfe>
 8000476:	2aff      	cmp	r2, #255	@ 0xff
 8000478:	d0d2      	beq.n	8000420 <__aeabi_fadd+0x1dc>
 800047a:	2080      	movs	r0, #128	@ 0x80
 800047c:	04c0      	lsls	r0, r0, #19
 800047e:	4306      	orrs	r6, r0
 8000480:	2001      	movs	r0, #1
 8000482:	2b1b      	cmp	r3, #27
 8000484:	dc08      	bgt.n	8000498 <__aeabi_fadd+0x254>
 8000486:	0030      	movs	r0, r6
 8000488:	2420      	movs	r4, #32
 800048a:	40d8      	lsrs	r0, r3
 800048c:	1ae3      	subs	r3, r4, r3
 800048e:	409e      	lsls	r6, r3
 8000490:	0033      	movs	r3, r6
 8000492:	1e5c      	subs	r4, r3, #1
 8000494:	41a3      	sbcs	r3, r4
 8000496:	4318      	orrs	r0, r3
 8000498:	464c      	mov	r4, r9
 800049a:	0015      	movs	r5, r2
 800049c:	1a0e      	subs	r6, r1, r0
 800049e:	e732      	b.n	8000306 <__aeabi_fadd+0xc2>
 80004a0:	0008      	movs	r0, r1
 80004a2:	2220      	movs	r2, #32
 80004a4:	40d8      	lsrs	r0, r3
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	4099      	lsls	r1, r3
 80004aa:	000b      	movs	r3, r1
 80004ac:	1e5a      	subs	r2, r3, #1
 80004ae:	4193      	sbcs	r3, r2
 80004b0:	4303      	orrs	r3, r0
 80004b2:	18f6      	adds	r6, r6, r3
 80004b4:	0173      	lsls	r3, r6, #5
 80004b6:	d59b      	bpl.n	80003f0 <__aeabi_fadd+0x1ac>
 80004b8:	3501      	adds	r5, #1
 80004ba:	2dff      	cmp	r5, #255	@ 0xff
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fadd+0x27c>
 80004be:	e73e      	b.n	800033e <__aeabi_fadd+0xfa>
 80004c0:	2301      	movs	r3, #1
 80004c2:	494d      	ldr	r1, [pc, #308]	@ (80005f8 <__aeabi_fadd+0x3b4>)
 80004c4:	0872      	lsrs	r2, r6, #1
 80004c6:	4033      	ands	r3, r6
 80004c8:	400a      	ands	r2, r1
 80004ca:	431a      	orrs	r2, r3
 80004cc:	0016      	movs	r6, r2
 80004ce:	0753      	lsls	r3, r2, #29
 80004d0:	d004      	beq.n	80004dc <__aeabi_fadd+0x298>
 80004d2:	230f      	movs	r3, #15
 80004d4:	4013      	ands	r3, r2
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d000      	beq.n	80004dc <__aeabi_fadd+0x298>
 80004da:	e72a      	b.n	8000332 <__aeabi_fadd+0xee>
 80004dc:	0173      	lsls	r3, r6, #5
 80004de:	d500      	bpl.n	80004e2 <__aeabi_fadd+0x29e>
 80004e0:	e72a      	b.n	8000338 <__aeabi_fadd+0xf4>
 80004e2:	002b      	movs	r3, r5
 80004e4:	08f7      	lsrs	r7, r6, #3
 80004e6:	e6f7      	b.n	80002d8 <__aeabi_fadd+0x94>
 80004e8:	2bff      	cmp	r3, #255	@ 0xff
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x2aa>
 80004ec:	e727      	b.n	800033e <__aeabi_fadd+0xfa>
 80004ee:	1871      	adds	r1, r6, r1
 80004f0:	0849      	lsrs	r1, r1, #1
 80004f2:	074a      	lsls	r2, r1, #29
 80004f4:	d02f      	beq.n	8000556 <__aeabi_fadd+0x312>
 80004f6:	220f      	movs	r2, #15
 80004f8:	400a      	ands	r2, r1
 80004fa:	2a04      	cmp	r2, #4
 80004fc:	d02b      	beq.n	8000556 <__aeabi_fadd+0x312>
 80004fe:	1d0e      	adds	r6, r1, #4
 8000500:	e6e6      	b.n	80002d0 <__aeabi_fadd+0x8c>
 8000502:	2aff      	cmp	r2, #255	@ 0xff
 8000504:	d08d      	beq.n	8000422 <__aeabi_fadd+0x1de>
 8000506:	2080      	movs	r0, #128	@ 0x80
 8000508:	04c0      	lsls	r0, r0, #19
 800050a:	4306      	orrs	r6, r0
 800050c:	2b1b      	cmp	r3, #27
 800050e:	dd24      	ble.n	800055a <__aeabi_fadd+0x316>
 8000510:	0013      	movs	r3, r2
 8000512:	1d4e      	adds	r6, r1, #5
 8000514:	e6dc      	b.n	80002d0 <__aeabi_fadd+0x8c>
 8000516:	464c      	mov	r4, r9
 8000518:	1b8f      	subs	r7, r1, r6
 800051a:	e6f9      	b.n	8000310 <__aeabi_fadd+0xcc>
 800051c:	464c      	mov	r4, r9
 800051e:	000e      	movs	r6, r1
 8000520:	e6d6      	b.n	80002d0 <__aeabi_fadd+0x8c>
 8000522:	2e00      	cmp	r6, #0
 8000524:	d149      	bne.n	80005ba <__aeabi_fadd+0x376>
 8000526:	2900      	cmp	r1, #0
 8000528:	d068      	beq.n	80005fc <__aeabi_fadd+0x3b8>
 800052a:	4667      	mov	r7, ip
 800052c:	464c      	mov	r4, r9
 800052e:	e77c      	b.n	800042a <__aeabi_fadd+0x1e6>
 8000530:	1870      	adds	r0, r6, r1
 8000532:	0143      	lsls	r3, r0, #5
 8000534:	d574      	bpl.n	8000620 <__aeabi_fadd+0x3dc>
 8000536:	4930      	ldr	r1, [pc, #192]	@ (80005f8 <__aeabi_fadd+0x3b4>)
 8000538:	0840      	lsrs	r0, r0, #1
 800053a:	4001      	ands	r1, r0
 800053c:	0743      	lsls	r3, r0, #29
 800053e:	d009      	beq.n	8000554 <__aeabi_fadd+0x310>
 8000540:	230f      	movs	r3, #15
 8000542:	4003      	ands	r3, r0
 8000544:	2b04      	cmp	r3, #4
 8000546:	d005      	beq.n	8000554 <__aeabi_fadd+0x310>
 8000548:	2302      	movs	r3, #2
 800054a:	1d0e      	adds	r6, r1, #4
 800054c:	e6c0      	b.n	80002d0 <__aeabi_fadd+0x8c>
 800054e:	2301      	movs	r3, #1
 8000550:	08cf      	lsrs	r7, r1, #3
 8000552:	e6c1      	b.n	80002d8 <__aeabi_fadd+0x94>
 8000554:	2302      	movs	r3, #2
 8000556:	08cf      	lsrs	r7, r1, #3
 8000558:	e6be      	b.n	80002d8 <__aeabi_fadd+0x94>
 800055a:	2520      	movs	r5, #32
 800055c:	0030      	movs	r0, r6
 800055e:	40d8      	lsrs	r0, r3
 8000560:	1aeb      	subs	r3, r5, r3
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	1e5d      	subs	r5, r3, #1
 8000568:	41ab      	sbcs	r3, r5
 800056a:	4303      	orrs	r3, r0
 800056c:	0015      	movs	r5, r2
 800056e:	185e      	adds	r6, r3, r1
 8000570:	e7a0      	b.n	80004b4 <__aeabi_fadd+0x270>
 8000572:	2900      	cmp	r1, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fadd+0x334>
 8000576:	e765      	b.n	8000444 <__aeabi_fadd+0x200>
 8000578:	464c      	mov	r4, r9
 800057a:	4667      	mov	r7, ip
 800057c:	e6ac      	b.n	80002d8 <__aeabi_fadd+0x94>
 800057e:	1b8f      	subs	r7, r1, r6
 8000580:	017b      	lsls	r3, r7, #5
 8000582:	d52e      	bpl.n	80005e2 <__aeabi_fadd+0x39e>
 8000584:	01bf      	lsls	r7, r7, #6
 8000586:	09bf      	lsrs	r7, r7, #6
 8000588:	0038      	movs	r0, r7
 800058a:	f000 fc7b 	bl	8000e84 <__clzsi2>
 800058e:	003b      	movs	r3, r7
 8000590:	3805      	subs	r0, #5
 8000592:	4083      	lsls	r3, r0
 8000594:	464c      	mov	r4, r9
 8000596:	3501      	adds	r5, #1
 8000598:	e710      	b.n	80003bc <__aeabi_fadd+0x178>
 800059a:	2e00      	cmp	r6, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x35c>
 800059e:	e740      	b.n	8000422 <__aeabi_fadd+0x1de>
 80005a0:	2900      	cmp	r1, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x362>
 80005a4:	e741      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005a6:	2380      	movs	r3, #128	@ 0x80
 80005a8:	03db      	lsls	r3, r3, #15
 80005aa:	429f      	cmp	r7, r3
 80005ac:	d200      	bcs.n	80005b0 <__aeabi_fadd+0x36c>
 80005ae:	e73c      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005b0:	459c      	cmp	ip, r3
 80005b2:	d300      	bcc.n	80005b6 <__aeabi_fadd+0x372>
 80005b4:	e739      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e737      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x37c>
 80005be:	e734      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	03db      	lsls	r3, r3, #15
 80005c4:	429f      	cmp	r7, r3
 80005c6:	d200      	bcs.n	80005ca <__aeabi_fadd+0x386>
 80005c8:	e72f      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005ca:	459c      	cmp	ip, r3
 80005cc:	d300      	bcc.n	80005d0 <__aeabi_fadd+0x38c>
 80005ce:	e72c      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005d0:	464c      	mov	r4, r9
 80005d2:	4667      	mov	r7, ip
 80005d4:	e729      	b.n	800042a <__aeabi_fadd+0x1e6>
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d100      	bne.n	80005dc <__aeabi_fadd+0x398>
 80005da:	e734      	b.n	8000446 <__aeabi_fadd+0x202>
 80005dc:	2300      	movs	r3, #0
 80005de:	08cf      	lsrs	r7, r1, #3
 80005e0:	e67a      	b.n	80002d8 <__aeabi_fadd+0x94>
 80005e2:	464c      	mov	r4, r9
 80005e4:	2301      	movs	r3, #1
 80005e6:	08ff      	lsrs	r7, r7, #3
 80005e8:	e676      	b.n	80002d8 <__aeabi_fadd+0x94>
 80005ea:	2f00      	cmp	r7, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0x3ac>
 80005ee:	e729      	b.n	8000444 <__aeabi_fadd+0x200>
 80005f0:	08ff      	lsrs	r7, r7, #3
 80005f2:	e671      	b.n	80002d8 <__aeabi_fadd+0x94>
 80005f4:	fbffffff 	.word	0xfbffffff
 80005f8:	7dffffff 	.word	0x7dffffff
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	2400      	movs	r4, #0
 8000600:	20ff      	movs	r0, #255	@ 0xff
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	e69d      	b.n	8000342 <__aeabi_fadd+0xfe>
 8000606:	2300      	movs	r3, #0
 8000608:	e666      	b.n	80002d8 <__aeabi_fadd+0x94>
 800060a:	2300      	movs	r3, #0
 800060c:	08d7      	lsrs	r7, r2, #3
 800060e:	e663      	b.n	80002d8 <__aeabi_fadd+0x94>
 8000610:	2001      	movs	r0, #1
 8000612:	0172      	lsls	r2, r6, #5
 8000614:	d500      	bpl.n	8000618 <__aeabi_fadd+0x3d4>
 8000616:	e6e7      	b.n	80003e8 <__aeabi_fadd+0x1a4>
 8000618:	0031      	movs	r1, r6
 800061a:	2300      	movs	r3, #0
 800061c:	08cf      	lsrs	r7, r1, #3
 800061e:	e65b      	b.n	80002d8 <__aeabi_fadd+0x94>
 8000620:	2301      	movs	r3, #1
 8000622:	08c7      	lsrs	r7, r0, #3
 8000624:	e658      	b.n	80002d8 <__aeabi_fadd+0x94>
 8000626:	46c0      	nop			@ (mov r8, r8)

08000628 <__aeabi_fmul>:
 8000628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062a:	464f      	mov	r7, r9
 800062c:	4646      	mov	r6, r8
 800062e:	46d6      	mov	lr, sl
 8000630:	0044      	lsls	r4, r0, #1
 8000632:	b5c0      	push	{r6, r7, lr}
 8000634:	0246      	lsls	r6, r0, #9
 8000636:	1c0f      	adds	r7, r1, #0
 8000638:	0a76      	lsrs	r6, r6, #9
 800063a:	0e24      	lsrs	r4, r4, #24
 800063c:	0fc5      	lsrs	r5, r0, #31
 800063e:	2c00      	cmp	r4, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fmul+0x1c>
 8000642:	e0da      	b.n	80007fa <__aeabi_fmul+0x1d2>
 8000644:	2cff      	cmp	r4, #255	@ 0xff
 8000646:	d074      	beq.n	8000732 <__aeabi_fmul+0x10a>
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	00f6      	lsls	r6, r6, #3
 800064c:	04db      	lsls	r3, r3, #19
 800064e:	431e      	orrs	r6, r3
 8000650:	2300      	movs	r3, #0
 8000652:	4699      	mov	r9, r3
 8000654:	469a      	mov	sl, r3
 8000656:	3c7f      	subs	r4, #127	@ 0x7f
 8000658:	027b      	lsls	r3, r7, #9
 800065a:	0a5b      	lsrs	r3, r3, #9
 800065c:	4698      	mov	r8, r3
 800065e:	007b      	lsls	r3, r7, #1
 8000660:	0e1b      	lsrs	r3, r3, #24
 8000662:	0fff      	lsrs	r7, r7, #31
 8000664:	2b00      	cmp	r3, #0
 8000666:	d074      	beq.n	8000752 <__aeabi_fmul+0x12a>
 8000668:	2bff      	cmp	r3, #255	@ 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fmul+0x46>
 800066c:	e08e      	b.n	800078c <__aeabi_fmul+0x164>
 800066e:	4642      	mov	r2, r8
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	00d2      	lsls	r2, r2, #3
 8000674:	04c9      	lsls	r1, r1, #19
 8000676:	4311      	orrs	r1, r2
 8000678:	3b7f      	subs	r3, #127	@ 0x7f
 800067a:	002a      	movs	r2, r5
 800067c:	18e4      	adds	r4, r4, r3
 800067e:	464b      	mov	r3, r9
 8000680:	407a      	eors	r2, r7
 8000682:	4688      	mov	r8, r1
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	2b0a      	cmp	r3, #10
 8000688:	dc75      	bgt.n	8000776 <__aeabi_fmul+0x14e>
 800068a:	464b      	mov	r3, r9
 800068c:	2000      	movs	r0, #0
 800068e:	2b02      	cmp	r3, #2
 8000690:	dd0f      	ble.n	80006b2 <__aeabi_fmul+0x8a>
 8000692:	4649      	mov	r1, r9
 8000694:	2301      	movs	r3, #1
 8000696:	408b      	lsls	r3, r1
 8000698:	21a6      	movs	r1, #166	@ 0xa6
 800069a:	00c9      	lsls	r1, r1, #3
 800069c:	420b      	tst	r3, r1
 800069e:	d169      	bne.n	8000774 <__aeabi_fmul+0x14c>
 80006a0:	2190      	movs	r1, #144	@ 0x90
 80006a2:	0089      	lsls	r1, r1, #2
 80006a4:	420b      	tst	r3, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_fmul+0x82>
 80006a8:	e100      	b.n	80008ac <__aeabi_fmul+0x284>
 80006aa:	2188      	movs	r1, #136	@ 0x88
 80006ac:	4219      	tst	r1, r3
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fmul+0x8a>
 80006b0:	e0f5      	b.n	800089e <__aeabi_fmul+0x276>
 80006b2:	4641      	mov	r1, r8
 80006b4:	0409      	lsls	r1, r1, #16
 80006b6:	0c09      	lsrs	r1, r1, #16
 80006b8:	4643      	mov	r3, r8
 80006ba:	0008      	movs	r0, r1
 80006bc:	0c35      	lsrs	r5, r6, #16
 80006be:	0436      	lsls	r6, r6, #16
 80006c0:	0c1b      	lsrs	r3, r3, #16
 80006c2:	0c36      	lsrs	r6, r6, #16
 80006c4:	4370      	muls	r0, r6
 80006c6:	4369      	muls	r1, r5
 80006c8:	435e      	muls	r6, r3
 80006ca:	435d      	muls	r5, r3
 80006cc:	1876      	adds	r6, r6, r1
 80006ce:	0c03      	lsrs	r3, r0, #16
 80006d0:	199b      	adds	r3, r3, r6
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d903      	bls.n	80006de <__aeabi_fmul+0xb6>
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	0249      	lsls	r1, r1, #9
 80006da:	468c      	mov	ip, r1
 80006dc:	4465      	add	r5, ip
 80006de:	0400      	lsls	r0, r0, #16
 80006e0:	0419      	lsls	r1, r3, #16
 80006e2:	0c00      	lsrs	r0, r0, #16
 80006e4:	1809      	adds	r1, r1, r0
 80006e6:	018e      	lsls	r6, r1, #6
 80006e8:	1e70      	subs	r0, r6, #1
 80006ea:	4186      	sbcs	r6, r0
 80006ec:	0c1b      	lsrs	r3, r3, #16
 80006ee:	0e89      	lsrs	r1, r1, #26
 80006f0:	195b      	adds	r3, r3, r5
 80006f2:	430e      	orrs	r6, r1
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	431e      	orrs	r6, r3
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	d46c      	bmi.n	80007d6 <__aeabi_fmul+0x1ae>
 80006fc:	0023      	movs	r3, r4
 80006fe:	337f      	adds	r3, #127	@ 0x7f
 8000700:	2b00      	cmp	r3, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_fmul+0xde>
 8000704:	e0b1      	b.n	800086a <__aeabi_fmul+0x242>
 8000706:	0015      	movs	r5, r2
 8000708:	0771      	lsls	r1, r6, #29
 800070a:	d00b      	beq.n	8000724 <__aeabi_fmul+0xfc>
 800070c:	200f      	movs	r0, #15
 800070e:	0021      	movs	r1, r4
 8000710:	4030      	ands	r0, r6
 8000712:	2804      	cmp	r0, #4
 8000714:	d006      	beq.n	8000724 <__aeabi_fmul+0xfc>
 8000716:	3604      	adds	r6, #4
 8000718:	0132      	lsls	r2, r6, #4
 800071a:	d503      	bpl.n	8000724 <__aeabi_fmul+0xfc>
 800071c:	4b6e      	ldr	r3, [pc, #440]	@ (80008d8 <__aeabi_fmul+0x2b0>)
 800071e:	401e      	ands	r6, r3
 8000720:	000b      	movs	r3, r1
 8000722:	3380      	adds	r3, #128	@ 0x80
 8000724:	2bfe      	cmp	r3, #254	@ 0xfe
 8000726:	dd00      	ble.n	800072a <__aeabi_fmul+0x102>
 8000728:	e0bd      	b.n	80008a6 <__aeabi_fmul+0x27e>
 800072a:	01b2      	lsls	r2, r6, #6
 800072c:	0a52      	lsrs	r2, r2, #9
 800072e:	b2db      	uxtb	r3, r3
 8000730:	e048      	b.n	80007c4 <__aeabi_fmul+0x19c>
 8000732:	2e00      	cmp	r6, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fmul+0x110>
 8000736:	e092      	b.n	800085e <__aeabi_fmul+0x236>
 8000738:	2308      	movs	r3, #8
 800073a:	4699      	mov	r9, r3
 800073c:	3b06      	subs	r3, #6
 800073e:	469a      	mov	sl, r3
 8000740:	027b      	lsls	r3, r7, #9
 8000742:	0a5b      	lsrs	r3, r3, #9
 8000744:	4698      	mov	r8, r3
 8000746:	007b      	lsls	r3, r7, #1
 8000748:	24ff      	movs	r4, #255	@ 0xff
 800074a:	0e1b      	lsrs	r3, r3, #24
 800074c:	0fff      	lsrs	r7, r7, #31
 800074e:	2b00      	cmp	r3, #0
 8000750:	d18a      	bne.n	8000668 <__aeabi_fmul+0x40>
 8000752:	4642      	mov	r2, r8
 8000754:	2a00      	cmp	r2, #0
 8000756:	d164      	bne.n	8000822 <__aeabi_fmul+0x1fa>
 8000758:	4649      	mov	r1, r9
 800075a:	3201      	adds	r2, #1
 800075c:	4311      	orrs	r1, r2
 800075e:	4689      	mov	r9, r1
 8000760:	290a      	cmp	r1, #10
 8000762:	dc08      	bgt.n	8000776 <__aeabi_fmul+0x14e>
 8000764:	407d      	eors	r5, r7
 8000766:	2001      	movs	r0, #1
 8000768:	b2ea      	uxtb	r2, r5
 800076a:	2902      	cmp	r1, #2
 800076c:	dc91      	bgt.n	8000692 <__aeabi_fmul+0x6a>
 800076e:	0015      	movs	r5, r2
 8000770:	2200      	movs	r2, #0
 8000772:	e027      	b.n	80007c4 <__aeabi_fmul+0x19c>
 8000774:	0015      	movs	r5, r2
 8000776:	4653      	mov	r3, sl
 8000778:	2b02      	cmp	r3, #2
 800077a:	d100      	bne.n	800077e <__aeabi_fmul+0x156>
 800077c:	e093      	b.n	80008a6 <__aeabi_fmul+0x27e>
 800077e:	2b03      	cmp	r3, #3
 8000780:	d01a      	beq.n	80007b8 <__aeabi_fmul+0x190>
 8000782:	2b01      	cmp	r3, #1
 8000784:	d12c      	bne.n	80007e0 <__aeabi_fmul+0x1b8>
 8000786:	2300      	movs	r3, #0
 8000788:	2200      	movs	r2, #0
 800078a:	e01b      	b.n	80007c4 <__aeabi_fmul+0x19c>
 800078c:	4643      	mov	r3, r8
 800078e:	34ff      	adds	r4, #255	@ 0xff
 8000790:	2b00      	cmp	r3, #0
 8000792:	d055      	beq.n	8000840 <__aeabi_fmul+0x218>
 8000794:	2103      	movs	r1, #3
 8000796:	464b      	mov	r3, r9
 8000798:	430b      	orrs	r3, r1
 800079a:	0019      	movs	r1, r3
 800079c:	2b0a      	cmp	r3, #10
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_fmul+0x17a>
 80007a0:	e092      	b.n	80008c8 <__aeabi_fmul+0x2a0>
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fmul+0x180>
 80007a6:	e08c      	b.n	80008c2 <__aeabi_fmul+0x29a>
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	03d2      	lsls	r2, r2, #15
 80007ac:	4216      	tst	r6, r2
 80007ae:	d003      	beq.n	80007b8 <__aeabi_fmul+0x190>
 80007b0:	4643      	mov	r3, r8
 80007b2:	4213      	tst	r3, r2
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fmul+0x190>
 80007b6:	e07d      	b.n	80008b4 <__aeabi_fmul+0x28c>
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	03d2      	lsls	r2, r2, #15
 80007bc:	4332      	orrs	r2, r6
 80007be:	0252      	lsls	r2, r2, #9
 80007c0:	0a52      	lsrs	r2, r2, #9
 80007c2:	23ff      	movs	r3, #255	@ 0xff
 80007c4:	05d8      	lsls	r0, r3, #23
 80007c6:	07ed      	lsls	r5, r5, #31
 80007c8:	4310      	orrs	r0, r2
 80007ca:	4328      	orrs	r0, r5
 80007cc:	bce0      	pop	{r5, r6, r7}
 80007ce:	46ba      	mov	sl, r7
 80007d0:	46b1      	mov	r9, r6
 80007d2:	46a8      	mov	r8, r5
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	2301      	movs	r3, #1
 80007d8:	0015      	movs	r5, r2
 80007da:	0871      	lsrs	r1, r6, #1
 80007dc:	401e      	ands	r6, r3
 80007de:	430e      	orrs	r6, r1
 80007e0:	0023      	movs	r3, r4
 80007e2:	3380      	adds	r3, #128	@ 0x80
 80007e4:	1c61      	adds	r1, r4, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dd41      	ble.n	800086e <__aeabi_fmul+0x246>
 80007ea:	0772      	lsls	r2, r6, #29
 80007ec:	d094      	beq.n	8000718 <__aeabi_fmul+0xf0>
 80007ee:	220f      	movs	r2, #15
 80007f0:	4032      	ands	r2, r6
 80007f2:	2a04      	cmp	r2, #4
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fmul+0x1d0>
 80007f6:	e78e      	b.n	8000716 <__aeabi_fmul+0xee>
 80007f8:	e78e      	b.n	8000718 <__aeabi_fmul+0xf0>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d105      	bne.n	800080a <__aeabi_fmul+0x1e2>
 80007fe:	2304      	movs	r3, #4
 8000800:	4699      	mov	r9, r3
 8000802:	3b03      	subs	r3, #3
 8000804:	2400      	movs	r4, #0
 8000806:	469a      	mov	sl, r3
 8000808:	e726      	b.n	8000658 <__aeabi_fmul+0x30>
 800080a:	0030      	movs	r0, r6
 800080c:	f000 fb3a 	bl	8000e84 <__clzsi2>
 8000810:	2476      	movs	r4, #118	@ 0x76
 8000812:	1f43      	subs	r3, r0, #5
 8000814:	409e      	lsls	r6, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4264      	negs	r4, r4
 800081a:	4699      	mov	r9, r3
 800081c:	469a      	mov	sl, r3
 800081e:	1a24      	subs	r4, r4, r0
 8000820:	e71a      	b.n	8000658 <__aeabi_fmul+0x30>
 8000822:	4640      	mov	r0, r8
 8000824:	f000 fb2e 	bl	8000e84 <__clzsi2>
 8000828:	464b      	mov	r3, r9
 800082a:	1a24      	subs	r4, r4, r0
 800082c:	3c76      	subs	r4, #118	@ 0x76
 800082e:	2b0a      	cmp	r3, #10
 8000830:	dca1      	bgt.n	8000776 <__aeabi_fmul+0x14e>
 8000832:	4643      	mov	r3, r8
 8000834:	3805      	subs	r0, #5
 8000836:	4083      	lsls	r3, r0
 8000838:	407d      	eors	r5, r7
 800083a:	4698      	mov	r8, r3
 800083c:	b2ea      	uxtb	r2, r5
 800083e:	e724      	b.n	800068a <__aeabi_fmul+0x62>
 8000840:	464a      	mov	r2, r9
 8000842:	3302      	adds	r3, #2
 8000844:	4313      	orrs	r3, r2
 8000846:	002a      	movs	r2, r5
 8000848:	407a      	eors	r2, r7
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	2b0a      	cmp	r3, #10
 800084e:	dc92      	bgt.n	8000776 <__aeabi_fmul+0x14e>
 8000850:	4649      	mov	r1, r9
 8000852:	0015      	movs	r5, r2
 8000854:	2900      	cmp	r1, #0
 8000856:	d026      	beq.n	80008a6 <__aeabi_fmul+0x27e>
 8000858:	4699      	mov	r9, r3
 800085a:	2002      	movs	r0, #2
 800085c:	e719      	b.n	8000692 <__aeabi_fmul+0x6a>
 800085e:	230c      	movs	r3, #12
 8000860:	4699      	mov	r9, r3
 8000862:	3b09      	subs	r3, #9
 8000864:	24ff      	movs	r4, #255	@ 0xff
 8000866:	469a      	mov	sl, r3
 8000868:	e6f6      	b.n	8000658 <__aeabi_fmul+0x30>
 800086a:	0015      	movs	r5, r2
 800086c:	0021      	movs	r1, r4
 800086e:	2201      	movs	r2, #1
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b1b      	cmp	r3, #27
 8000874:	dd00      	ble.n	8000878 <__aeabi_fmul+0x250>
 8000876:	e786      	b.n	8000786 <__aeabi_fmul+0x15e>
 8000878:	319e      	adds	r1, #158	@ 0x9e
 800087a:	0032      	movs	r2, r6
 800087c:	408e      	lsls	r6, r1
 800087e:	40da      	lsrs	r2, r3
 8000880:	1e73      	subs	r3, r6, #1
 8000882:	419e      	sbcs	r6, r3
 8000884:	4332      	orrs	r2, r6
 8000886:	0753      	lsls	r3, r2, #29
 8000888:	d004      	beq.n	8000894 <__aeabi_fmul+0x26c>
 800088a:	230f      	movs	r3, #15
 800088c:	4013      	ands	r3, r2
 800088e:	2b04      	cmp	r3, #4
 8000890:	d000      	beq.n	8000894 <__aeabi_fmul+0x26c>
 8000892:	3204      	adds	r2, #4
 8000894:	0153      	lsls	r3, r2, #5
 8000896:	d510      	bpl.n	80008ba <__aeabi_fmul+0x292>
 8000898:	2301      	movs	r3, #1
 800089a:	2200      	movs	r2, #0
 800089c:	e792      	b.n	80007c4 <__aeabi_fmul+0x19c>
 800089e:	003d      	movs	r5, r7
 80008a0:	4646      	mov	r6, r8
 80008a2:	4682      	mov	sl, r0
 80008a4:	e767      	b.n	8000776 <__aeabi_fmul+0x14e>
 80008a6:	23ff      	movs	r3, #255	@ 0xff
 80008a8:	2200      	movs	r2, #0
 80008aa:	e78b      	b.n	80007c4 <__aeabi_fmul+0x19c>
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	2500      	movs	r5, #0
 80008b0:	03d2      	lsls	r2, r2, #15
 80008b2:	e786      	b.n	80007c2 <__aeabi_fmul+0x19a>
 80008b4:	003d      	movs	r5, r7
 80008b6:	431a      	orrs	r2, r3
 80008b8:	e783      	b.n	80007c2 <__aeabi_fmul+0x19a>
 80008ba:	0192      	lsls	r2, r2, #6
 80008bc:	2300      	movs	r3, #0
 80008be:	0a52      	lsrs	r2, r2, #9
 80008c0:	e780      	b.n	80007c4 <__aeabi_fmul+0x19c>
 80008c2:	003d      	movs	r5, r7
 80008c4:	4646      	mov	r6, r8
 80008c6:	e777      	b.n	80007b8 <__aeabi_fmul+0x190>
 80008c8:	002a      	movs	r2, r5
 80008ca:	2301      	movs	r3, #1
 80008cc:	407a      	eors	r2, r7
 80008ce:	408b      	lsls	r3, r1
 80008d0:	2003      	movs	r0, #3
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	e6e9      	b.n	80006aa <__aeabi_fmul+0x82>
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	f7ffffff 	.word	0xf7ffffff

080008dc <__aeabi_fsub>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	4647      	mov	r7, r8
 80008e0:	46ce      	mov	lr, r9
 80008e2:	0243      	lsls	r3, r0, #9
 80008e4:	b580      	push	{r7, lr}
 80008e6:	0a5f      	lsrs	r7, r3, #9
 80008e8:	099b      	lsrs	r3, r3, #6
 80008ea:	0045      	lsls	r5, r0, #1
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	469c      	mov	ip, r3
 80008f0:	024b      	lsls	r3, r1, #9
 80008f2:	0fc4      	lsrs	r4, r0, #31
 80008f4:	0fce      	lsrs	r6, r1, #31
 80008f6:	0e2d      	lsrs	r5, r5, #24
 80008f8:	0a58      	lsrs	r0, r3, #9
 80008fa:	0e12      	lsrs	r2, r2, #24
 80008fc:	0999      	lsrs	r1, r3, #6
 80008fe:	2aff      	cmp	r2, #255	@ 0xff
 8000900:	d06b      	beq.n	80009da <__aeabi_fsub+0xfe>
 8000902:	2301      	movs	r3, #1
 8000904:	405e      	eors	r6, r3
 8000906:	1aab      	subs	r3, r5, r2
 8000908:	42b4      	cmp	r4, r6
 800090a:	d04b      	beq.n	80009a4 <__aeabi_fsub+0xc8>
 800090c:	2b00      	cmp	r3, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_fsub+0x36>
 8000910:	e0ff      	b.n	8000b12 <__aeabi_fsub+0x236>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x3c>
 8000916:	e088      	b.n	8000a2a <__aeabi_fsub+0x14e>
 8000918:	2dff      	cmp	r5, #255	@ 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fsub+0x42>
 800091c:	e0ef      	b.n	8000afe <__aeabi_fsub+0x222>
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	04d2      	lsls	r2, r2, #19
 8000922:	4311      	orrs	r1, r2
 8000924:	2001      	movs	r0, #1
 8000926:	2b1b      	cmp	r3, #27
 8000928:	dc08      	bgt.n	800093c <__aeabi_fsub+0x60>
 800092a:	0008      	movs	r0, r1
 800092c:	2220      	movs	r2, #32
 800092e:	40d8      	lsrs	r0, r3
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4099      	lsls	r1, r3
 8000934:	000b      	movs	r3, r1
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	4193      	sbcs	r3, r2
 800093a:	4318      	orrs	r0, r3
 800093c:	4663      	mov	r3, ip
 800093e:	1a1b      	subs	r3, r3, r0
 8000940:	469c      	mov	ip, r3
 8000942:	4663      	mov	r3, ip
 8000944:	015b      	lsls	r3, r3, #5
 8000946:	d400      	bmi.n	800094a <__aeabi_fsub+0x6e>
 8000948:	e0cd      	b.n	8000ae6 <__aeabi_fsub+0x20a>
 800094a:	4663      	mov	r3, ip
 800094c:	019f      	lsls	r7, r3, #6
 800094e:	09bf      	lsrs	r7, r7, #6
 8000950:	0038      	movs	r0, r7
 8000952:	f000 fa97 	bl	8000e84 <__clzsi2>
 8000956:	003b      	movs	r3, r7
 8000958:	3805      	subs	r0, #5
 800095a:	4083      	lsls	r3, r0
 800095c:	4285      	cmp	r5, r0
 800095e:	dc00      	bgt.n	8000962 <__aeabi_fsub+0x86>
 8000960:	e0a2      	b.n	8000aa8 <__aeabi_fsub+0x1cc>
 8000962:	4ab7      	ldr	r2, [pc, #732]	@ (8000c40 <__aeabi_fsub+0x364>)
 8000964:	1a2d      	subs	r5, r5, r0
 8000966:	401a      	ands	r2, r3
 8000968:	4694      	mov	ip, r2
 800096a:	075a      	lsls	r2, r3, #29
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x94>
 800096e:	e0c3      	b.n	8000af8 <__aeabi_fsub+0x21c>
 8000970:	220f      	movs	r2, #15
 8000972:	4013      	ands	r3, r2
 8000974:	2b04      	cmp	r3, #4
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x9e>
 8000978:	e0be      	b.n	8000af8 <__aeabi_fsub+0x21c>
 800097a:	2304      	movs	r3, #4
 800097c:	4698      	mov	r8, r3
 800097e:	44c4      	add	ip, r8
 8000980:	4663      	mov	r3, ip
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fsub+0xac>
 8000986:	e0b7      	b.n	8000af8 <__aeabi_fsub+0x21c>
 8000988:	1c68      	adds	r0, r5, #1
 800098a:	2dfe      	cmp	r5, #254	@ 0xfe
 800098c:	d000      	beq.n	8000990 <__aeabi_fsub+0xb4>
 800098e:	e0a5      	b.n	8000adc <__aeabi_fsub+0x200>
 8000990:	20ff      	movs	r0, #255	@ 0xff
 8000992:	2200      	movs	r2, #0
 8000994:	05c0      	lsls	r0, r0, #23
 8000996:	4310      	orrs	r0, r2
 8000998:	07e4      	lsls	r4, r4, #31
 800099a:	4320      	orrs	r0, r4
 800099c:	bcc0      	pop	{r6, r7}
 800099e:	46b9      	mov	r9, r7
 80009a0:	46b0      	mov	r8, r6
 80009a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dc00      	bgt.n	80009aa <__aeabi_fsub+0xce>
 80009a8:	e1eb      	b.n	8000d82 <__aeabi_fsub+0x4a6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d046      	beq.n	8000a3c <__aeabi_fsub+0x160>
 80009ae:	2dff      	cmp	r5, #255	@ 0xff
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0xd8>
 80009b2:	e0a4      	b.n	8000afe <__aeabi_fsub+0x222>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	04d2      	lsls	r2, r2, #19
 80009b8:	4311      	orrs	r1, r2
 80009ba:	2b1b      	cmp	r3, #27
 80009bc:	dc00      	bgt.n	80009c0 <__aeabi_fsub+0xe4>
 80009be:	e0fb      	b.n	8000bb8 <__aeabi_fsub+0x2dc>
 80009c0:	2305      	movs	r3, #5
 80009c2:	4698      	mov	r8, r3
 80009c4:	002b      	movs	r3, r5
 80009c6:	44c4      	add	ip, r8
 80009c8:	4662      	mov	r2, ip
 80009ca:	08d7      	lsrs	r7, r2, #3
 80009cc:	2bff      	cmp	r3, #255	@ 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0xf6>
 80009d0:	e095      	b.n	8000afe <__aeabi_fsub+0x222>
 80009d2:	027a      	lsls	r2, r7, #9
 80009d4:	0a52      	lsrs	r2, r2, #9
 80009d6:	b2d8      	uxtb	r0, r3
 80009d8:	e7dc      	b.n	8000994 <__aeabi_fsub+0xb8>
 80009da:	002b      	movs	r3, r5
 80009dc:	3bff      	subs	r3, #255	@ 0xff
 80009de:	4699      	mov	r9, r3
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d118      	bne.n	8000a16 <__aeabi_fsub+0x13a>
 80009e4:	2301      	movs	r3, #1
 80009e6:	405e      	eors	r6, r3
 80009e8:	42b4      	cmp	r4, r6
 80009ea:	d100      	bne.n	80009ee <__aeabi_fsub+0x112>
 80009ec:	e0ca      	b.n	8000b84 <__aeabi_fsub+0x2a8>
 80009ee:	464b      	mov	r3, r9
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d02d      	beq.n	8000a50 <__aeabi_fsub+0x174>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d000      	beq.n	80009fa <__aeabi_fsub+0x11e>
 80009f8:	e13c      	b.n	8000c74 <__aeabi_fsub+0x398>
 80009fa:	23ff      	movs	r3, #255	@ 0xff
 80009fc:	4664      	mov	r4, ip
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fsub+0x128>
 8000a02:	e15f      	b.n	8000cc4 <__aeabi_fsub+0x3e8>
 8000a04:	1e5d      	subs	r5, r3, #1
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x130>
 8000a0a:	e174      	b.n	8000cf6 <__aeabi_fsub+0x41a>
 8000a0c:	0034      	movs	r4, r6
 8000a0e:	2bff      	cmp	r3, #255	@ 0xff
 8000a10:	d074      	beq.n	8000afc <__aeabi_fsub+0x220>
 8000a12:	002b      	movs	r3, r5
 8000a14:	e103      	b.n	8000c1e <__aeabi_fsub+0x342>
 8000a16:	42b4      	cmp	r4, r6
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x140>
 8000a1a:	e09c      	b.n	8000b56 <__aeabi_fsub+0x27a>
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d017      	beq.n	8000a50 <__aeabi_fsub+0x174>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d0ea      	beq.n	80009fa <__aeabi_fsub+0x11e>
 8000a24:	0007      	movs	r7, r0
 8000a26:	0034      	movs	r4, r6
 8000a28:	e06c      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d0cc      	beq.n	80009c8 <__aeabi_fsub+0xec>
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d02b      	beq.n	8000a8c <__aeabi_fsub+0x1b0>
 8000a34:	2bff      	cmp	r3, #255	@ 0xff
 8000a36:	d062      	beq.n	8000afe <__aeabi_fsub+0x222>
 8000a38:	0013      	movs	r3, r2
 8000a3a:	e773      	b.n	8000924 <__aeabi_fsub+0x48>
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d0c3      	beq.n	80009c8 <__aeabi_fsub+0xec>
 8000a40:	1e5a      	subs	r2, r3, #1
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x16c>
 8000a46:	e11e      	b.n	8000c86 <__aeabi_fsub+0x3aa>
 8000a48:	2bff      	cmp	r3, #255	@ 0xff
 8000a4a:	d058      	beq.n	8000afe <__aeabi_fsub+0x222>
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	e7b4      	b.n	80009ba <__aeabi_fsub+0xde>
 8000a50:	22fe      	movs	r2, #254	@ 0xfe
 8000a52:	1c6b      	adds	r3, r5, #1
 8000a54:	421a      	tst	r2, r3
 8000a56:	d10d      	bne.n	8000a74 <__aeabi_fsub+0x198>
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d060      	beq.n	8000b1e <__aeabi_fsub+0x242>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d000      	beq.n	8000a64 <__aeabi_fsub+0x188>
 8000a62:	e120      	b.n	8000ca6 <__aeabi_fsub+0x3ca>
 8000a64:	2900      	cmp	r1, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_fsub+0x18e>
 8000a68:	e128      	b.n	8000cbc <__aeabi_fsub+0x3e0>
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	20ff      	movs	r0, #255	@ 0xff
 8000a70:	03d2      	lsls	r2, r2, #15
 8000a72:	e78f      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000a74:	4663      	mov	r3, ip
 8000a76:	1a5f      	subs	r7, r3, r1
 8000a78:	017b      	lsls	r3, r7, #5
 8000a7a:	d500      	bpl.n	8000a7e <__aeabi_fsub+0x1a2>
 8000a7c:	e0fe      	b.n	8000c7c <__aeabi_fsub+0x3a0>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fsub+0x1a8>
 8000a82:	e765      	b.n	8000950 <__aeabi_fsub+0x74>
 8000a84:	2400      	movs	r4, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	2200      	movs	r2, #0
 8000a8a:	e783      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000a8c:	4663      	mov	r3, ip
 8000a8e:	1a59      	subs	r1, r3, r1
 8000a90:	014b      	lsls	r3, r1, #5
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_fsub+0x1ba>
 8000a94:	e119      	b.n	8000cca <__aeabi_fsub+0x3ee>
 8000a96:	018f      	lsls	r7, r1, #6
 8000a98:	09bf      	lsrs	r7, r7, #6
 8000a9a:	0038      	movs	r0, r7
 8000a9c:	f000 f9f2 	bl	8000e84 <__clzsi2>
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	3805      	subs	r0, #5
 8000aa4:	4083      	lsls	r3, r0
 8000aa6:	2501      	movs	r5, #1
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	1b40      	subs	r0, r0, r5
 8000aac:	3001      	adds	r0, #1
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	40c1      	lsrs	r1, r0
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	4193      	sbcs	r3, r2
 8000aba:	4319      	orrs	r1, r3
 8000abc:	468c      	mov	ip, r1
 8000abe:	1e0b      	subs	r3, r1, #0
 8000ac0:	d0e1      	beq.n	8000a86 <__aeabi_fsub+0x1aa>
 8000ac2:	075b      	lsls	r3, r3, #29
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fsub+0x1ec>
 8000ac6:	e152      	b.n	8000d6e <__aeabi_fsub+0x492>
 8000ac8:	230f      	movs	r3, #15
 8000aca:	2500      	movs	r5, #0
 8000acc:	400b      	ands	r3, r1
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_fsub+0x1f8>
 8000ad2:	e752      	b.n	800097a <__aeabi_fsub+0x9e>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	014a      	lsls	r2, r1, #5
 8000ad8:	d400      	bmi.n	8000adc <__aeabi_fsub+0x200>
 8000ada:	e092      	b.n	8000c02 <__aeabi_fsub+0x326>
 8000adc:	b2c0      	uxtb	r0, r0
 8000ade:	4663      	mov	r3, ip
 8000ae0:	019a      	lsls	r2, r3, #6
 8000ae2:	0a52      	lsrs	r2, r2, #9
 8000ae4:	e756      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	075b      	lsls	r3, r3, #29
 8000aea:	d005      	beq.n	8000af8 <__aeabi_fsub+0x21c>
 8000aec:	230f      	movs	r3, #15
 8000aee:	4662      	mov	r2, ip
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d000      	beq.n	8000af8 <__aeabi_fsub+0x21c>
 8000af6:	e740      	b.n	800097a <__aeabi_fsub+0x9e>
 8000af8:	002b      	movs	r3, r5
 8000afa:	e765      	b.n	80009c8 <__aeabi_fsub+0xec>
 8000afc:	0007      	movs	r7, r0
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fsub+0x228>
 8000b02:	e745      	b.n	8000990 <__aeabi_fsub+0xb4>
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	03d2      	lsls	r2, r2, #15
 8000b08:	433a      	orrs	r2, r7
 8000b0a:	0252      	lsls	r2, r2, #9
 8000b0c:	20ff      	movs	r0, #255	@ 0xff
 8000b0e:	0a52      	lsrs	r2, r2, #9
 8000b10:	e740      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d179      	bne.n	8000c0a <__aeabi_fsub+0x32e>
 8000b16:	22fe      	movs	r2, #254	@ 0xfe
 8000b18:	1c6b      	adds	r3, r5, #1
 8000b1a:	421a      	tst	r2, r3
 8000b1c:	d1aa      	bne.n	8000a74 <__aeabi_fsub+0x198>
 8000b1e:	4663      	mov	r3, ip
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fsub+0x24a>
 8000b24:	e0f5      	b.n	8000d12 <__aeabi_fsub+0x436>
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x250>
 8000b2a:	e0d1      	b.n	8000cd0 <__aeabi_fsub+0x3f4>
 8000b2c:	1a5f      	subs	r7, r3, r1
 8000b2e:	2380      	movs	r3, #128	@ 0x80
 8000b30:	04db      	lsls	r3, r3, #19
 8000b32:	421f      	tst	r7, r3
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0x25c>
 8000b36:	e10e      	b.n	8000d56 <__aeabi_fsub+0x47a>
 8000b38:	4662      	mov	r2, ip
 8000b3a:	2401      	movs	r4, #1
 8000b3c:	1a8a      	subs	r2, r1, r2
 8000b3e:	4694      	mov	ip, r2
 8000b40:	2000      	movs	r0, #0
 8000b42:	4034      	ands	r4, r6
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fsub+0x26e>
 8000b48:	e724      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	421a      	tst	r2, r3
 8000b4e:	d1c6      	bne.n	8000ade <__aeabi_fsub+0x202>
 8000b50:	2300      	movs	r3, #0
 8000b52:	08d7      	lsrs	r7, r2, #3
 8000b54:	e73d      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d017      	beq.n	8000b8a <__aeabi_fsub+0x2ae>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_fsub+0x284>
 8000b5e:	e0af      	b.n	8000cc0 <__aeabi_fsub+0x3e4>
 8000b60:	23ff      	movs	r3, #255	@ 0xff
 8000b62:	4665      	mov	r5, ip
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x28e>
 8000b68:	e0ad      	b.n	8000cc6 <__aeabi_fsub+0x3ea>
 8000b6a:	1e5e      	subs	r6, r3, #1
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x296>
 8000b70:	e089      	b.n	8000c86 <__aeabi_fsub+0x3aa>
 8000b72:	2bff      	cmp	r3, #255	@ 0xff
 8000b74:	d0c2      	beq.n	8000afc <__aeabi_fsub+0x220>
 8000b76:	2e1b      	cmp	r6, #27
 8000b78:	dc00      	bgt.n	8000b7c <__aeabi_fsub+0x2a0>
 8000b7a:	e0ab      	b.n	8000cd4 <__aeabi_fsub+0x3f8>
 8000b7c:	1d4b      	adds	r3, r1, #5
 8000b7e:	469c      	mov	ip, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	e721      	b.n	80009c8 <__aeabi_fsub+0xec>
 8000b84:	464b      	mov	r3, r9
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d170      	bne.n	8000c6c <__aeabi_fsub+0x390>
 8000b8a:	22fe      	movs	r2, #254	@ 0xfe
 8000b8c:	1c6b      	adds	r3, r5, #1
 8000b8e:	421a      	tst	r2, r3
 8000b90:	d15e      	bne.n	8000c50 <__aeabi_fsub+0x374>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d000      	beq.n	8000b98 <__aeabi_fsub+0x2bc>
 8000b96:	e0c3      	b.n	8000d20 <__aeabi_fsub+0x444>
 8000b98:	4663      	mov	r3, ip
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x2c4>
 8000b9e:	e0d0      	b.n	8000d42 <__aeabi_fsub+0x466>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_fsub+0x2ca>
 8000ba4:	e094      	b.n	8000cd0 <__aeabi_fsub+0x3f4>
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	4462      	add	r2, ip
 8000baa:	0153      	lsls	r3, r2, #5
 8000bac:	d400      	bmi.n	8000bb0 <__aeabi_fsub+0x2d4>
 8000bae:	e0d8      	b.n	8000d62 <__aeabi_fsub+0x486>
 8000bb0:	0192      	lsls	r2, r2, #6
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	0a52      	lsrs	r2, r2, #9
 8000bb6:	e6ed      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000bb8:	0008      	movs	r0, r1
 8000bba:	2220      	movs	r2, #32
 8000bbc:	40d8      	lsrs	r0, r3
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	4099      	lsls	r1, r3
 8000bc2:	000b      	movs	r3, r1
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	4193      	sbcs	r3, r2
 8000bc8:	4303      	orrs	r3, r0
 8000bca:	449c      	add	ip, r3
 8000bcc:	4663      	mov	r3, ip
 8000bce:	015b      	lsls	r3, r3, #5
 8000bd0:	d589      	bpl.n	8000ae6 <__aeabi_fsub+0x20a>
 8000bd2:	3501      	adds	r5, #1
 8000bd4:	2dff      	cmp	r5, #255	@ 0xff
 8000bd6:	d100      	bne.n	8000bda <__aeabi_fsub+0x2fe>
 8000bd8:	e6da      	b.n	8000990 <__aeabi_fsub+0xb4>
 8000bda:	4662      	mov	r2, ip
 8000bdc:	2301      	movs	r3, #1
 8000bde:	4919      	ldr	r1, [pc, #100]	@ (8000c44 <__aeabi_fsub+0x368>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	0852      	lsrs	r2, r2, #1
 8000be4:	400a      	ands	r2, r1
 8000be6:	431a      	orrs	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	4694      	mov	ip, r2
 8000bec:	075b      	lsls	r3, r3, #29
 8000bee:	d004      	beq.n	8000bfa <__aeabi_fsub+0x31e>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fsub+0x31e>
 8000bf8:	e6bf      	b.n	800097a <__aeabi_fsub+0x9e>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	d500      	bpl.n	8000c02 <__aeabi_fsub+0x326>
 8000c00:	e6c2      	b.n	8000988 <__aeabi_fsub+0xac>
 8000c02:	4663      	mov	r3, ip
 8000c04:	08df      	lsrs	r7, r3, #3
 8000c06:	002b      	movs	r3, r5
 8000c08:	e6e3      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000c0a:	1b53      	subs	r3, r2, r5
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x336>
 8000c10:	e6f4      	b.n	80009fc <__aeabi_fsub+0x120>
 8000c12:	2080      	movs	r0, #128	@ 0x80
 8000c14:	4664      	mov	r4, ip
 8000c16:	04c0      	lsls	r0, r0, #19
 8000c18:	4304      	orrs	r4, r0
 8000c1a:	46a4      	mov	ip, r4
 8000c1c:	0034      	movs	r4, r6
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2b1b      	cmp	r3, #27
 8000c22:	dc09      	bgt.n	8000c38 <__aeabi_fsub+0x35c>
 8000c24:	2520      	movs	r5, #32
 8000c26:	4660      	mov	r0, ip
 8000c28:	40d8      	lsrs	r0, r3
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	409d      	lsls	r5, r3
 8000c30:	002b      	movs	r3, r5
 8000c32:	1e5d      	subs	r5, r3, #1
 8000c34:	41ab      	sbcs	r3, r5
 8000c36:	4318      	orrs	r0, r3
 8000c38:	1a0b      	subs	r3, r1, r0
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	0015      	movs	r5, r2
 8000c3e:	e680      	b.n	8000942 <__aeabi_fsub+0x66>
 8000c40:	fbffffff 	.word	0xfbffffff
 8000c44:	7dffffff 	.word	0x7dffffff
 8000c48:	22fe      	movs	r2, #254	@ 0xfe
 8000c4a:	1c6b      	adds	r3, r5, #1
 8000c4c:	4213      	tst	r3, r2
 8000c4e:	d0a3      	beq.n	8000b98 <__aeabi_fsub+0x2bc>
 8000c50:	2bff      	cmp	r3, #255	@ 0xff
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fsub+0x37a>
 8000c54:	e69c      	b.n	8000990 <__aeabi_fsub+0xb4>
 8000c56:	4461      	add	r1, ip
 8000c58:	0849      	lsrs	r1, r1, #1
 8000c5a:	074a      	lsls	r2, r1, #29
 8000c5c:	d049      	beq.n	8000cf2 <__aeabi_fsub+0x416>
 8000c5e:	220f      	movs	r2, #15
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a04      	cmp	r2, #4
 8000c64:	d045      	beq.n	8000cf2 <__aeabi_fsub+0x416>
 8000c66:	1d0a      	adds	r2, r1, #4
 8000c68:	4694      	mov	ip, r2
 8000c6a:	e6ad      	b.n	80009c8 <__aeabi_fsub+0xec>
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_fsub+0x396>
 8000c70:	e776      	b.n	8000b60 <__aeabi_fsub+0x284>
 8000c72:	e68d      	b.n	8000990 <__aeabi_fsub+0xb4>
 8000c74:	0034      	movs	r4, r6
 8000c76:	20ff      	movs	r0, #255	@ 0xff
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e68b      	b.n	8000994 <__aeabi_fsub+0xb8>
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	2401      	movs	r4, #1
 8000c80:	1acf      	subs	r7, r1, r3
 8000c82:	4034      	ands	r4, r6
 8000c84:	e664      	b.n	8000950 <__aeabi_fsub+0x74>
 8000c86:	4461      	add	r1, ip
 8000c88:	014b      	lsls	r3, r1, #5
 8000c8a:	d56d      	bpl.n	8000d68 <__aeabi_fsub+0x48c>
 8000c8c:	0848      	lsrs	r0, r1, #1
 8000c8e:	4944      	ldr	r1, [pc, #272]	@ (8000da0 <__aeabi_fsub+0x4c4>)
 8000c90:	4001      	ands	r1, r0
 8000c92:	0743      	lsls	r3, r0, #29
 8000c94:	d02c      	beq.n	8000cf0 <__aeabi_fsub+0x414>
 8000c96:	230f      	movs	r3, #15
 8000c98:	4003      	ands	r3, r0
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d028      	beq.n	8000cf0 <__aeabi_fsub+0x414>
 8000c9e:	1d0b      	adds	r3, r1, #4
 8000ca0:	469c      	mov	ip, r3
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e690      	b.n	80009c8 <__aeabi_fsub+0xec>
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x3d0>
 8000caa:	e72b      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	03db      	lsls	r3, r3, #15
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	d200      	bcs.n	8000cb6 <__aeabi_fsub+0x3da>
 8000cb4:	e726      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d300      	bcc.n	8000cbc <__aeabi_fsub+0x3e0>
 8000cba:	e723      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000cbc:	2401      	movs	r4, #1
 8000cbe:	4034      	ands	r4, r6
 8000cc0:	0007      	movs	r7, r0
 8000cc2:	e71f      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000cc4:	0034      	movs	r4, r6
 8000cc6:	468c      	mov	ip, r1
 8000cc8:	e67e      	b.n	80009c8 <__aeabi_fsub+0xec>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	08cf      	lsrs	r7, r1, #3
 8000cce:	e680      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e67e      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000cd4:	2020      	movs	r0, #32
 8000cd6:	4665      	mov	r5, ip
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	4085      	lsls	r5, r0
 8000cdc:	4663      	mov	r3, ip
 8000cde:	0028      	movs	r0, r5
 8000ce0:	40f3      	lsrs	r3, r6
 8000ce2:	1e45      	subs	r5, r0, #1
 8000ce4:	41a8      	sbcs	r0, r5
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	469c      	mov	ip, r3
 8000cea:	0015      	movs	r5, r2
 8000cec:	448c      	add	ip, r1
 8000cee:	e76d      	b.n	8000bcc <__aeabi_fsub+0x2f0>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	08cf      	lsrs	r7, r1, #3
 8000cf4:	e66d      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000cf6:	1b0f      	subs	r7, r1, r4
 8000cf8:	017b      	lsls	r3, r7, #5
 8000cfa:	d528      	bpl.n	8000d4e <__aeabi_fsub+0x472>
 8000cfc:	01bf      	lsls	r7, r7, #6
 8000cfe:	09bf      	lsrs	r7, r7, #6
 8000d00:	0038      	movs	r0, r7
 8000d02:	f000 f8bf 	bl	8000e84 <__clzsi2>
 8000d06:	003b      	movs	r3, r7
 8000d08:	3805      	subs	r0, #5
 8000d0a:	4083      	lsls	r3, r0
 8000d0c:	0034      	movs	r4, r6
 8000d0e:	2501      	movs	r5, #1
 8000d10:	e6ca      	b.n	8000aa8 <__aeabi_fsub+0x1cc>
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x43c>
 8000d16:	e6b5      	b.n	8000a84 <__aeabi_fsub+0x1a8>
 8000d18:	2401      	movs	r4, #1
 8000d1a:	0007      	movs	r7, r0
 8000d1c:	4034      	ands	r4, r6
 8000d1e:	e658      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d20:	4663      	mov	r3, ip
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x44c>
 8000d26:	e6e9      	b.n	8000afc <__aeabi_fsub+0x220>
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x452>
 8000d2c:	e6ea      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	03db      	lsls	r3, r3, #15
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d200      	bcs.n	8000d38 <__aeabi_fsub+0x45c>
 8000d36:	e6e5      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	d300      	bcc.n	8000d3e <__aeabi_fsub+0x462>
 8000d3c:	e6e2      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000d3e:	0007      	movs	r7, r0
 8000d40:	e6e0      	b.n	8000b04 <__aeabi_fsub+0x228>
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x46c>
 8000d46:	e69e      	b.n	8000a86 <__aeabi_fsub+0x1aa>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	08cf      	lsrs	r7, r1, #3
 8000d4c:	e641      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d4e:	0034      	movs	r4, r6
 8000d50:	2301      	movs	r3, #1
 8000d52:	08ff      	lsrs	r7, r7, #3
 8000d54:	e63d      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d56:	2f00      	cmp	r7, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x480>
 8000d5a:	e693      	b.n	8000a84 <__aeabi_fsub+0x1a8>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	08ff      	lsrs	r7, r7, #3
 8000d60:	e637      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d62:	2300      	movs	r3, #0
 8000d64:	08d7      	lsrs	r7, r2, #3
 8000d66:	e634      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	08cf      	lsrs	r7, r1, #3
 8000d6c:	e631      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	000b      	movs	r3, r1
 8000d72:	04d2      	lsls	r2, r2, #19
 8000d74:	2001      	movs	r0, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	4211      	tst	r1, r2
 8000d7a:	d000      	beq.n	8000d7e <__aeabi_fsub+0x4a2>
 8000d7c:	e6ae      	b.n	8000adc <__aeabi_fsub+0x200>
 8000d7e:	08cf      	lsrs	r7, r1, #3
 8000d80:	e627      	b.n	80009d2 <__aeabi_fsub+0xf6>
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x4ac>
 8000d86:	e75f      	b.n	8000c48 <__aeabi_fsub+0x36c>
 8000d88:	1b56      	subs	r6, r2, r5
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d101      	bne.n	8000d92 <__aeabi_fsub+0x4b6>
 8000d8e:	0033      	movs	r3, r6
 8000d90:	e6e7      	b.n	8000b62 <__aeabi_fsub+0x286>
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	4660      	mov	r0, ip
 8000d96:	04db      	lsls	r3, r3, #19
 8000d98:	4318      	orrs	r0, r3
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	e6eb      	b.n	8000b76 <__aeabi_fsub+0x29a>
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	7dffffff 	.word	0x7dffffff

08000da4 <__aeabi_f2iz>:
 8000da4:	0241      	lsls	r1, r0, #9
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	0fc3      	lsrs	r3, r0, #31
 8000daa:	0a49      	lsrs	r1, r1, #9
 8000dac:	2000      	movs	r0, #0
 8000dae:	0e12      	lsrs	r2, r2, #24
 8000db0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000db2:	dd03      	ble.n	8000dbc <__aeabi_f2iz+0x18>
 8000db4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000db6:	dd02      	ble.n	8000dbe <__aeabi_f2iz+0x1a>
 8000db8:	4a09      	ldr	r2, [pc, #36]	@ (8000de0 <__aeabi_f2iz+0x3c>)
 8000dba:	1898      	adds	r0, r3, r2
 8000dbc:	4770      	bx	lr
 8000dbe:	2080      	movs	r0, #128	@ 0x80
 8000dc0:	0400      	lsls	r0, r0, #16
 8000dc2:	4301      	orrs	r1, r0
 8000dc4:	2a95      	cmp	r2, #149	@ 0x95
 8000dc6:	dc07      	bgt.n	8000dd8 <__aeabi_f2iz+0x34>
 8000dc8:	2096      	movs	r0, #150	@ 0x96
 8000dca:	1a82      	subs	r2, r0, r2
 8000dcc:	40d1      	lsrs	r1, r2
 8000dce:	4248      	negs	r0, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f3      	bne.n	8000dbc <__aeabi_f2iz+0x18>
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	e7f1      	b.n	8000dbc <__aeabi_f2iz+0x18>
 8000dd8:	3a96      	subs	r2, #150	@ 0x96
 8000dda:	4091      	lsls	r1, r2
 8000ddc:	e7f7      	b.n	8000dce <__aeabi_f2iz+0x2a>
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	7fffffff 	.word	0x7fffffff

08000de4 <__aeabi_i2f>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d012      	beq.n	8000e10 <__aeabi_i2f+0x2c>
 8000dea:	17c3      	asrs	r3, r0, #31
 8000dec:	18c5      	adds	r5, r0, r3
 8000dee:	405d      	eors	r5, r3
 8000df0:	0fc4      	lsrs	r4, r0, #31
 8000df2:	0028      	movs	r0, r5
 8000df4:	f000 f846 	bl	8000e84 <__clzsi2>
 8000df8:	239e      	movs	r3, #158	@ 0x9e
 8000dfa:	1a1b      	subs	r3, r3, r0
 8000dfc:	2b96      	cmp	r3, #150	@ 0x96
 8000dfe:	dc0f      	bgt.n	8000e20 <__aeabi_i2f+0x3c>
 8000e00:	2808      	cmp	r0, #8
 8000e02:	d038      	beq.n	8000e76 <__aeabi_i2f+0x92>
 8000e04:	3808      	subs	r0, #8
 8000e06:	4085      	lsls	r5, r0
 8000e08:	026d      	lsls	r5, r5, #9
 8000e0a:	0a6d      	lsrs	r5, r5, #9
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	e002      	b.n	8000e16 <__aeabi_i2f+0x32>
 8000e10:	2400      	movs	r4, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	2500      	movs	r5, #0
 8000e16:	05c0      	lsls	r0, r0, #23
 8000e18:	4328      	orrs	r0, r5
 8000e1a:	07e4      	lsls	r4, r4, #31
 8000e1c:	4320      	orrs	r0, r4
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
 8000e20:	2b99      	cmp	r3, #153	@ 0x99
 8000e22:	dc14      	bgt.n	8000e4e <__aeabi_i2f+0x6a>
 8000e24:	1f42      	subs	r2, r0, #5
 8000e26:	4095      	lsls	r5, r2
 8000e28:	002a      	movs	r2, r5
 8000e2a:	4915      	ldr	r1, [pc, #84]	@ (8000e80 <__aeabi_i2f+0x9c>)
 8000e2c:	4011      	ands	r1, r2
 8000e2e:	0755      	lsls	r5, r2, #29
 8000e30:	d01c      	beq.n	8000e6c <__aeabi_i2f+0x88>
 8000e32:	250f      	movs	r5, #15
 8000e34:	402a      	ands	r2, r5
 8000e36:	2a04      	cmp	r2, #4
 8000e38:	d018      	beq.n	8000e6c <__aeabi_i2f+0x88>
 8000e3a:	3104      	adds	r1, #4
 8000e3c:	08ca      	lsrs	r2, r1, #3
 8000e3e:	0149      	lsls	r1, r1, #5
 8000e40:	d515      	bpl.n	8000e6e <__aeabi_i2f+0x8a>
 8000e42:	239f      	movs	r3, #159	@ 0x9f
 8000e44:	0252      	lsls	r2, r2, #9
 8000e46:	1a18      	subs	r0, r3, r0
 8000e48:	0a55      	lsrs	r5, r2, #9
 8000e4a:	b2c0      	uxtb	r0, r0
 8000e4c:	e7e3      	b.n	8000e16 <__aeabi_i2f+0x32>
 8000e4e:	2205      	movs	r2, #5
 8000e50:	0029      	movs	r1, r5
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	40d1      	lsrs	r1, r2
 8000e56:	0002      	movs	r2, r0
 8000e58:	321b      	adds	r2, #27
 8000e5a:	4095      	lsls	r5, r2
 8000e5c:	002a      	movs	r2, r5
 8000e5e:	1e55      	subs	r5, r2, #1
 8000e60:	41aa      	sbcs	r2, r5
 8000e62:	430a      	orrs	r2, r1
 8000e64:	4906      	ldr	r1, [pc, #24]	@ (8000e80 <__aeabi_i2f+0x9c>)
 8000e66:	4011      	ands	r1, r2
 8000e68:	0755      	lsls	r5, r2, #29
 8000e6a:	d1e2      	bne.n	8000e32 <__aeabi_i2f+0x4e>
 8000e6c:	08ca      	lsrs	r2, r1, #3
 8000e6e:	0252      	lsls	r2, r2, #9
 8000e70:	0a55      	lsrs	r5, r2, #9
 8000e72:	b2d8      	uxtb	r0, r3
 8000e74:	e7cf      	b.n	8000e16 <__aeabi_i2f+0x32>
 8000e76:	026d      	lsls	r5, r5, #9
 8000e78:	0a6d      	lsrs	r5, r5, #9
 8000e7a:	308e      	adds	r0, #142	@ 0x8e
 8000e7c:	e7cb      	b.n	8000e16 <__aeabi_i2f+0x32>
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	fbffffff 	.word	0xfbffffff

08000e84 <__clzsi2>:
 8000e84:	211c      	movs	r1, #28
 8000e86:	2301      	movs	r3, #1
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d301      	bcc.n	8000e92 <__clzsi2+0xe>
 8000e8e:	0c00      	lsrs	r0, r0, #16
 8000e90:	3910      	subs	r1, #16
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d301      	bcc.n	8000e9c <__clzsi2+0x18>
 8000e98:	0a00      	lsrs	r0, r0, #8
 8000e9a:	3908      	subs	r1, #8
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d301      	bcc.n	8000ea6 <__clzsi2+0x22>
 8000ea2:	0900      	lsrs	r0, r0, #4
 8000ea4:	3904      	subs	r1, #4
 8000ea6:	a202      	add	r2, pc, #8	@ (adr r2, 8000eb0 <__clzsi2+0x2c>)
 8000ea8:	5c10      	ldrb	r0, [r2, r0]
 8000eaa:	1840      	adds	r0, r0, r1
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	02020304 	.word	0x02020304
 8000eb4:	01010101 	.word	0x01010101
	...

08000ec0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	230c      	movs	r3, #12
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f004 fa1e 	bl	8005310 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000ed6:	4a27      	ldr	r2, [pc, #156]	@ (8000f74 <MX_ADC_Init+0xb4>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000eec:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f12:	22c2      	movs	r2, #194	@ 0xc2
 8000f14:	32ff      	adds	r2, #255	@ 0xff
 8000f16:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f20:	2224      	movs	r2, #36	@ 0x24
 8000f22:	2100      	movs	r1, #0
 8000f24:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 ffb2 	bl	8001e98 <HAL_ADC_Init>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f38:	f000 fa2c 	bl	8001394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	0152      	lsls	r2, r2, #5
 8000f48:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	0552      	lsls	r2, r2, #21
 8000f50:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f52:	1d3a      	adds	r2, r7, #4
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_ADC_Init+0xb0>)
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f001 f8e9 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000f62:	f000 fa17 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	20000078 	.word	0x20000078
 8000f74:	40012400 	.word	0x40012400

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	2414      	movs	r4, #20
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	2314      	movs	r3, #20
 8000f88:	001a      	movs	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f004 f9c0 	bl	8005310 <memset>
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <HAL_ADC_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12b      	bne.n	8000ff2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_ADC_MspInit+0x88>)
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_ADC_MspInit+0x88>)
 8000fa0:	2180      	movs	r1, #128	@ 0x80
 8000fa2:	0089      	lsls	r1, r1, #2
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	619a      	str	r2, [r3, #24]
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_ADC_MspInit+0x88>)
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_ADC_MspInit+0x88>)
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_ADC_MspInit+0x88>)
 8000fbc:	2180      	movs	r1, #128	@ 0x80
 8000fbe:	0289      	lsls	r1, r1, #10
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	615a      	str	r2, [r3, #20]
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_ADC_MspInit+0x88>)
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2203      	movs	r2, #3
 8000fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	193a      	adds	r2, r7, r4
 8000fe6:	2390      	movs	r3, #144	@ 0x90
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 fa8b 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b00b      	add	sp, #44	@ 0x2c
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	40012400 	.word	0x40012400
 8001000:	40021000 	.word	0x40021000

08001004 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <MX_GPIO_Init+0x48>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_GPIO_Init+0x48>)
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	0289      	lsls	r1, r1, #10
 8001014:	430a      	orrs	r2, r1
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_GPIO_Init+0x48>)
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_GPIO_Init+0x48>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <MX_GPIO_Init+0x48>)
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	02c9      	lsls	r1, r1, #11
 8001030:	430a      	orrs	r2, r1
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <MX_GPIO_Init+0x48>)
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	02db      	lsls	r3, r3, #11
 800103c:	4013      	ands	r3, r2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	40021000 	.word	0x40021000

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b0d3      	sub	sp, #332	@ 0x14c
 8001054:	af1e      	add	r7, sp, #120	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f000 fe97 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f8ab 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f7ff ffd1 	bl	8001004 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001062:	f000 fb87 	bl	8001774 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001066:	f000 fc49 	bl	80018fc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800106a:	f000 fde7 	bl	8001c3c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800106e:	f000 fca7 	bl	80019c0 <MX_TIM3_Init>
  MX_ADC_Init();
 8001072:	f7ff ff25 	bl	8000ec0 <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Initializing
  motor_initEncoder(htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001076:	4c42      	ldr	r4, [pc, #264]	@ (8001180 <main+0x130>)
 8001078:	2304      	movs	r3, #4
 800107a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800107c:	2300      	movs	r3, #0
 800107e:	930e      	str	r3, [sp, #56]	@ 0x38
 8001080:	466b      	mov	r3, sp
 8001082:	0018      	movs	r0, r3
 8001084:	0023      	movs	r3, r4
 8001086:	3310      	adds	r3, #16
 8001088:	2238      	movs	r2, #56	@ 0x38
 800108a:	0019      	movs	r1, r3
 800108c:	f004 f974 	bl	8005378 <memcpy>
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	6861      	ldr	r1, [r4, #4]
 8001094:	68a2      	ldr	r2, [r4, #8]
 8001096:	68e3      	ldr	r3, [r4, #12]
 8001098:	f000 f982 	bl	80013a0 <motor_initEncoder>
  motor_initPWM(htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800109c:	4c39      	ldr	r4, [pc, #228]	@ (8001184 <main+0x134>)
 800109e:	2304      	movs	r3, #4
 80010a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80010a2:	2300      	movs	r3, #0
 80010a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80010a6:	466b      	mov	r3, sp
 80010a8:	0018      	movs	r0, r3
 80010aa:	0023      	movs	r3, r4
 80010ac:	3310      	adds	r3, #16
 80010ae:	2238      	movs	r2, #56	@ 0x38
 80010b0:	0019      	movs	r1, r3
 80010b2:	f004 f961 	bl	8005378 <memcpy>
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	6861      	ldr	r1, [r4, #4]
 80010ba:	68a2      	ldr	r2, [r4, #8]
 80010bc:	68e3      	ldr	r3, [r4, #12]
 80010be:	f000 f995 	bl	80013ec <motor_initPWM>
  terminal_init(huart2);
 80010c2:	4c31      	ldr	r4, [pc, #196]	@ (8001188 <main+0x138>)
 80010c4:	466b      	mov	r3, sp
 80010c6:	0018      	movs	r0, r3
 80010c8:	0023      	movs	r3, r4
 80010ca:	3310      	adds	r3, #16
 80010cc:	2278      	movs	r2, #120	@ 0x78
 80010ce:	0019      	movs	r1, r3
 80010d0:	f004 f952 	bl	8005378 <memcpy>
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	6861      	ldr	r1, [r4, #4]
 80010d8:	68a2      	ldr	r2, [r4, #8]
 80010da:	68e3      	ldr	r3, [r4, #12]
 80010dc:	f000 fad8 	bl	8001690 <terminal_init>
  // Start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim3);
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <main+0x13c>)
 80010e2:	0018      	movs	r0, r3
 80010e4:	f002 f9c8 	bl	8003478 <HAL_TIM_Base_Start_IT>

  // Header code
  terminal_print("---------------------------\r\n");
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <main+0x140>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fb2a 	bl	8001744 <terminal_print>
  terminal_print("--- Controls Systems II ---\r\n");
 80010f0:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <main+0x144>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fb26 	bl	8001744 <terminal_print>
  terminal_print("---  Servo Lab Project  ---\r\n");
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <main+0x148>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fb22 	bl	8001744 <terminal_print>
  terminal_print("---------------------------\r\n");
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <main+0x140>)
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fb1e 	bl	8001744 <terminal_print>

  char rxBuff[100] = {'\0'};
 8001108:	2368      	movs	r3, #104	@ 0x68
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	0018      	movs	r0, r3
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	001a      	movs	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	f004 f8fc 	bl	8005310 <memset>
  char message[100] = {'\0'};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	0018      	movs	r0, r3
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	001a      	movs	r2, r3
 8001120:	2100      	movs	r1, #0
 8001122:	f004 f8f5 	bl	8005310 <memset>
  while (1)
  {
	  terminal_receive(rxBuff, sizeof(rxBuff));
 8001126:	2468      	movs	r4, #104	@ 0x68
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2164      	movs	r1, #100	@ 0x64
 800112c:	0018      	movs	r0, r3
 800112e:	f000 fac9 	bl	80016c4 <terminal_receive>
	  sscanf(rxBuff, "%d", &pwmValue);
 8001132:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <main+0x14c>)
 8001134:	491a      	ldr	r1, [pc, #104]	@ (80011a0 <main+0x150>)
 8001136:	193b      	adds	r3, r7, r4
 8001138:	0018      	movs	r0, r3
 800113a:	f004 f8bd 	bl	80052b8 <siscanf>
	  terminal_print("\r\n");
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <main+0x154>)
 8001140:	0018      	movs	r0, r3
 8001142:	f000 faff 	bl	8001744 <terminal_print>
	  HAL_Delay(2500);
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <main+0x158>)
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fe81 	bl	8001e50 <HAL_Delay>
	  for (int i=1; i<=0; i++){
 800114e:	2301      	movs	r3, #1
 8001150:	22cc      	movs	r2, #204	@ 0xcc
 8001152:	18ba      	adds	r2, r7, r2
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00c      	b.n	8001172 <main+0x122>
		 sprintf(message, "AD Value = %d\r\n", adValue);
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <main+0x15c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4914      	ldr	r1, [pc, #80]	@ (80011b0 <main+0x160>)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	0018      	movs	r0, r3
 8001162:	f004 f887 	bl	8005274 <siprintf>
	  for (int i=1; i<=0; i++){
 8001166:	22cc      	movs	r2, #204	@ 0xcc
 8001168:	18bb      	adds	r3, r7, r2
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	18ba      	adds	r2, r7, r2
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	23cc      	movs	r3, #204	@ 0xcc
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dded      	ble.n	8001158 <main+0x108>
	  terminal_receive(rxBuff, sizeof(rxBuff));
 800117c:	e7d3      	b.n	8001126 <main+0xd6>
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	20000244 	.word	0x20000244
 8001184:	200001fc 	.word	0x200001fc
 8001188:	200002d4 	.word	0x200002d4
 800118c:	2000028c 	.word	0x2000028c
 8001190:	08006578 	.word	0x08006578
 8001194:	08006598 	.word	0x08006598
 8001198:	080065b8 	.word	0x080065b8
 800119c:	200000b8 	.word	0x200000b8
 80011a0:	080065d8 	.word	0x080065d8
 80011a4:	080065dc 	.word	0x080065dc
 80011a8:	000009c4 	.word	0x000009c4
 80011ac:	200000bc 	.word	0x200000bc
 80011b0:	080065e0 	.word	0x080065e0

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b099      	sub	sp, #100	@ 0x64
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	242c      	movs	r4, #44	@ 0x2c
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	0018      	movs	r0, r3
 80011c0:	2334      	movs	r3, #52	@ 0x34
 80011c2:	001a      	movs	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	f004 f8a3 	bl	8005310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ca:	231c      	movs	r3, #28
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	0018      	movs	r0, r3
 80011d0:	2310      	movs	r3, #16
 80011d2:	001a      	movs	r2, r3
 80011d4:	2100      	movs	r1, #0
 80011d6:	f004 f89b 	bl	8005310 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011da:	003b      	movs	r3, r7
 80011dc:	0018      	movs	r0, r3
 80011de:	231c      	movs	r3, #28
 80011e0:	001a      	movs	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f004 f894 	bl	8005310 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80011e8:	0021      	movs	r1, r4
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2230      	movs	r2, #48	@ 0x30
 80011ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2201      	movs	r2, #1
 80011f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2201      	movs	r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2210      	movs	r2, #16
 8001200:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	187b      	adds	r3, r7, r1
 800120a:	0018      	movs	r0, r3
 800120c:	f001 faf4 	bl	80027f8 <HAL_RCC_OscConfig>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001214:	f000 f8be 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	211c      	movs	r1, #28
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2203      	movs	r2, #3
 8001224:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2101      	movs	r1, #1
 8001236:	0018      	movs	r0, r3
 8001238:	f001 fe64 	bl	8002f04 <HAL_RCC_ClockConfig>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001240:	f000 f8a8 	bl	8001394 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001244:	003b      	movs	r3, r7
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800124a:	003b      	movs	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	003b      	movs	r3, r7
 8001252:	0018      	movs	r0, r3
 8001254:	f001 ffc2 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800125c:	f000 f89a 	bl	8001394 <Error_Handler>
  }
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b019      	add	sp, #100	@ 0x64
 8001266:	bd90      	pop	{r4, r7, pc}

08001268 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	// This interrupt subroutine will run every T sec, where T is the period of Timer1
	motor_PWMSetForward(pwmValue);	// Modify he duty cycle accordingly
 8001270:	4b3c      	ldr	r3, [pc, #240]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f000 f8ed 	bl	8001454 <motor_PWMSetForward>
	adValue = HAL_ADC_GetValue(&hadc); // make sure the voltage is positive
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800127c:	0018      	movs	r0, r3
 800127e:	f000 ff4b 	bl	8002118 <HAL_ADC_GetValue>
 8001282:	0003      	movs	r3, r0
 8001284:	001a      	movs	r2, r3
 8001286:	4b39      	ldr	r3, [pc, #228]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001288:	601a      	str	r2, [r3, #0]

	ek = (float)(refValue - adValue);
 800128a:	4b39      	ldr	r3, [pc, #228]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fda5 	bl	8000de4 <__aeabi_i2f>
 800129a:	1c02      	adds	r2, r0, #0
 800129c:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800129e:	601a      	str	r2, [r3, #0]
	mk = kdi*(ek + ek1) + mk1;
 80012a0:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	1c19      	adds	r1, r3, #0
 80012aa:	1c10      	adds	r0, r2, #0
 80012ac:	f7fe ffca 	bl	8000244 <__aeabi_fadd>
 80012b0:	1c03      	adds	r3, r0, #0
 80012b2:	1c1a      	adds	r2, r3, #0
 80012b4:	4b31      	ldr	r3, [pc, #196]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012b6:	1c19      	adds	r1, r3, #0
 80012b8:	1c10      	adds	r0, r2, #0
 80012ba:	f7ff f9b5 	bl	8000628 <__aeabi_fmul>
 80012be:	1c03      	adds	r3, r0, #0
 80012c0:	1c1a      	adds	r2, r3, #0
 80012c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1c19      	adds	r1, r3, #0
 80012c8:	1c10      	adds	r0, r2, #0
 80012ca:	f7fe ffbb 	bl	8000244 <__aeabi_fadd>
 80012ce:	1c03      	adds	r3, r0, #0
 80012d0:	1c1a      	adds	r2, r3, #0
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012d4:	601a      	str	r2, [r3, #0]
	plantPWM = mk - kp*(float)(adValue);
 80012d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012d8:	681c      	ldr	r4, [r3, #0]
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fd80 	bl	8000de4 <__aeabi_i2f>
 80012e4:	1c03      	adds	r3, r0, #0
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	05d2      	lsls	r2, r2, #23
 80012ea:	1c11      	adds	r1, r2, #0
 80012ec:	1c18      	adds	r0, r3, #0
 80012ee:	f7ff f99b 	bl	8000628 <__aeabi_fmul>
 80012f2:	1c03      	adds	r3, r0, #0
 80012f4:	1c19      	adds	r1, r3, #0
 80012f6:	1c20      	adds	r0, r4, #0
 80012f8:	f7ff faf0 	bl	80008dc <__aeabi_fsub>
 80012fc:	1c03      	adds	r3, r0, #0
 80012fe:	1c18      	adds	r0, r3, #0
 8001300:	f7ff fd50 	bl	8000da4 <__aeabi_f2iz>
 8001304:	0002      	movs	r2, r0
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001308:	601a      	str	r2, [r3, #0]

	if(plantPWM > 1023) plantPWM = 1023;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	429a      	cmp	r2, r3
 8001314:	db02      	blt.n	800131c <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001318:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800131a:	601a      	str	r2, [r3, #0]
	if(plantPWM < -1023) plantPWM = -1023;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1b      	ldr	r2, [pc, #108]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001322:	4293      	cmp	r3, r2
 8001324:	da02      	bge.n	800132c <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001328:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800132a:	601a      	str	r2, [r3, #0]
	if(plantPWM >= 0){
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db05      	blt.n	8001340 <HAL_TIM_PeriodElapsedCallback+0xd8>
		motor_PWMSetForward((int)plantPWM);
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0018      	movs	r0, r3
 800133a:	f000 f88b 	bl	8001454 <motor_PWMSetForward>
 800133e:	e004      	b.n	800134a <HAL_TIM_PeriodElapsedCallback+0xe2>
	}
	else{
		motor_PWMSetBackward((int)plantPWM);
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0018      	movs	r0, r3
 8001346:	f000 f8d1 	bl	80014ec <motor_PWMSetBackward>
	}

	mk1 = mk;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001350:	601a      	str	r2, [r3, #0]
	ek1 = ek;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b003      	add	sp, #12
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	200000b8 	.word	0x200000b8
 8001368:	20000078 	.word	0x20000078
 800136c:	200000bc 	.word	0x200000bc
 8001370:	200000c0 	.word	0x200000c0
 8001374:	200000c4 	.word	0x200000c4
 8001378:	200000cc 	.word	0x200000cc
 800137c:	3b03126f 	.word	0x3b03126f
 8001380:	200000d0 	.word	0x200000d0
 8001384:	200000c8 	.word	0x200000c8
 8001388:	200000d4 	.word	0x200000d4
 800138c:	000003ff 	.word	0x000003ff
 8001390:	fffffc01 	.word	0xfffffc01

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <motor_initEncoder>:
TIM_HandleTypeDef encoderHandle;
TIM_HandleTypeDef PWMHandle;
int timmerChannel1 = 0;
int timmerChannel2 = 0;

void motor_initEncoder(TIM_HandleTypeDef timmerHandler, uint32_t channel1, uint32_t channel2){
 80013a0:	b084      	sub	sp, #16
 80013a2:	b5b0      	push	{r4, r5, r7, lr}
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	2510      	movs	r5, #16
 80013a8:	197c      	adds	r4, r7, r5
 80013aa:	6020      	str	r0, [r4, #0]
 80013ac:	6061      	str	r1, [r4, #4]
 80013ae:	60a2      	str	r2, [r4, #8]
 80013b0:	60e3      	str	r3, [r4, #12]
	encoderHandle = timmerHandler;
 80013b2:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <motor_initEncoder+0x48>)
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	0010      	movs	r0, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	2348      	movs	r3, #72	@ 0x48
 80013bc:	001a      	movs	r2, r3
 80013be:	f003 ffdb 	bl	8005378 <memcpy>
	HAL_TIM_Encoder_Start(&encoderHandle, channel1);
 80013c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <motor_initEncoder+0x48>)
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f002 fa5f 	bl	800388c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&encoderHandle, channel2);
 80013ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <motor_initEncoder+0x48>)
 80013d2:	0011      	movs	r1, r2
 80013d4:	0018      	movs	r0, r3
 80013d6:	f002 fa59 	bl	800388c <HAL_TIM_Encoder_Start>
}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	bcb0      	pop	{r4, r5, r7}
 80013e0:	bc08      	pop	{r3}
 80013e2:	b004      	add	sp, #16
 80013e4:	4718      	bx	r3
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	200000d8 	.word	0x200000d8

080013ec <motor_initPWM>:
void motor_initPWM(TIM_HandleTypeDef timmerHandler, uint32_t channel1, uint32_t channel2){
 80013ec:	b084      	sub	sp, #16
 80013ee:	b5b0      	push	{r4, r5, r7, lr}
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	2510      	movs	r5, #16
 80013f4:	197c      	adds	r4, r7, r5
 80013f6:	6020      	str	r0, [r4, #0]
 80013f8:	6061      	str	r1, [r4, #4]
 80013fa:	60a2      	str	r2, [r4, #8]
 80013fc:	60e3      	str	r3, [r4, #12]
	PWMHandle = timmerHandler;
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <motor_initPWM+0x5c>)
 8001400:	197b      	adds	r3, r7, r5
 8001402:	0010      	movs	r0, r2
 8001404:	0019      	movs	r1, r3
 8001406:	2348      	movs	r3, #72	@ 0x48
 8001408:	001a      	movs	r2, r3
 800140a:	f003 ffb5 	bl	8005378 <memcpy>
	timmerChannel1 = channel1;
 800140e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <motor_initPWM+0x60>)
 8001412:	601a      	str	r2, [r3, #0]
	timmerChannel2 = channel2;
 8001414:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <motor_initPWM+0x64>)
 8001418:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&PWMHandle, timmerChannel1);
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <motor_initPWM+0x60>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	001a      	movs	r2, r3
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <motor_initPWM+0x5c>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f002 f8d1 	bl	80035cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&PWMHandle, timmerChannel2);
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <motor_initPWM+0x64>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	001a      	movs	r2, r3
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <motor_initPWM+0x5c>)
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f002 f8c9 	bl	80035cc <HAL_TIM_PWM_Start>
}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bcb0      	pop	{r4, r5, r7}
 8001440:	bc08      	pop	{r3}
 8001442:	b004      	add	sp, #16
 8001444:	4718      	bx	r3
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	20000120 	.word	0x20000120
 800144c:	20000168 	.word	0x20000168
 8001450:	2000016c 	.word	0x2000016c

08001454 <motor_PWMSetForward>:
void motor_PWMSetForward(int x){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel1, x);
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <motor_PWMSetForward+0x8c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d104      	bne.n	800146e <motor_PWMSetForward+0x1a>
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <motor_PWMSetForward+0x90>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	635a      	str	r2, [r3, #52]	@ 0x34
 800146c:	e015      	b.n	800149a <motor_PWMSetForward+0x46>
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <motor_PWMSetForward+0x8c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d104      	bne.n	8001480 <motor_PWMSetForward+0x2c>
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <motor_PWMSetForward+0x90>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6393      	str	r3, [r2, #56]	@ 0x38
 800147e:	e00c      	b.n	800149a <motor_PWMSetForward+0x46>
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <motor_PWMSetForward+0x8c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d104      	bne.n	8001492 <motor_PWMSetForward+0x3e>
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <motor_PWMSetForward+0x90>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001490:	e003      	b.n	800149a <motor_PWMSetForward+0x46>
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <motor_PWMSetForward+0x90>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, 0);
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <motor_PWMSetForward+0x94>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d104      	bne.n	80014ac <motor_PWMSetForward+0x58>
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <motor_PWMSetForward+0x90>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014aa:	e015      	b.n	80014d8 <motor_PWMSetForward+0x84>
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, 0);
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <motor_PWMSetForward+0x94>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d104      	bne.n	80014be <motor_PWMSetForward+0x6a>
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <motor_PWMSetForward+0x90>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80014bc:	e00c      	b.n	80014d8 <motor_PWMSetForward+0x84>
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, 0);
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <motor_PWMSetForward+0x94>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d104      	bne.n	80014d0 <motor_PWMSetForward+0x7c>
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <motor_PWMSetForward+0x90>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80014ce:	e003      	b.n	80014d8 <motor_PWMSetForward+0x84>
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, 0);
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <motor_PWMSetForward+0x90>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000168 	.word	0x20000168
 80014e4:	20000120 	.word	0x20000120
 80014e8:	2000016c 	.word	0x2000016c

080014ec <motor_PWMSetBackward>:
void motor_PWMSetBackward(int x){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel1, 0);
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <motor_PWMSetBackward+0x8c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d104      	bne.n	8001506 <motor_PWMSetBackward+0x1a>
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <motor_PWMSetBackward+0x90>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	635a      	str	r2, [r3, #52]	@ 0x34
 8001504:	e015      	b.n	8001532 <motor_PWMSetBackward+0x46>
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <motor_PWMSetBackward+0x8c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d104      	bne.n	8001518 <motor_PWMSetBackward+0x2c>
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <motor_PWMSetBackward+0x90>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	6393      	str	r3, [r2, #56]	@ 0x38
 8001516:	e00c      	b.n	8001532 <motor_PWMSetBackward+0x46>
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <motor_PWMSetBackward+0x8c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d104      	bne.n	800152a <motor_PWMSetBackward+0x3e>
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <motor_PWMSetBackward+0x90>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001528:	e003      	b.n	8001532 <motor_PWMSetBackward+0x46>
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <motor_PWMSetBackward+0x90>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, x);
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <motor_PWMSetBackward+0x94>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d104      	bne.n	8001544 <motor_PWMSetBackward+0x58>
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <motor_PWMSetBackward+0x90>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001542:	e015      	b.n	8001570 <motor_PWMSetBackward+0x84>
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, x);
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <motor_PWMSetBackward+0x94>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d104      	bne.n	8001556 <motor_PWMSetBackward+0x6a>
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <motor_PWMSetBackward+0x90>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001554:	e00c      	b.n	8001570 <motor_PWMSetBackward+0x84>
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, x);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <motor_PWMSetBackward+0x94>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b08      	cmp	r3, #8
 800155c:	d104      	bne.n	8001568 <motor_PWMSetBackward+0x7c>
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <motor_PWMSetBackward+0x90>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001566:	e003      	b.n	8001570 <motor_PWMSetBackward+0x84>
	__HAL_TIM_SET_COMPARE(&PWMHandle, timmerChannel2, x);
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <motor_PWMSetBackward+0x90>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001570:	46c0      	nop			@ (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000168 	.word	0x20000168
 800157c:	20000120 	.word	0x20000120
 8001580:	2000016c 	.word	0x2000016c

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_MspInit+0x44>)
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_MspInit+0x44>)
 8001590:	2101      	movs	r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	619a      	str	r2, [r3, #24]
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <HAL_MspInit+0x44>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_MspInit+0x44>)
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_MspInit+0x44>)
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	0549      	lsls	r1, r1, #21
 80015ac:	430a      	orrs	r2, r1
 80015ae:	61da      	str	r2, [r3, #28]
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <HAL_MspInit+0x44>)
 80015b2:	69da      	ldr	r2, [r3, #28]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	055b      	lsls	r3, r3, #21
 80015b8:	4013      	ands	r3, r2
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	40021000 	.word	0x40021000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 fc10 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <TIM3_IRQHandler+0x14>)
 8001606:	0018      	movs	r0, r3
 8001608:	f002 f9e4 	bl	80039d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	2000028c 	.word	0x2000028c

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	18d3      	adds	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f003 fe6a 	bl	8005320 <__errno>
 800164c:	0003      	movs	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	2301      	movs	r3, #1
 8001654:	425b      	negs	r3, r3
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	18d2      	adds	r2, r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <_sbrk+0x64>)
 8001668:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b006      	add	sp, #24
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20004000 	.word	0x20004000
 8001678:	00000400 	.word	0x00000400
 800167c:	20000170 	.word	0x20000170
 8001680:	200004a8 	.word	0x200004a8

08001684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001688:	46c0      	nop			@ (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <terminal_init>:
UART_HandleTypeDef terminal_uart;

// Structures

// Functions
void terminal_init(UART_HandleTypeDef huart){
 8001690:	b084      	sub	sp, #16
 8001692:	b5b0      	push	{r4, r5, r7, lr}
 8001694:	af00      	add	r7, sp, #0
 8001696:	2510      	movs	r5, #16
 8001698:	197c      	adds	r4, r7, r5
 800169a:	6020      	str	r0, [r4, #0]
 800169c:	6061      	str	r1, [r4, #4]
 800169e:	60a2      	str	r2, [r4, #8]
 80016a0:	60e3      	str	r3, [r4, #12]
	terminal_uart = huart;
 80016a2:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <terminal_init+0x30>)
 80016a4:	197b      	adds	r3, r7, r5
 80016a6:	0010      	movs	r0, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	2388      	movs	r3, #136	@ 0x88
 80016ac:	001a      	movs	r2, r3
 80016ae:	f003 fe63 	bl	8005378 <memcpy>
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bcb0      	pop	{r4, r5, r7}
 80016b8:	bc08      	pop	{r3}
 80016ba:	b004      	add	sp, #16
 80016bc:	4718      	bx	r3
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	20000174 	.word	0x20000174

080016c4 <terminal_receive>:
void terminal_receive(uint8_t *rxBuff, size_t size){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	// receive loop
	for(int i=0; i<size; i++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e02b      	b.n	800172c <terminal_receive+0x68>
	  HAL_UART_Receive(&terminal_uart, &rxBuff[i], 1, TIMEOUT);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	18d1      	adds	r1, r2, r3
 80016da:	2301      	movs	r3, #1
 80016dc:	425b      	negs	r3, r3
 80016de:	4818      	ldr	r0, [pc, #96]	@ (8001740 <terminal_receive+0x7c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	f003 f927 	bl	8004934 <HAL_UART_Receive>
	  if((rxBuff[i] == '\r') | (rxBuff[i] == '\n')){
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	18d3      	adds	r3, r2, r3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	3b0d      	subs	r3, #13
 80016f0:	425a      	negs	r2, r3
 80016f2:	4153      	adcs	r3, r2
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	18cb      	adds	r3, r1, r3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3b0a      	subs	r3, #10
 8001700:	4259      	negs	r1, r3
 8001702:	414b      	adcs	r3, r1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <terminal_receive+0x62>
		  rxBuff[i] = '\r';
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	18d3      	adds	r3, r2, r3
 8001714:	220d      	movs	r2, #13
 8001716:	701a      	strb	r2, [r3, #0]
		  rxBuff[i+1] = '\n';
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3301      	adds	r3, #1
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	220a      	movs	r2, #10
 8001722:	701a      	strb	r2, [r3, #0]
		  break;
 8001724:	e007      	b.n	8001736 <terminal_receive+0x72>
	for(int i=0; i<size; i++){
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8cf      	bhi.n	80016d4 <terminal_receive+0x10>
	  }
	}
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	20000174 	.word	0x20000174

08001744 <terminal_print>:
void terminal_print(char *txBuff){
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	// Has to be null terminated!
	size_t len = strlen((char*)txBuff);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	0018      	movs	r0, r3
 8001750:	f7fe fcda 	bl	8000108 <strlen>
 8001754:	0003      	movs	r3, r0
 8001756:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&terminal_uart, (uint8_t*)txBuff, len, TIMEOUT);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b29a      	uxth	r2, r3
 800175c:	2301      	movs	r3, #1
 800175e:	425b      	negs	r3, r3
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4803      	ldr	r0, [pc, #12]	@ (8001770 <terminal_print+0x2c>)
 8001764:	f003 f846 	bl	80047f4 <HAL_UART_Transmit>
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000174 	.word	0x20000174

08001774 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b096      	sub	sp, #88	@ 0x58
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	2348      	movs	r3, #72	@ 0x48
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	0018      	movs	r0, r3
 8001780:	2310      	movs	r3, #16
 8001782:	001a      	movs	r2, r3
 8001784:	2100      	movs	r1, #0
 8001786:	f003 fdc3 	bl	8005310 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178a:	2340      	movs	r3, #64	@ 0x40
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	0018      	movs	r0, r3
 8001790:	2308      	movs	r3, #8
 8001792:	001a      	movs	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	f003 fdbb 	bl	8005310 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	2324      	movs	r3, #36	@ 0x24
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	0018      	movs	r0, r3
 80017a0:	231c      	movs	r3, #28
 80017a2:	001a      	movs	r2, r3
 80017a4:	2100      	movs	r1, #0
 80017a6:	f003 fdb3 	bl	8005310 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	0018      	movs	r0, r3
 80017ae:	2320      	movs	r3, #32
 80017b0:	001a      	movs	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f003 fdac 	bl	8005310 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b8:	4b4d      	ldr	r3, [pc, #308]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017ba:	4a4e      	ldr	r2, [pc, #312]	@ (80018f4 <MX_TIM1_Init+0x180>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80017be:	4b4c      	ldr	r3, [pc, #304]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80017ca:	4b49      	ldr	r3, [pc, #292]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017cc:	4a4a      	ldr	r2, [pc, #296]	@ (80018f8 <MX_TIM1_Init+0x184>)
 80017ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b44      	ldr	r3, [pc, #272]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e2:	4b43      	ldr	r3, [pc, #268]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80017e4:	0018      	movs	r0, r3
 80017e6:	f001 fdf7 	bl	80033d8 <HAL_TIM_Base_Init>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80017ee:	f7ff fdd1 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	2148      	movs	r1, #72	@ 0x48
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	0152      	lsls	r2, r2, #5
 80017fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017fc:	187a      	adds	r2, r7, r1
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 8001800:	0011      	movs	r1, r2
 8001802:	0018      	movs	r0, r3
 8001804:	f002 fa9a 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800180c:	f7ff fdc2 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001810:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 8001812:	0018      	movs	r0, r3
 8001814:	f001 fe82 	bl	800351c <HAL_TIM_PWM_Init>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800181c:	f7ff fdba 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2140      	movs	r1, #64	@ 0x40
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	187b      	adds	r3, r7, r1
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800182e:	187a      	adds	r2, r7, r1
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 8001832:	0011      	movs	r1, r2
 8001834:	0018      	movs	r0, r3
 8001836:	f002 febd 	bl	80045b4 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800183e:	f7ff fda9 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2124      	movs	r1, #36	@ 0x24
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2260      	movs	r2, #96	@ 0x60
 8001848:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	22fa      	movs	r2, #250	@ 0xfa
 800184e:	0052      	lsls	r2, r2, #1
 8001850:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001858:	187b      	adds	r3, r7, r1
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	1879      	adds	r1, r7, r1
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 8001874:	2200      	movs	r2, #0
 8001876:	0018      	movs	r0, r3
 8001878:	f002 f99a 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001880:	f7ff fd88 	bl	8001394 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001884:	2124      	movs	r1, #36	@ 0x24
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188c:	1879      	adds	r1, r7, r1
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 8001890:	2204      	movs	r2, #4
 8001892:	0018      	movs	r0, r3
 8001894:	f002 f98c 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800189c:	f7ff fd7a 	bl	8001394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	0192      	lsls	r2, r2, #6
 80018c4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018cc:	1d3a      	adds	r2, r7, #4
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f002 fecc 	bl	8004670 <HAL_TIMEx_ConfigBreakDeadTime>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80018dc:	f7ff fd5a 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <MX_TIM1_Init+0x17c>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f96a 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b016      	add	sp, #88	@ 0x58
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200001fc 	.word	0x200001fc
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	000003ff 	.word	0x000003ff

080018fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08d      	sub	sp, #52	@ 0x34
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	240c      	movs	r4, #12
 8001904:	193b      	adds	r3, r7, r4
 8001906:	0018      	movs	r0, r3
 8001908:	2324      	movs	r3, #36	@ 0x24
 800190a:	001a      	movs	r2, r3
 800190c:	2100      	movs	r1, #0
 800190e:	f003 fcff 	bl	8005310 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	0018      	movs	r0, r3
 8001916:	2308      	movs	r3, #8
 8001918:	001a      	movs	r2, r3
 800191a:	2100      	movs	r1, #0
 800191c:	f003 fcf8 	bl	8005310 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001920:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <MX_TIM2_Init+0xc0>)
 8001922:	2280      	movs	r2, #128	@ 0x80
 8001924:	05d2      	lsls	r2, r2, #23
 8001926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <MX_TIM2_Init+0xc0>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <MX_TIM2_Init+0xc0>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_TIM2_Init+0xc0>)
 8001936:	2201      	movs	r2, #1
 8001938:	4252      	negs	r2, r2
 800193a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_TIM2_Init+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_TIM2_Init+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001948:	0021      	movs	r1, r4
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2203      	movs	r2, #3
 800194e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2201      	movs	r2, #1
 800195a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2201      	movs	r2, #1
 8001972:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001980:	187a      	adds	r2, r7, r1
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_TIM2_Init+0xc0>)
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f001 fed8 	bl	800373c <HAL_TIM_Encoder_Init>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001990:	f7ff fd00 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a0:	1d3a      	adds	r2, r7, #4
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <MX_TIM2_Init+0xc0>)
 80019a4:	0011      	movs	r1, r2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f002 fe04 	bl	80045b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80019b0:	f7ff fcf0 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b00d      	add	sp, #52	@ 0x34
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	20000244 	.word	0x20000244

080019c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	2308      	movs	r3, #8
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	0018      	movs	r0, r3
 80019cc:	2310      	movs	r3, #16
 80019ce:	001a      	movs	r2, r3
 80019d0:	2100      	movs	r1, #0
 80019d2:	f003 fc9d 	bl	8005310 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	003b      	movs	r3, r7
 80019d8:	0018      	movs	r0, r3
 80019da:	2308      	movs	r3, #8
 80019dc:	001a      	movs	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	f003 fc96 	bl	8005310 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 80019e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a64 <MX_TIM3_Init+0xa4>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 80019ec:	2264      	movs	r2, #100	@ 0x64
 80019ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 80019f8:	2264      	movs	r2, #100	@ 0x64
 80019fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f001 fce4 	bl	80033d8 <HAL_TIM_Base_Init>
 8001a10:	1e03      	subs	r3, r0, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a14:	f7ff fcbe 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	2108      	movs	r1, #8
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	0152      	lsls	r2, r2, #5
 8001a20:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a22:	187a      	adds	r2, r7, r1
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 8001a26:	0011      	movs	r1, r2
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f002 f987 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a32:	f7ff fcaf 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	003b      	movs	r3, r7
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	003b      	movs	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a42:	003a      	movs	r2, r7
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_TIM3_Init+0xa0>)
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f002 fdb3 	bl	80045b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a52:	f7ff fc9f 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b006      	add	sp, #24
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	2000028c 	.word	0x2000028c
 8001a64:	40000400 	.word	0x40000400

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	0109      	lsls	r1, r1, #4
 8001a84:	430a      	orrs	r2, r1
 8001a86:	619a      	str	r2, [r3, #24]
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a96:	e018      	b.n	8001aca <HAL_TIM_Base_MspInit+0x62>
  else if(tim_baseHandle->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <HAL_TIM_Base_MspInit+0x74>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d113      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	61da      	str	r2, [r3, #28]
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2010      	movs	r0, #16
 8001ac0:	f000 fcf0 	bl	80024a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f000 fd02 	bl	80024ce <HAL_NVIC_EnableIRQ>
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40000400 	.word	0x40000400

08001ae0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08b      	sub	sp, #44	@ 0x2c
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	2414      	movs	r4, #20
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	0018      	movs	r0, r3
 8001aee:	2314      	movs	r3, #20
 8001af0:	001a      	movs	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f003 fc0c 	bl	8005310 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	05db      	lsls	r3, r3, #23
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d153      	bne.n	8001bac <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	61da      	str	r2, [r3, #28]
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2201      	movs	r2, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	0289      	lsls	r1, r1, #10
 8001b26:	430a      	orrs	r2, r1
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b3e:	2180      	movs	r1, #128	@ 0x80
 8001b40:	02c9      	lsls	r1, r1, #11
 8001b42:	430a      	orrs	r2, r1
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	02db      	lsls	r3, r3, #11
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODE_A_Pin;
 8001b54:	193b      	adds	r3, r7, r4
 8001b56:	2220      	movs	r2, #32
 8001b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	2202      	movs	r2, #2
 8001b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ENCODE_A_GPIO_Port, &GPIO_InitStruct);
 8001b72:	193a      	adds	r2, r7, r4
 8001b74:	2390      	movs	r3, #144	@ 0x90
 8001b76:	05db      	lsls	r3, r3, #23
 8001b78:	0011      	movs	r1, r2
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fcc4 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODE_B_Pin;
 8001b80:	0021      	movs	r1, r4
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2208      	movs	r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ENCODE_B_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	f000 fcae 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b00b      	add	sp, #44	@ 0x2c
 8001bb2:	bd90      	pop	{r4, r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400

08001bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	240c      	movs	r4, #12
 8001bc6:	193b      	adds	r3, r7, r4
 8001bc8:	0018      	movs	r0, r3
 8001bca:	2314      	movs	r3, #20
 8001bcc:	001a      	movs	r2, r3
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f003 fb9e 	bl	8005310 <memset>
  if(timHandle->Instance==TIM1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a16      	ldr	r2, [pc, #88]	@ (8001c34 <HAL_TIM_MspPostInit+0x78>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d125      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_TIM_MspPostInit+0x7c>)
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_TIM_MspPostInit+0x7c>)
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	0289      	lsls	r1, r1, #10
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_TIM_MspPostInit+0x7c>)
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	22c0      	movs	r2, #192	@ 0xc0
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	0021      	movs	r1, r4
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2202      	movs	r2, #2
 8001c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2202      	movs	r2, #2
 8001c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	187a      	adds	r2, r7, r1
 8001c1e:	2390      	movs	r3, #144	@ 0x90
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fc6f 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b009      	add	sp, #36	@ 0x24
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40021000 	.word	0x40021000

08001c3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c42:	4a15      	ldr	r2, [pc, #84]	@ (8001c98 <MX_USART2_UART_Init+0x5c>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c46:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c48:	2296      	movs	r2, #150	@ 0x96
 8001c4a:	0192      	lsls	r2, r2, #6
 8001c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c80:	0018      	movs	r0, r3
 8001c82:	f002 fd63 	bl	800474c <HAL_UART_Init>
 8001c86:	1e03      	subs	r3, r0, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c8a:	f7ff fb83 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200002d4 	.word	0x200002d4
 8001c98:	40004400 	.word	0x40004400

08001c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	2414      	movs	r4, #20
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	2314      	movs	r3, #20
 8001cac:	001a      	movs	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f003 fb2e 	bl	8005310 <memset>
  if(uartHandle->Instance==USART2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <HAL_UART_MspInit+0x90>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d132      	bne.n	8001d24 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <HAL_UART_MspInit+0x94>)
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_UART_MspInit+0x94>)
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0289      	lsls	r1, r1, #10
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	61da      	str	r2, [r3, #28]
 8001ccc:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <HAL_UART_MspInit+0x94>)
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_UART_MspInit+0x94>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <HAL_UART_MspInit+0x94>)
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	0289      	lsls	r1, r1, #10
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_UART_MspInit+0x94>)
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cf6:	0021      	movs	r1, r4
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2202      	movs	r2, #2
 8001d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2201      	movs	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	187a      	adds	r2, r7, r1
 8001d18:	2390      	movs	r3, #144	@ 0x90
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fbf2 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b00b      	add	sp, #44	@ 0x2c
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	40021000 	.word	0x40021000

08001d34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d34:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d38:	f7ff fca4 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	@ (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d62:	f003 fae3 	bl	800532c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d66:	f7ff f973 	bl	8001050 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   r0, =_estack
 8001d6c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d78:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 8001d7c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d80:	200004a8 	.word	0x200004a8

08001d84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_COMP_IRQHandler>
	...

08001d88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <HAL_Init+0x24>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_Init+0x24>)
 8001d92:	2110      	movs	r1, #16
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f809 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9e:	f7ff fbf1 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	40022000 	.word	0x40022000

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_InitTick+0x5c>)
 8001dba:	681c      	ldr	r4, [r3, #0]
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_InitTick+0x60>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	23fa      	movs	r3, #250	@ 0xfa
 8001dc4:	0098      	lsls	r0, r3, #2
 8001dc6:	f7fe f9b1 	bl	800012c <__udivsi3>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	0019      	movs	r1, r3
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f7fe f9ac 	bl	800012c <__udivsi3>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 fb89 	bl	80024ee <HAL_SYSTICK_Config>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00f      	b.n	8001e04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d80b      	bhi.n	8001e02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	2301      	movs	r3, #1
 8001dee:	425b      	negs	r3, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 fb56 	bl	80024a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_InitTick+0x64>)
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b003      	add	sp, #12
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000008 	.word	0x20000008
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	001a      	movs	r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	18d2      	adds	r2, r2, r3
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	20000008 	.word	0x20000008
 8001e38:	2000035c 	.word	0x2000035c

08001e3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b02      	ldr	r3, [pc, #8]	@ (8001e4c <HAL_GetTick+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	2000035c 	.word	0x2000035c

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3301      	adds	r3, #1
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	189b      	adds	r3, r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	f7ff ffe0 	bl	8001e3c <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e125      	b.n	8002102 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2234      	movs	r2, #52	@ 0x34
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff f852 	bl	8000f78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed8:	2210      	movs	r2, #16
 8001eda:	4013      	ands	r3, r2
 8001edc:	d000      	beq.n	8001ee0 <HAL_ADC_Init+0x48>
 8001ede:	e103      	b.n	80020e8 <HAL_ADC_Init+0x250>
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d000      	beq.n	8001eec <HAL_ADC_Init+0x54>
 8001eea:	e0fd      	b.n	80020e8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001ef6:	d000      	beq.n	8001efa <HAL_ADC_Init+0x62>
 8001ef8:	e0f6      	b.n	80020e8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	4a83      	ldr	r2, [pc, #524]	@ (800210c <HAL_ADC_Init+0x274>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	2202      	movs	r2, #2
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2203      	movs	r2, #3
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d112      	bne.n	8001f3e <HAL_ADC_Init+0xa6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d009      	beq.n	8001f3a <HAL_ADC_Init+0xa2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	401a      	ands	r2, r3
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_Init+0xa6>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_ADC_Init+0xa8>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d116      	bne.n	8001f72 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2218      	movs	r2, #24
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	0899      	lsrs	r1, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4964      	ldr	r1, [pc, #400]	@ (8002110 <HAL_ADC_Init+0x278>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e1b      	ldrb	r3, [r3, #24]
 8001f86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7e5b      	ldrb	r3, [r3, #25]
 8001f8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e9b      	ldrb	r3, [r3, #26]
 8001f94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d002      	beq.n	8001fa6 <HAL_ADC_Init+0x10e>
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	e000      	b.n	8001fa8 <HAL_ADC_Init+0x110>
 8001fa6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fa8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_Init+0x124>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_Init+0x126>
 8001fbc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001fbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2124      	movs	r1, #36	@ 0x24
 8001fc4:	5c5b      	ldrb	r3, [r3, r1]
 8001fc6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fc8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7edb      	ldrb	r3, [r3, #27]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d115      	bne.n	8002004 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e9b      	ldrb	r3, [r3, #26]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	0252      	lsls	r2, r2, #9
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	e00b      	b.n	8002004 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	23c2      	movs	r3, #194	@ 0xc2
 800200a:	33ff      	adds	r3, #255	@ 0xff
 800200c:	429a      	cmp	r2, r3
 800200e:	d007      	beq.n	8002020 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002018:	4313      	orrs	r3, r2
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4313      	orrs	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	429a      	cmp	r2, r3
 800203a:	d01b      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	2b01      	cmp	r3, #1
 8002042:	d017      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	2b02      	cmp	r3, #2
 800204a:	d013      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	2b03      	cmp	r3, #3
 8002052:	d00f      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00b      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002060:	2b05      	cmp	r3, #5
 8002062:	d007      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	2b06      	cmp	r3, #6
 800206a:	d003      	beq.n	8002074 <HAL_ADC_Init+0x1dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	2b07      	cmp	r3, #7
 8002072:	d112      	bne.n	800209a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2107      	movs	r1, #7
 8002080:	438a      	bics	r2, r1
 8002082:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6959      	ldr	r1, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	2207      	movs	r2, #7
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002114 <HAL_ADC_Init+0x27c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d10b      	bne.n	80020c2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b4:	2203      	movs	r2, #3
 80020b6:	4393      	bics	r3, r2
 80020b8:	2201      	movs	r2, #1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020c0:	e01c      	b.n	80020fc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c6:	2212      	movs	r2, #18
 80020c8:	4393      	bics	r3, r2
 80020ca:	2210      	movs	r2, #16
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d6:	2201      	movs	r2, #1
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80020de:	230f      	movs	r3, #15
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020e6:	e009      	b.n	80020fc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	2210      	movs	r2, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020fc:	230f      	movs	r3, #15
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	781b      	ldrb	r3, [r3, #0]
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b004      	add	sp, #16
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	fffffefd 	.word	0xfffffefd
 8002110:	fffe0219 	.word	0xfffe0219
 8002114:	833fffe7 	.word	0x833fffe7

08002118 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	429a      	cmp	r2, r3
 8002150:	d011      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x46>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	2b01      	cmp	r3, #1
 8002158:	d00d      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x46>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	2b02      	cmp	r3, #2
 8002160:	d009      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x46>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002166:	2b03      	cmp	r3, #3
 8002168:	d005      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x46>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	2b04      	cmp	r3, #4
 8002170:	d001      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x46>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2234      	movs	r2, #52	@ 0x34
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x54>
 8002180:	2302      	movs	r3, #2
 8002182:	e0d0      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1f6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2234      	movs	r2, #52	@ 0x34
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
 8002196:	d000      	beq.n	800219a <HAL_ADC_ConfigChannel+0x6a>
 8002198:	e0b4      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a64      	ldr	r2, [pc, #400]	@ (8002330 <HAL_ADC_ConfigChannel+0x200>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x76>
 80021a4:	e082      	b.n	80022ac <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	055b      	lsls	r3, r3, #21
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d037      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d033      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d02f      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d02b      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d027      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d023      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d01f      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	2b07      	cmp	r3, #7
 80021fe:	d01b      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2107      	movs	r1, #7
 800220c:	400b      	ands	r3, r1
 800220e:	429a      	cmp	r2, r3
 8002210:	d012      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2107      	movs	r1, #7
 800221e:	438a      	bics	r2, r1
 8002220:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6959      	ldr	r1, [r3, #20]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2207      	movs	r2, #7
 800222e:	401a      	ands	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d007      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x120>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b11      	cmp	r3, #17
 8002246:	d003      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x120>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b12      	cmp	r3, #18
 800224e:	d163      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002250:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <HAL_ADC_ConfigChannel+0x204>)
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d009      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x140>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b11      	cmp	r3, #17
 8002262:	d102      	bne.n	800226a <HAL_ADC_ConfigChannel+0x13a>
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	03db      	lsls	r3, r3, #15
 8002268:	e004      	b.n	8002274 <HAL_ADC_ConfigChannel+0x144>
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	045b      	lsls	r3, r3, #17
 800226e:	e001      	b.n	8002274 <HAL_ADC_ConfigChannel+0x144>
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	4a2f      	ldr	r2, [pc, #188]	@ (8002334 <HAL_ADC_ConfigChannel+0x204>)
 8002276:	430b      	orrs	r3, r1
 8002278:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d14a      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002282:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_ADC_ConfigChannel+0x208>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	492d      	ldr	r1, [pc, #180]	@ (800233c <HAL_ADC_ConfigChannel+0x20c>)
 8002288:	0018      	movs	r0, r3
 800228a:	f7fd ff4f 	bl	800012c <__udivsi3>
 800228e:	0003      	movs	r3, r0
 8002290:	001a      	movs	r2, r3
 8002292:	0013      	movs	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	189b      	adds	r3, r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_ConfigChannel+0x16e>
 80022aa:	e035      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	4099      	lsls	r1, r3
 80022ba:	000b      	movs	r3, r1
 80022bc:	43d9      	mvns	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	400a      	ands	r2, r1
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d007      	beq.n	80022de <HAL_ADC_ConfigChannel+0x1ae>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x1ae>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d11c      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_ADC_ConfigChannel+0x204>)
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d007      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x1ca>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b11      	cmp	r3, #17
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x1c6>
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_ADC_ConfigChannel+0x210>)
 80022f4:	e002      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1cc>
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_ADC_ConfigChannel+0x214>)
 80022f8:	e000      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1cc>
 80022fa:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <HAL_ADC_ConfigChannel+0x218>)
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <HAL_ADC_ConfigChannel+0x204>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e009      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	2220      	movs	r2, #32
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002310:	230f      	movs	r3, #15
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2234      	movs	r2, #52	@ 0x34
 800231c:	2100      	movs	r1, #0
 800231e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002320:	230f      	movs	r3, #15
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	781b      	ldrb	r3, [r3, #0]
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b004      	add	sp, #16
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	00001001 	.word	0x00001001
 8002334:	40012708 	.word	0x40012708
 8002338:	20000000 	.word	0x20000000
 800233c:	000f4240 	.word	0x000f4240
 8002340:	ffbfffff 	.word	0xffbfffff
 8002344:	feffffff 	.word	0xfeffffff
 8002348:	ff7fffff 	.word	0xff7fffff

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	0002      	movs	r2, r0
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b7f      	cmp	r3, #127	@ 0x7f
 800235e:	d809      	bhi.n	8002374 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	001a      	movs	r2, r3
 8002366:	231f      	movs	r3, #31
 8002368:	401a      	ands	r2, r3
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <__NVIC_EnableIRQ+0x30>)
 800236c:	2101      	movs	r1, #1
 800236e:	4091      	lsls	r1, r2
 8002370:	000a      	movs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
  }
}
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	0002      	movs	r2, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b7f      	cmp	r3, #127	@ 0x7f
 8002394:	d828      	bhi.n	80023e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002396:	4a2f      	ldr	r2, [pc, #188]	@ (8002454 <__NVIC_SetPriority+0xd4>)
 8002398:	1dfb      	adds	r3, r7, #7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b25b      	sxtb	r3, r3
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	33c0      	adds	r3, #192	@ 0xc0
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	589b      	ldr	r3, [r3, r2]
 80023a6:	1dfa      	adds	r2, r7, #7
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	0011      	movs	r1, r2
 80023ac:	2203      	movs	r2, #3
 80023ae:	400a      	ands	r2, r1
 80023b0:	00d2      	lsls	r2, r2, #3
 80023b2:	21ff      	movs	r1, #255	@ 0xff
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	43d2      	mvns	r2, r2
 80023ba:	401a      	ands	r2, r3
 80023bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	22ff      	movs	r2, #255	@ 0xff
 80023c4:	401a      	ands	r2, r3
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	0018      	movs	r0, r3
 80023cc:	2303      	movs	r3, #3
 80023ce:	4003      	ands	r3, r0
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d4:	481f      	ldr	r0, [pc, #124]	@ (8002454 <__NVIC_SetPriority+0xd4>)
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	430a      	orrs	r2, r1
 80023e0:	33c0      	adds	r3, #192	@ 0xc0
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023e6:	e031      	b.n	800244c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <__NVIC_SetPriority+0xd8>)
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	0019      	movs	r1, r3
 80023f0:	230f      	movs	r3, #15
 80023f2:	400b      	ands	r3, r1
 80023f4:	3b08      	subs	r3, #8
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3306      	adds	r3, #6
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	18d3      	adds	r3, r2, r3
 80023fe:	3304      	adds	r3, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1dfa      	adds	r2, r7, #7
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	0011      	movs	r1, r2
 8002408:	2203      	movs	r2, #3
 800240a:	400a      	ands	r2, r1
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	21ff      	movs	r1, #255	@ 0xff
 8002410:	4091      	lsls	r1, r2
 8002412:	000a      	movs	r2, r1
 8002414:	43d2      	mvns	r2, r2
 8002416:	401a      	ands	r2, r3
 8002418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	22ff      	movs	r2, #255	@ 0xff
 8002420:	401a      	ands	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	0018      	movs	r0, r3
 8002428:	2303      	movs	r3, #3
 800242a:	4003      	ands	r3, r0
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002430:	4809      	ldr	r0, [pc, #36]	@ (8002458 <__NVIC_SetPriority+0xd8>)
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	001c      	movs	r4, r3
 8002438:	230f      	movs	r3, #15
 800243a:	4023      	ands	r3, r4
 800243c:	3b08      	subs	r3, #8
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	430a      	orrs	r2, r1
 8002442:	3306      	adds	r3, #6
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18c3      	adds	r3, r0, r3
 8002448:	3304      	adds	r3, #4
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b003      	add	sp, #12
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	1e5a      	subs	r2, r3, #1
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	045b      	lsls	r3, r3, #17
 800246c:	429a      	cmp	r2, r3
 800246e:	d301      	bcc.n	8002474 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002470:	2301      	movs	r3, #1
 8002472:	e010      	b.n	8002496 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <SysTick_Config+0x44>)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	3a01      	subs	r2, #1
 800247a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247c:	2301      	movs	r3, #1
 800247e:	425b      	negs	r3, r3
 8002480:	2103      	movs	r1, #3
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff ff7c 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <SysTick_Config+0x44>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <SysTick_Config+0x44>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	210f      	movs	r1, #15
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	1c02      	adds	r2, r0, #0
 80024b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	0011      	movs	r1, r2
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff ff5d 	bl	8002380 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	0002      	movs	r2, r0
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff ff33 	bl	800234c <__NVIC_EnableIRQ>
}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff ffaf 	bl	800245c <SysTick_Config>
 80024fe:	0003      	movs	r3, r0
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002516:	e155      	b.n	80027c4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4091      	lsls	r1, r2
 8002522:	000a      	movs	r2, r1
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d100      	bne.n	8002530 <HAL_GPIO_Init+0x28>
 800252e:	e146      	b.n	80027be <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	4013      	ands	r3, r2
 8002538:	2b01      	cmp	r3, #1
 800253a:	d005      	beq.n	8002548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2203      	movs	r2, #3
 8002542:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002544:	2b02      	cmp	r3, #2
 8002546:	d130      	bne.n	80025aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	409a      	lsls	r2, r3
 8002556:	0013      	movs	r3, r2
 8002558:	43da      	mvns	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	43da      	mvns	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	2201      	movs	r2, #1
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d017      	beq.n	80025e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2203      	movs	r2, #3
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d123      	bne.n	800263a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	58d3      	ldr	r3, [r2, r3]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2207      	movs	r2, #7
 8002604:	4013      	ands	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	43da      	mvns	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2107      	movs	r1, #7
 800261e:	400b      	ands	r3, r1
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	6939      	ldr	r1, [r7, #16]
 8002638:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	409a      	lsls	r2, r3
 8002648:	0013      	movs	r3, r2
 800264a:	43da      	mvns	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	401a      	ands	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	23c0      	movs	r3, #192	@ 0xc0
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	4013      	ands	r3, r2
 8002678:	d100      	bne.n	800267c <HAL_GPIO_Init+0x174>
 800267a:	e0a0      	b.n	80027be <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267c:	4b57      	ldr	r3, [pc, #348]	@ (80027dc <HAL_GPIO_Init+0x2d4>)
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	4b56      	ldr	r3, [pc, #344]	@ (80027dc <HAL_GPIO_Init+0x2d4>)
 8002682:	2101      	movs	r1, #1
 8002684:	430a      	orrs	r2, r1
 8002686:	619a      	str	r2, [r3, #24]
 8002688:	4b54      	ldr	r3, [pc, #336]	@ (80027dc <HAL_GPIO_Init+0x2d4>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002694:	4a52      	ldr	r2, [pc, #328]	@ (80027e0 <HAL_GPIO_Init+0x2d8>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	589b      	ldr	r3, [r3, r2]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2203      	movs	r2, #3
 80026a6:	4013      	ands	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	409a      	lsls	r2, r3
 80026ae:	0013      	movs	r3, r2
 80026b0:	43da      	mvns	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	2390      	movs	r3, #144	@ 0x90
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	429a      	cmp	r2, r3
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x1ee>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a47      	ldr	r2, [pc, #284]	@ (80027e4 <HAL_GPIO_Init+0x2dc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x1ea>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a46      	ldr	r2, [pc, #280]	@ (80027e8 <HAL_GPIO_Init+0x2e0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x1e6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a45      	ldr	r2, [pc, #276]	@ (80027ec <HAL_GPIO_Init+0x2e4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x1e2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a44      	ldr	r2, [pc, #272]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x1de>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x1f0>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x1f0>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x1f0>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x1f0>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x1f0>
 80026f6:	2300      	movs	r3, #0
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	2103      	movs	r1, #3
 80026fc:	400a      	ands	r2, r1
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002708:	4935      	ldr	r1, [pc, #212]	@ (80027e0 <HAL_GPIO_Init+0x2d8>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b37      	ldr	r3, [pc, #220]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	035b      	lsls	r3, r3, #13
 800272e:	4013      	ands	r3, r2
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800273a:	4b2e      	ldr	r3, [pc, #184]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002740:	4b2c      	ldr	r3, [pc, #176]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43da      	mvns	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	039b      	lsls	r3, r3, #14
 8002758:	4013      	ands	r3, r2
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002764:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800276a:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	4013      	ands	r3, r2
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800278e:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002794:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43da      	mvns	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	4013      	ands	r3, r2
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	40da      	lsrs	r2, r3
 80027cc:	1e13      	subs	r3, r2, #0
 80027ce:	d000      	beq.n	80027d2 <HAL_GPIO_Init+0x2ca>
 80027d0:	e6a2      	b.n	8002518 <HAL_GPIO_Init+0x10>
  } 
}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b006      	add	sp, #24
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010000 	.word	0x40010000
 80027e4:	48000400 	.word	0x48000400
 80027e8:	48000800 	.word	0x48000800
 80027ec:	48000c00 	.word	0x48000c00
 80027f0:	48001000 	.word	0x48001000
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f000 fb76 	bl	8002ef8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_RCC_OscConfig+0x20>
 8002816:	e08e      	b.n	8002936 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002818:	4bc5      	ldr	r3, [pc, #788]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	220c      	movs	r2, #12
 800281e:	4013      	ands	r3, r2
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00e      	beq.n	8002842 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4bc2      	ldr	r3, [pc, #776]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	220c      	movs	r2, #12
 800282a:	4013      	ands	r3, r2
 800282c:	2b08      	cmp	r3, #8
 800282e:	d117      	bne.n	8002860 <HAL_RCC_OscConfig+0x68>
 8002830:	4bbf      	ldr	r3, [pc, #764]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	23c0      	movs	r3, #192	@ 0xc0
 8002836:	025b      	lsls	r3, r3, #9
 8002838:	401a      	ands	r2, r3
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	429a      	cmp	r2, r3
 8002840:	d10e      	bne.n	8002860 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	4bbb      	ldr	r3, [pc, #748]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	029b      	lsls	r3, r3, #10
 800284a:	4013      	ands	r3, r2
 800284c:	d100      	bne.n	8002850 <HAL_RCC_OscConfig+0x58>
 800284e:	e071      	b.n	8002934 <HAL_RCC_OscConfig+0x13c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d000      	beq.n	800285a <HAL_RCC_OscConfig+0x62>
 8002858:	e06c      	b.n	8002934 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f000 fb4c 	bl	8002ef8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x80>
 8002868:	4bb1      	ldr	r3, [pc, #708]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4bb0      	ldr	r3, [pc, #704]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	0249      	lsls	r1, r1, #9
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e02f      	b.n	80028d8 <HAL_RCC_OscConfig+0xe0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0xa2>
 8002880:	4bab      	ldr	r3, [pc, #684]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4baa      	ldr	r3, [pc, #680]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002886:	49ab      	ldr	r1, [pc, #684]	@ (8002b34 <HAL_RCC_OscConfig+0x33c>)
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4ba8      	ldr	r3, [pc, #672]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4ba7      	ldr	r3, [pc, #668]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002892:	49a9      	ldr	r1, [pc, #676]	@ (8002b38 <HAL_RCC_OscConfig+0x340>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e01e      	b.n	80028d8 <HAL_RCC_OscConfig+0xe0>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d10e      	bne.n	80028c0 <HAL_RCC_OscConfig+0xc8>
 80028a2:	4ba3      	ldr	r3, [pc, #652]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4ba2      	ldr	r3, [pc, #648]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028a8:	2180      	movs	r1, #128	@ 0x80
 80028aa:	02c9      	lsls	r1, r1, #11
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	4b9f      	ldr	r3, [pc, #636]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b9e      	ldr	r3, [pc, #632]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	0249      	lsls	r1, r1, #9
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xe0>
 80028c0:	4b9b      	ldr	r3, [pc, #620]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b9a      	ldr	r3, [pc, #616]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028c6:	499b      	ldr	r1, [pc, #620]	@ (8002b34 <HAL_RCC_OscConfig+0x33c>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b98      	ldr	r3, [pc, #608]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b97      	ldr	r3, [pc, #604]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028d2:	4999      	ldr	r1, [pc, #612]	@ (8002b38 <HAL_RCC_OscConfig+0x340>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d014      	beq.n	800290a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff faac 	bl	8001e3c <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ea:	f7ff faa7 	bl	8001e3c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	@ 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e2fd      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	4013      	ands	r3, r2
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0xf2>
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff fa97 	bl	8001e3c <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fa92 	bl	8001e3c <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	@ 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e2e8      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b82      	ldr	r3, [pc, #520]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	029b      	lsls	r3, r3, #10
 800292e:	4013      	ands	r3, r2
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x11c>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d100      	bne.n	8002942 <HAL_RCC_OscConfig+0x14a>
 8002940:	e06c      	b.n	8002a1c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002942:	4b7b      	ldr	r3, [pc, #492]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	220c      	movs	r2, #12
 8002948:	4013      	ands	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800294c:	4b78      	ldr	r3, [pc, #480]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	220c      	movs	r2, #12
 8002952:	4013      	ands	r3, r2
 8002954:	2b08      	cmp	r3, #8
 8002956:	d11f      	bne.n	8002998 <HAL_RCC_OscConfig+0x1a0>
 8002958:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	23c0      	movs	r3, #192	@ 0xc0
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	401a      	ands	r2, r3
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	429a      	cmp	r2, r3
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	4b71      	ldr	r3, [pc, #452]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d005      	beq.n	8002980 <HAL_RCC_OscConfig+0x188>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2bb      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b6b      	ldr	r3, [pc, #428]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	22f8      	movs	r2, #248	@ 0xf8
 8002986:	4393      	bics	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00da      	lsls	r2, r3, #3
 8002990:	4b67      	ldr	r3, [pc, #412]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	e041      	b.n	8002a1c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d024      	beq.n	80029ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a0:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b62      	ldr	r3, [pc, #392]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff fa46 	bl	8001e3c <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7ff fa41 	bl	8001e3c <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e297      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d0f1      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b57      	ldr	r3, [pc, #348]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	22f8      	movs	r2, #248	@ 0xf8
 80029d8:	4393      	bics	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00da      	lsls	r2, r3, #3
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e018      	b.n	8002a1c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	438a      	bics	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7ff fa21 	bl	8001e3c <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7ff fa1c 	bl	8001e3c <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e272      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d1f1      	bne.n	8002a00 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2208      	movs	r2, #8
 8002a22:	4013      	ands	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a32:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	430a      	orrs	r2, r1
 8002a38:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff f9ff 	bl	8001e3c <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7ff f9fa 	bl	8001e3c <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e250      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0f1      	beq.n	8002a44 <HAL_RCC_OscConfig+0x24c>
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b33      	ldr	r3, [pc, #204]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a66:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a68:	2101      	movs	r1, #1
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff f9e5 	bl	8001e3c <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff f9e0 	bl	8001e3c <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e236      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8a:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	2202      	movs	r2, #2
 8002a90:	4013      	ands	r3, r2
 8002a92:	d1f1      	bne.n	8002a78 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d100      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x2a8>
 8002a9e:	e0b5      	b.n	8002c0c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa0:	201f      	movs	r0, #31
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa8:	4b21      	ldr	r3, [pc, #132]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	055b      	lsls	r3, r3, #21
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d110      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	0549      	lsls	r1, r1, #21
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	055b      	lsls	r3, r3, #21
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ad0:	183b      	adds	r3, r7, r0
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_RCC_OscConfig+0x344>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d11a      	bne.n	8002b18 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_RCC_OscConfig+0x344>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x344>)
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	0049      	lsls	r1, r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af0:	f7ff f9a4 	bl	8001e3c <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7ff f99f 	bl	8001e3c <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	@ 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1f5      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_OscConfig+0x344>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10f      	bne.n	8002b40 <HAL_RCC_OscConfig+0x348>
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4b02      	ldr	r3, [pc, #8]	@ (8002b30 <HAL_RCC_OscConfig+0x338>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	621a      	str	r2, [r3, #32]
 8002b2c:	e036      	b.n	8002b9c <HAL_RCC_OscConfig+0x3a4>
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	40021000 	.word	0x40021000
 8002b34:	fffeffff 	.word	0xfffeffff
 8002b38:	fffbffff 	.word	0xfffbffff
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x36a>
 8002b48:	4bca      	ldr	r3, [pc, #808]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4bc9      	ldr	r3, [pc, #804]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	4bc7      	ldr	r3, [pc, #796]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	4bc6      	ldr	r3, [pc, #792]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	621a      	str	r2, [r3, #32]
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x3a4>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x38c>
 8002b6a:	4bc2      	ldr	r3, [pc, #776]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	4bc1      	ldr	r3, [pc, #772]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b70:	2104      	movs	r1, #4
 8002b72:	430a      	orrs	r2, r1
 8002b74:	621a      	str	r2, [r3, #32]
 8002b76:	4bbf      	ldr	r3, [pc, #764]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	4bbe      	ldr	r3, [pc, #760]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	621a      	str	r2, [r3, #32]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x3a4>
 8002b84:	4bbb      	ldr	r3, [pc, #748]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	4bba      	ldr	r3, [pc, #744]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	4bb8      	ldr	r3, [pc, #736]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	4bb7      	ldr	r3, [pc, #732]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	2104      	movs	r1, #4
 8002b98:	438a      	bics	r2, r1
 8002b9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d014      	beq.n	8002bce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba4:	f7ff f94a 	bl	8001e3c <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7ff f945 	bl	8001e3c <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4aaf      	ldr	r2, [pc, #700]	@ (8002e78 <HAL_RCC_OscConfig+0x680>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e19a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4bac      	ldr	r3, [pc, #688]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x3b6>
 8002bcc:	e013      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7ff f935 	bl	8001e3c <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e009      	b.n	8002bec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f930 	bl	8001e3c <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	4aa5      	ldr	r2, [pc, #660]	@ (8002e78 <HAL_RCC_OscConfig+0x680>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e185      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	4ba1      	ldr	r3, [pc, #644]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b9c      	ldr	r3, [pc, #624]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	4b9b      	ldr	r3, [pc, #620]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	499d      	ldr	r1, [pc, #628]	@ (8002e7c <HAL_RCC_OscConfig+0x684>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2210      	movs	r2, #16
 8002c12:	4013      	ands	r3, r2
 8002c14:	d063      	beq.n	8002cde <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d12a      	bne.n	8002c74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c1e:	4b95      	ldr	r3, [pc, #596]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c22:	4b94      	ldr	r3, [pc, #592]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c24:	2104      	movs	r1, #4
 8002c26:	430a      	orrs	r2, r1
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c2a:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c2e:	4b91      	ldr	r3, [pc, #580]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff f901 	bl	8001e3c <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c40:	f7ff f8fc 	bl	8001e3c <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e152      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c52:	4b88      	ldr	r3, [pc, #544]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f1      	beq.n	8002c40 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c5c:	4b85      	ldr	r3, [pc, #532]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	22f8      	movs	r2, #248	@ 0xf8
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	00da      	lsls	r2, r3, #3
 8002c6c:	4b81      	ldr	r3, [pc, #516]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c72:	e034      	b.n	8002cde <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	3305      	adds	r3, #5
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c80:	4b7c      	ldr	r3, [pc, #496]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c82:	2104      	movs	r1, #4
 8002c84:	438a      	bics	r2, r1
 8002c86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c88:	4b7a      	ldr	r3, [pc, #488]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8c:	22f8      	movs	r2, #248	@ 0xf8
 8002c8e:	4393      	bics	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	00da      	lsls	r2, r3, #3
 8002c98:	4b76      	ldr	r3, [pc, #472]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c9e:	e01e      	b.n	8002cde <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ca0:	4b74      	ldr	r3, [pc, #464]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ca4:	4b73      	ldr	r3, [pc, #460]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cac:	4b71      	ldr	r3, [pc, #452]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb0:	4b70      	ldr	r3, [pc, #448]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7ff f8c0 	bl	8001e3c <HAL_GetTick>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cc2:	f7ff f8bb 	bl	8001e3c <HAL_GetTick>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e111      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cd4:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d1f1      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d05c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ce8:	4b62      	ldr	r3, [pc, #392]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	220c      	movs	r2, #12
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d00e      	beq.n	8002d12 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	220c      	movs	r2, #12
 8002cfa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d114      	bne.n	8002d2a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d00:	4b5c      	ldr	r3, [pc, #368]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	23c0      	movs	r3, #192	@ 0xc0
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	401a      	ands	r2, r3
 8002d0a:	23c0      	movs	r3, #192	@ 0xc0
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d12:	4b58      	ldr	r3, [pc, #352]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	029b      	lsls	r3, r3, #10
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_OscConfig+0x5a8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d03c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0e6      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01b      	beq.n	8002d6a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d32:	4b50      	ldr	r3, [pc, #320]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d36:	4b4f      	ldr	r3, [pc, #316]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	0249      	lsls	r1, r1, #9
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7ff f87c 	bl	8001e3c <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4a:	f7ff f877 	bl	8001e3c <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0cd      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d5c:	4b45      	ldr	r3, [pc, #276]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	029b      	lsls	r3, r3, #10
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x552>
 8002d68:	e01b      	b.n	8002da2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d6a:	4b42      	ldr	r3, [pc, #264]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d6e:	4b41      	ldr	r3, [pc, #260]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d70:	4943      	ldr	r1, [pc, #268]	@ (8002e80 <HAL_RCC_OscConfig+0x688>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7ff f861 	bl	8001e3c <HAL_GetTick>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d80:	f7ff f85c 	bl	8001e3c <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0b2      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d92:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	029b      	lsls	r3, r3, #10
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x588>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002da0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d100      	bne.n	8002dac <HAL_RCC_OscConfig+0x5b4>
 8002daa:	e0a4      	b.n	8002ef6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	220c      	movs	r2, #12
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d100      	bne.n	8002dba <HAL_RCC_OscConfig+0x5c2>
 8002db8:	e078      	b.n	8002eac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d14c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002dc8:	492e      	ldr	r1, [pc, #184]	@ (8002e84 <HAL_RCC_OscConfig+0x68c>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff f835 	bl	8001e3c <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7ff f830 	bl	8001e3c <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e086      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dea:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	049b      	lsls	r3, r3, #18
 8002df2:	4013      	ands	r3, r2
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e88 <HAL_RCC_OscConfig+0x690>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e2a:	2180      	movs	r1, #128	@ 0x80
 8002e2c:	0449      	lsls	r1, r1, #17
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7ff f803 	bl	8001e3c <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fffe 	bl	8001e3c <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e054      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	049b      	lsls	r3, r3, #18
 8002e56:	4013      	ands	r3, r2
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x644>
 8002e5a:	e04c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <HAL_RCC_OscConfig+0x67c>)
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <HAL_RCC_OscConfig+0x68c>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe ffe8 	bl	8001e3c <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x6a6>
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	40021000 	.word	0x40021000
 8002e78:	00001388 	.word	0x00001388
 8002e7c:	efffffff 	.word	0xefffffff
 8002e80:	fffeffff 	.word	0xfffeffff
 8002e84:	feffffff 	.word	0xfeffffff
 8002e88:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe ffd6 	bl	8001e3c <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e02c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <HAL_RCC_OscConfig+0x708>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	049b      	lsls	r3, r3, #18
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x694>
 8002eaa:	e024      	b.n	8002ef6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e01f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <HAL_RCC_OscConfig+0x708>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_RCC_OscConfig+0x708>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	23c0      	movs	r3, #192	@ 0xc0
 8002ec8:	025b      	lsls	r3, r3, #9
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	23f0      	movs	r3, #240	@ 0xf0
 8002ee6:	039b      	lsls	r3, r3, #14
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b008      	add	sp, #32
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000

08002f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0bf      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d911      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f38:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0a6      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d006      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f5e:	4b51      	ldr	r3, [pc, #324]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4b50      	ldr	r3, [pc, #320]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f64:	21e0      	movs	r1, #224	@ 0xe0
 8002f66:	00c9      	lsls	r1, r1, #3
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	22f0      	movs	r2, #240	@ 0xf0
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	d04c      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b44      	ldr	r3, [pc, #272]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	029b      	lsls	r3, r3, #10
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d120      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07a      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	4b3e      	ldr	r3, [pc, #248]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	049b      	lsls	r3, r3, #18
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d114      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06e      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fc2:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	029b      	lsls	r3, r3, #10
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e062      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b34      	ldr	r3, [pc, #208]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e05b      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe0:	4b30      	ldr	r3, [pc, #192]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	4393      	bics	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe ff22 	bl	8001e3c <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffc:	e009      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fe ff1d 	bl	8001e3c <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	4a27      	ldr	r2, [pc, #156]	@ (80030a8 <HAL_RCC_ClockConfig+0x1a4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e042      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	220c      	movs	r2, #12
 8003018:	401a      	ands	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1ec      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	4013      	ands	r3, r2
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d211      	bcs.n	8003056 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	4393      	bics	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003044:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <HAL_RCC_ClockConfig+0x19c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2201      	movs	r2, #1
 800304a:	4013      	ands	r3, r2
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e020      	b.n	8003098 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2204      	movs	r2, #4
 800305c:	4013      	ands	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a11      	ldr	r2, [pc, #68]	@ (80030ac <HAL_RCC_ClockConfig+0x1a8>)
 8003066:	4013      	ands	r3, r2
 8003068:	0019      	movs	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003074:	f000 f820 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003078:	0001      	movs	r1, r0
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <HAL_RCC_ClockConfig+0x1a0>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	220f      	movs	r2, #15
 8003082:	4013      	ands	r3, r2
 8003084:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <HAL_RCC_ClockConfig+0x1ac>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	000a      	movs	r2, r1
 800308a:	40da      	lsrs	r2, r3
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b0>)
 800308e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003090:	2003      	movs	r0, #3
 8003092:	f7fe fe8d 	bl	8001db0 <HAL_InitTick>
  
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b004      	add	sp, #16
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	00001388 	.word	0x00001388
 80030ac:	fffff8ff 	.word	0xfffff8ff
 80030b0:	080065fc 	.word	0x080065fc
 80030b4:	20000000 	.word	0x20000000

080030b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	220c      	movs	r2, #12
 80030dc:	4013      	ands	r3, r2
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d046      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0xb8>
 80030e2:	d848      	bhi.n	8003176 <HAL_RCC_GetSysClockFreq+0xbe>
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d002      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x36>
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d003      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x3c>
 80030ec:	e043      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_GetSysClockFreq+0xd4>)
 80030f0:	613b      	str	r3, [r7, #16]
      break;
 80030f2:	e043      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0c9b      	lsrs	r3, r3, #18
 80030f8:	220f      	movs	r2, #15
 80030fa:	4013      	ands	r3, r2
 80030fc:	4a24      	ldr	r2, [pc, #144]	@ (8003190 <HAL_RCC_GetSysClockFreq+0xd8>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	220f      	movs	r2, #15
 8003108:	4013      	ands	r3, r2
 800310a:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_RCC_GetSysClockFreq+0xdc>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	23c0      	movs	r3, #192	@ 0xc0
 8003114:	025b      	lsls	r3, r3, #9
 8003116:	401a      	ands	r2, r3
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	025b      	lsls	r3, r3, #9
 800311c:	429a      	cmp	r2, r3
 800311e:	d109      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	481a      	ldr	r0, [pc, #104]	@ (800318c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003124:	f7fd f802 	bl	800012c <__udivsi3>
 8003128:	0003      	movs	r3, r0
 800312a:	001a      	movs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4353      	muls	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e01a      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	23c0      	movs	r3, #192	@ 0xc0
 8003138:	025b      	lsls	r3, r3, #9
 800313a:	401a      	ands	r2, r3
 800313c:	23c0      	movs	r3, #192	@ 0xc0
 800313e:	025b      	lsls	r3, r3, #9
 8003140:	429a      	cmp	r2, r3
 8003142:	d109      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	4814      	ldr	r0, [pc, #80]	@ (8003198 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003148:	f7fc fff0 	bl	800012c <__udivsi3>
 800314c:	0003      	movs	r3, r0
 800314e:	001a      	movs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4353      	muls	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e008      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	480c      	ldr	r0, [pc, #48]	@ (800318c <HAL_RCC_GetSysClockFreq+0xd4>)
 800315c:	f7fc ffe6 	bl	800012c <__udivsi3>
 8003160:	0003      	movs	r3, r0
 8003162:	001a      	movs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4353      	muls	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	613b      	str	r3, [r7, #16]
      break;
 800316e:	e005      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003172:	613b      	str	r3, [r7, #16]
      break;
 8003174:	e002      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800317c:	693b      	ldr	r3, [r7, #16]
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b006      	add	sp, #24
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	40021000 	.word	0x40021000
 800318c:	007a1200 	.word	0x007a1200
 8003190:	08006614 	.word	0x08006614
 8003194:	08006624 	.word	0x08006624
 8003198:	02dc6c00 	.word	0x02dc6c00

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b02      	ldr	r3, [pc, #8]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x10>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	20000000 	.word	0x20000000

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031b4:	f7ff fff2 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031b8:	0001      	movs	r1, r0
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	2207      	movs	r2, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	40d9      	lsrs	r1, r3
 80031ca:	000b      	movs	r3, r1
}    
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	0800660c 	.word	0x0800660c

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	4013      	ands	r3, r2
 80031f6:	d100      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031f8:	e08e      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2017      	movs	r0, #23
 80031fc:	183b      	adds	r3, r7, r0
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b6e      	ldr	r3, [pc, #440]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	055b      	lsls	r3, r3, #21
 800320a:	4013      	ands	r3, r2
 800320c:	d110      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b6b      	ldr	r3, [pc, #428]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	4b6a      	ldr	r3, [pc, #424]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	0549      	lsls	r1, r1, #21
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
 800321c:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	055b      	lsls	r3, r3, #21
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	183b      	adds	r3, r7, r0
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b63      	ldr	r3, [pc, #396]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d11a      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323c:	4b60      	ldr	r3, [pc, #384]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003242:	2180      	movs	r1, #128	@ 0x80
 8003244:	0049      	lsls	r1, r1, #1
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324a:	f7fe fdf7 	bl	8001e3c <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fe fdf2 	bl	8001e3c <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	@ 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0a6      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b56      	ldr	r3, [pc, #344]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d0f0      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003272:	4b52      	ldr	r3, [pc, #328]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	23c0      	movs	r3, #192	@ 0xc0
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4013      	ands	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d034      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	23c0      	movs	r3, #192	@ 0xc0
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4013      	ands	r3, r2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d02c      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003294:	4b49      	ldr	r3, [pc, #292]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a4a      	ldr	r2, [pc, #296]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329e:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	4b46      	ldr	r3, [pc, #280]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032a4:	2180      	movs	r1, #128	@ 0x80
 80032a6:	0249      	lsls	r1, r1, #9
 80032a8:	430a      	orrs	r2, r1
 80032aa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b43      	ldr	r3, [pc, #268]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	4b42      	ldr	r3, [pc, #264]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032b2:	4945      	ldr	r1, [pc, #276]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b8:	4b40      	ldr	r3, [pc, #256]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fdb9 	bl	8001e3c <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	e009      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe fdb4 	bl	8001e3c <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e067      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4a34      	ldr	r2, [pc, #208]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003302:	2317      	movs	r3, #23
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	4b2a      	ldr	r3, [pc, #168]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003312:	492f      	ldr	r1, [pc, #188]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003314:	400a      	ands	r2, r1
 8003316:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003322:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	2203      	movs	r2, #3
 8003328:	4393      	bics	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003332:	430a      	orrs	r2, r1
 8003334:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003340:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	4a23      	ldr	r2, [pc, #140]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b1b      	ldr	r3, [pc, #108]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003350:	430a      	orrs	r2, r1
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335e:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	2210      	movs	r2, #16
 8003364:	4393      	bics	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800336e:	430a      	orrs	r2, r1
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337e:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	4393      	bics	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800338e:	430a      	orrs	r2, r1
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4013      	ands	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800339e:	4b07      	ldr	r3, [pc, #28]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	4393      	bics	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ae:	430a      	orrs	r2, r1
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b006      	add	sp, #24
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
 80033c4:	fffffcff 	.word	0xfffffcff
 80033c8:	fffeffff 	.word	0xfffeffff
 80033cc:	00001388 	.word	0x00001388
 80033d0:	efffffff 	.word	0xefffffff
 80033d4:	fffcffff 	.word	0xfffcffff

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e042      	b.n	8003470 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	223d      	movs	r2, #61	@ 0x3d
 80033ee:	5c9b      	ldrb	r3, [r3, r2]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d107      	bne.n	8003406 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223c      	movs	r2, #60	@ 0x3c
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f7fe fb31 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	223d      	movs	r2, #61	@ 0x3d
 800340a:	2102      	movs	r1, #2
 800340c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	0019      	movs	r1, r3
 8003418:	0010      	movs	r0, r2
 800341a:	f000 fd83 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2246      	movs	r2, #70	@ 0x46
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223e      	movs	r2, #62	@ 0x3e
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223f      	movs	r2, #63	@ 0x3f
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2240      	movs	r2, #64	@ 0x40
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2241      	movs	r2, #65	@ 0x41
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2242      	movs	r2, #66	@ 0x42
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2243      	movs	r2, #67	@ 0x43
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2244      	movs	r2, #68	@ 0x44
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2245      	movs	r2, #69	@ 0x45
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223d      	movs	r2, #61	@ 0x3d
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223d      	movs	r2, #61	@ 0x3d
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e03b      	b.n	8003508 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	223d      	movs	r2, #61	@ 0x3d
 8003494:	2102      	movs	r1, #2
 8003496:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2101      	movs	r1, #1
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a18      	ldr	r2, [pc, #96]	@ (8003510 <HAL_TIM_Base_Start_IT+0x98>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00f      	beq.n	80034d2 <HAL_TIM_Base_Start_IT+0x5a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d009      	beq.n	80034d2 <HAL_TIM_Base_Start_IT+0x5a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <HAL_TIM_Base_Start_IT+0x9c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIM_Base_Start_IT+0x5a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a12      	ldr	r2, [pc, #72]	@ (8003518 <HAL_TIM_Base_Start_IT+0xa0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d111      	bne.n	80034f6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2207      	movs	r2, #7
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d010      	beq.n	8003506 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	e007      	b.n	8003506 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40014000 	.word	0x40014000

0800351c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e042      	b.n	80035b4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	223d      	movs	r2, #61	@ 0x3d
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223c      	movs	r2, #60	@ 0x3c
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0018      	movs	r0, r3
 8003546:	f000 f839 	bl	80035bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	223d      	movs	r2, #61	@ 0x3d
 800354e:	2102      	movs	r1, #2
 8003550:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	0019      	movs	r1, r3
 800355c:	0010      	movs	r0, r2
 800355e:	f000 fce1 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2246      	movs	r2, #70	@ 0x46
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	223e      	movs	r2, #62	@ 0x3e
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	223f      	movs	r2, #63	@ 0x3f
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2240      	movs	r2, #64	@ 0x40
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2241      	movs	r2, #65	@ 0x41
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2242      	movs	r2, #66	@ 0x42
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2243      	movs	r2, #67	@ 0x43
 8003596:	2101      	movs	r1, #1
 8003598:	5499      	strb	r1, [r3, r2]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2244      	movs	r2, #68	@ 0x44
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2245      	movs	r2, #69	@ 0x45
 80035a6:	2101      	movs	r1, #1
 80035a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	223d      	movs	r2, #61	@ 0x3d
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d108      	bne.n	80035ee <HAL_TIM_PWM_Start+0x22>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	223e      	movs	r2, #62	@ 0x3e
 80035e0:	5c9b      	ldrb	r3, [r3, r2]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	4193      	sbcs	r3, r2
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	e01f      	b.n	800362e <HAL_TIM_PWM_Start+0x62>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d108      	bne.n	8003606 <HAL_TIM_PWM_Start+0x3a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	223f      	movs	r2, #63	@ 0x3f
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	4193      	sbcs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e013      	b.n	800362e <HAL_TIM_PWM_Start+0x62>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d108      	bne.n	800361e <HAL_TIM_PWM_Start+0x52>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2240      	movs	r2, #64	@ 0x40
 8003610:	5c9b      	ldrb	r3, [r3, r2]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	4193      	sbcs	r3, r2
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e007      	b.n	800362e <HAL_TIM_PWM_Start+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2241      	movs	r2, #65	@ 0x41
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	4193      	sbcs	r3, r2
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e074      	b.n	8003720 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0x7a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	223e      	movs	r2, #62	@ 0x3e
 8003640:	2102      	movs	r1, #2
 8003642:	5499      	strb	r1, [r3, r2]
 8003644:	e013      	b.n	800366e <HAL_TIM_PWM_Start+0xa2>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0x8a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223f      	movs	r2, #63	@ 0x3f
 8003650:	2102      	movs	r1, #2
 8003652:	5499      	strb	r1, [r3, r2]
 8003654:	e00b      	b.n	800366e <HAL_TIM_PWM_Start+0xa2>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0x9a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2240      	movs	r2, #64	@ 0x40
 8003660:	2102      	movs	r1, #2
 8003662:	5499      	strb	r1, [r3, r2]
 8003664:	e003      	b.n	800366e <HAL_TIM_PWM_Start+0xa2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2241      	movs	r2, #65	@ 0x41
 800366a:	2102      	movs	r1, #2
 800366c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	0018      	movs	r0, r3
 8003678:	f000 ff78 	bl	800456c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a29      	ldr	r2, [pc, #164]	@ (8003728 <HAL_TIM_PWM_Start+0x15c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_PWM_Start+0xd8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	@ (800372c <HAL_TIM_PWM_Start+0x160>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_PWM_Start+0xd8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <HAL_TIM_PWM_Start+0x164>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_PWM_Start+0xd8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <HAL_TIM_PWM_Start+0x168>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_TIM_PWM_Start+0xdc>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_TIM_PWM_Start+0xde>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2180      	movs	r1, #128	@ 0x80
 80036ba:	0209      	lsls	r1, r1, #8
 80036bc:	430a      	orrs	r2, r1
 80036be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <HAL_TIM_PWM_Start+0x15c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <HAL_TIM_PWM_Start+0x11e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	05db      	lsls	r3, r3, #23
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d009      	beq.n	80036ea <HAL_TIM_PWM_Start+0x11e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HAL_TIM_PWM_Start+0x16c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIM_PWM_Start+0x11e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_TIM_PWM_Start+0x160>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2207      	movs	r2, #7
 80036f2:	4013      	ands	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d010      	beq.n	800371e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2101      	movs	r1, #1
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370c:	e007      	b.n	800371e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800
 8003738:	40000400 	.word	0x40000400

0800373c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e090      	b.n	8003872 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	223d      	movs	r2, #61	@ 0x3d
 8003754:	5c9b      	ldrb	r3, [r3, r2]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d107      	bne.n	800376c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223c      	movs	r2, #60	@ 0x3c
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	0018      	movs	r0, r3
 8003768:	f7fe f9ba 	bl	8001ae0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	223d      	movs	r2, #61	@ 0x3d
 8003770:	2102      	movs	r1, #2
 8003772:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	493f      	ldr	r1, [pc, #252]	@ (800387c <HAL_TIM_Encoder_Init+0x140>)
 8003780:	400a      	ands	r2, r1
 8003782:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	0019      	movs	r1, r3
 800378e:	0010      	movs	r0, r2
 8003790:	f000 fbc8 	bl	8003f24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4a31      	ldr	r2, [pc, #196]	@ (8003880 <HAL_TIM_Encoder_Init+0x144>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	4313      	orrs	r3, r2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003884 <HAL_TIM_Encoder_Init+0x148>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4a2b      	ldr	r2, [pc, #172]	@ (8003888 <HAL_TIM_Encoder_Init+0x14c>)
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	4313      	orrs	r3, r2
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	011a      	lsls	r2, r3, #4
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	031b      	lsls	r3, r3, #12
 80037fe:	4313      	orrs	r3, r2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2222      	movs	r2, #34	@ 0x22
 800380a:	4393      	bics	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2288      	movs	r2, #136	@ 0x88
 8003812:	4393      	bics	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4313      	orrs	r3, r2
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2246      	movs	r2, #70	@ 0x46
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223e      	movs	r2, #62	@ 0x3e
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223f      	movs	r2, #63	@ 0x3f
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2242      	movs	r2, #66	@ 0x42
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2243      	movs	r2, #67	@ 0x43
 8003864:	2101      	movs	r1, #1
 8003866:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223d      	movs	r2, #61	@ 0x3d
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b006      	add	sp, #24
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	ffffbff8 	.word	0xffffbff8
 8003880:	fffffcfc 	.word	0xfffffcfc
 8003884:	fffff3f3 	.word	0xfffff3f3
 8003888:	ffff0f0f 	.word	0xffff0f0f

0800388c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003896:	200f      	movs	r0, #15
 8003898:	183b      	adds	r3, r7, r0
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	213e      	movs	r1, #62	@ 0x3e
 800389e:	5c52      	ldrb	r2, [r2, r1]
 80038a0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038a2:	230e      	movs	r3, #14
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	213f      	movs	r1, #63	@ 0x3f
 80038aa:	5c52      	ldrb	r2, [r2, r1]
 80038ac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ae:	240d      	movs	r4, #13
 80038b0:	193b      	adds	r3, r7, r4
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	2142      	movs	r1, #66	@ 0x42
 80038b6:	5c52      	ldrb	r2, [r2, r1]
 80038b8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038ba:	230c      	movs	r3, #12
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	2143      	movs	r1, #67	@ 0x43
 80038c2:	5c52      	ldrb	r2, [r2, r1]
 80038c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d112      	bne.n	80038f2 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038cc:	183b      	adds	r3, r7, r0
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d103      	bne.n	80038dc <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d001      	beq.n	80038e0 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e075      	b.n	80039cc <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223e      	movs	r2, #62	@ 0x3e
 80038e4:	2102      	movs	r1, #2
 80038e6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2242      	movs	r2, #66	@ 0x42
 80038ec:	2102      	movs	r1, #2
 80038ee:	5499      	strb	r1, [r3, r2]
 80038f0:	e03d      	b.n	800396e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d114      	bne.n	8003922 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f8:	230e      	movs	r3, #14
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d104      	bne.n	800390c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003902:	230c      	movs	r3, #12
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d001      	beq.n	8003910 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e05d      	b.n	80039cc <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	223f      	movs	r2, #63	@ 0x3f
 8003914:	2102      	movs	r1, #2
 8003916:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2243      	movs	r2, #67	@ 0x43
 800391c:	2102      	movs	r1, #2
 800391e:	5499      	strb	r1, [r3, r2]
 8003920:	e025      	b.n	800396e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003922:	230f      	movs	r3, #15
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10e      	bne.n	800394a <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800392c:	230e      	movs	r3, #14
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d109      	bne.n	800394a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003936:	230d      	movs	r3, #13
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d104      	bne.n	800394a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003940:	230c      	movs	r3, #12
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e03e      	b.n	80039cc <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223e      	movs	r2, #62	@ 0x3e
 8003952:	2102      	movs	r1, #2
 8003954:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	223f      	movs	r2, #63	@ 0x3f
 800395a:	2102      	movs	r1, #2
 800395c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2242      	movs	r2, #66	@ 0x42
 8003962:	2102      	movs	r1, #2
 8003964:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2243      	movs	r2, #67	@ 0x43
 800396a:	2102      	movs	r1, #2
 800396c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_TIM_Encoder_Start+0xf0>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d008      	beq.n	800398c <HAL_TIM_Encoder_Start+0x100>
 800397a:	e00f      	b.n	800399c <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	2100      	movs	r1, #0
 8003984:	0018      	movs	r0, r3
 8003986:	f000 fdf1 	bl	800456c <TIM_CCxChannelCmd>
      break;
 800398a:	e016      	b.n	80039ba <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	2104      	movs	r1, #4
 8003994:	0018      	movs	r0, r3
 8003996:	f000 fde9 	bl	800456c <TIM_CCxChannelCmd>
      break;
 800399a:	e00e      	b.n	80039ba <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	2100      	movs	r1, #0
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fde1 	bl	800456c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	2104      	movs	r1, #4
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fdda 	bl	800456c <TIM_CCxChannelCmd>
      break;
 80039b8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b005      	add	sp, #20
 80039d2:	bd90      	pop	{r4, r7, pc}

080039d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2202      	movs	r2, #2
 80039f0:	4013      	ands	r3, r2
 80039f2:	d021      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	d01d      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2203      	movs	r2, #3
 8003a02:	4252      	negs	r2, r2
 8003a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2203      	movs	r2, #3
 8003a14:	4013      	ands	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 fa6a 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e007      	b.n	8003a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 fa5d 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fa69 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	d01e      	beq.n	8003a86 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2205      	movs	r2, #5
 8003a4e:	4252      	negs	r2, r2
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	23c0      	movs	r3, #192	@ 0xc0
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4013      	ands	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 fa43 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003a6e:	e007      	b.n	8003a80 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fa36 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fa42 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d021      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2208      	movs	r2, #8
 8003a92:	4013      	ands	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2209      	movs	r2, #9
 8003a9c:	4252      	negs	r2, r2
 8003a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2203      	movs	r2, #3
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 fa1d 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003aba:	e007      	b.n	8003acc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fa10 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fa1c 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2210      	movs	r2, #16
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d01e      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2211      	movs	r2, #17
 8003ae8:	4252      	negs	r2, r2
 8003aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2208      	movs	r2, #8
 8003af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	23c0      	movs	r3, #192	@ 0xc0
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 f9f6 	bl	8003ef4 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e007      	b.n	8003b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f9e9 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 f9f5 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d00c      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d008      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2202      	movs	r2, #2
 8003b36:	4252      	negs	r2, r2
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fd fb93 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	4013      	ands	r3, r2
 8003b48:	d00c      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d008      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2281      	movs	r2, #129	@ 0x81
 8003b58:	4252      	negs	r2, r2
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 fdec 	bl	800473c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d00c      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	@ 0x40
 8003b70:	4013      	ands	r3, r2
 8003b72:	d008      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2241      	movs	r2, #65	@ 0x41
 8003b7a:	4252      	negs	r2, r2
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f9c7 	bl	8003f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	4013      	ands	r3, r2
 8003b94:	d008      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2221      	movs	r2, #33	@ 0x21
 8003b9c:	4252      	negs	r2, r2
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f000 fdc2 	bl	800472c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2317      	movs	r3, #23
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	223c      	movs	r2, #60	@ 0x3c
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0ad      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	223c      	movs	r2, #60	@ 0x3c
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d100      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003be0:	e076      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d900      	bls.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003be8:	e095      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d04e      	beq.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d900      	bls.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003bf6:	e08e      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d021      	beq.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003c04:	e087      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	0011      	movs	r1, r2
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 fa16 	bl	8004040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2108      	movs	r1, #8
 8003c20:	430a      	orrs	r2, r1
 8003c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2104      	movs	r1, #4
 8003c30:	438a      	bics	r2, r1
 8003c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
      break;
 8003c46:	e06b      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 fa7d 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2180      	movs	r1, #128	@ 0x80
 8003c62:	0109      	lsls	r1, r1, #4
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4931      	ldr	r1, [pc, #196]	@ (8003d38 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
      break;
 8003c8c:	e048      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	0011      	movs	r1, r2
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fade 	bl	8004258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	438a      	bics	r2, r1
 8003cba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69d9      	ldr	r1, [r3, #28]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	61da      	str	r2, [r3, #28]
      break;
 8003cce:	e027      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 fb43 	bl	8004364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2180      	movs	r1, #128	@ 0x80
 8003cea:	0109      	lsls	r1, r1, #4
 8003cec:	430a      	orrs	r2, r1
 8003cee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	490f      	ldr	r1, [pc, #60]	@ (8003d38 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69d9      	ldr	r1, [r3, #28]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	021a      	lsls	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
      break;
 8003d14:	e004      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003d16:	2317      	movs	r3, #23
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
      break;
 8003d1e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	223c      	movs	r2, #60	@ 0x3c
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

  return status;
 8003d28:	2317      	movs	r3, #23
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	781b      	ldrb	r3, [r3, #0]
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	fffffbff 	.word	0xfffffbff

08003d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	230f      	movs	r3, #15
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223c      	movs	r2, #60	@ 0x3c
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x20>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0bc      	b.n	8003ed6 <HAL_TIM_ConfigClockSource+0x19a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	223c      	movs	r2, #60	@ 0x3c
 8003d60:	2101      	movs	r1, #1
 8003d62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	223d      	movs	r2, #61	@ 0x3d
 8003d68:	2102      	movs	r1, #2
 8003d6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2277      	movs	r2, #119	@ 0x77
 8003d78:	4393      	bics	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4a58      	ldr	r2, [pc, #352]	@ (8003ee0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2280      	movs	r2, #128	@ 0x80
 8003d92:	0192      	lsls	r2, r2, #6
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xde>
 8003d98:	2280      	movs	r2, #128	@ 0x80
 8003d9a:	0192      	lsls	r2, r2, #6
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d900      	bls.n	8003da2 <HAL_TIM_ConfigClockSource+0x66>
 8003da0:	e088      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	0152      	lsls	r2, r2, #5
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d100      	bne.n	8003dac <HAL_TIM_ConfigClockSource+0x70>
 8003daa:	e088      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x182>
 8003dac:	2280      	movs	r2, #128	@ 0x80
 8003dae:	0152      	lsls	r2, r2, #5
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d900      	bls.n	8003db6 <HAL_TIM_ConfigClockSource+0x7a>
 8003db4:	e07e      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003db6:	2b70      	cmp	r3, #112	@ 0x70
 8003db8:	d018      	beq.n	8003dec <HAL_TIM_ConfigClockSource+0xb0>
 8003dba:	d900      	bls.n	8003dbe <HAL_TIM_ConfigClockSource+0x82>
 8003dbc:	e07a      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003dbe:	2b60      	cmp	r3, #96	@ 0x60
 8003dc0:	d04f      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x126>
 8003dc2:	d900      	bls.n	8003dc6 <HAL_TIM_ConfigClockSource+0x8a>
 8003dc4:	e076      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003dc6:	2b50      	cmp	r3, #80	@ 0x50
 8003dc8:	d03b      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x106>
 8003dca:	d900      	bls.n	8003dce <HAL_TIM_ConfigClockSource+0x92>
 8003dcc:	e072      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003dce:	2b40      	cmp	r3, #64	@ 0x40
 8003dd0:	d057      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x146>
 8003dd2:	d900      	bls.n	8003dd6 <HAL_TIM_ConfigClockSource+0x9a>
 8003dd4:	e06e      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003dd6:	2b30      	cmp	r3, #48	@ 0x30
 8003dd8:	d063      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x166>
 8003dda:	d86b      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d060      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x166>
 8003de0:	d868      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d05d      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x166>
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d05b      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x166>
 8003dea:	e063      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	f000 fb96 	bl	800452c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2277      	movs	r2, #119	@ 0x77
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
      break;
 8003e18:	e052      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	f000 fb7f 	bl	800452c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	01c9      	lsls	r1, r1, #7
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
      break;
 8003e40:	e03e      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	001a      	movs	r2, r3
 8003e50:	f000 faf2 	bl	8004438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2150      	movs	r1, #80	@ 0x50
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f000 fb4c 	bl	80044f8 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e02e      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6e:	001a      	movs	r2, r3
 8003e70:	f000 fb10 	bl	8004494 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2160      	movs	r1, #96	@ 0x60
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fb3c 	bl	80044f8 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e01e      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8e:	001a      	movs	r2, r3
 8003e90:	f000 fad2 	bl	8004438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2140      	movs	r1, #64	@ 0x40
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fb2c 	bl	80044f8 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e00e      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0019      	movs	r1, r3
 8003eac:	0010      	movs	r0, r2
 8003eae:	f000 fb23 	bl	80044f8 <TIM_ITRx_SetConfig>
      break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ebe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	223d      	movs	r2, #61	@ 0x3d
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	223c      	movs	r2, #60	@ 0x3c
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5499      	strb	r1, [r3, r2]

  return status;
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	781b      	ldrb	r3, [r3, #0]
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b004      	add	sp, #16
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	ffff00ff 	.word	0xffff00ff

08003ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0c:	46c0      	nop			@ (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	@ (8004024 <TIM_Base_SetConfig+0x100>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d008      	beq.n	8003f4e <TIM_Base_SetConfig+0x2a>
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	05db      	lsls	r3, r3, #23
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x2a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a37      	ldr	r2, [pc, #220]	@ (8004028 <TIM_Base_SetConfig+0x104>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2270      	movs	r2, #112	@ 0x70
 8003f52:	4393      	bics	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a30      	ldr	r2, [pc, #192]	@ (8004024 <TIM_Base_SetConfig+0x100>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <TIM_Base_SetConfig+0x76>
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d013      	beq.n	8003f9a <TIM_Base_SetConfig+0x76>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	@ (8004028 <TIM_Base_SetConfig+0x104>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_Base_SetConfig+0x76>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800402c <TIM_Base_SetConfig+0x108>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <TIM_Base_SetConfig+0x76>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <TIM_Base_SetConfig+0x10c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_Base_SetConfig+0x76>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a29      	ldr	r2, [pc, #164]	@ (8004034 <TIM_Base_SetConfig+0x110>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_Base_SetConfig+0x76>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a28      	ldr	r2, [pc, #160]	@ (8004038 <TIM_Base_SetConfig+0x114>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a27      	ldr	r2, [pc, #156]	@ (800403c <TIM_Base_SetConfig+0x118>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <TIM_Base_SetConfig+0x100>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xce>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a14      	ldr	r2, [pc, #80]	@ (8004030 <TIM_Base_SetConfig+0x10c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0xce>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	@ (8004034 <TIM_Base_SetConfig+0x110>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0xce>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a12      	ldr	r2, [pc, #72]	@ (8004038 <TIM_Base_SetConfig+0x114>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d103      	bne.n	8003ffa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2201      	movs	r2, #1
 8004006:	4013      	ands	r3, r2
 8004008:	2b01      	cmp	r3, #1
 800400a:	d106      	bne.n	800401a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2201      	movs	r2, #1
 8004012:	4393      	bics	r3, r2
 8004014:	001a      	movs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]
  }
}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40000400 	.word	0x40000400
 800402c:	40002000 	.word	0x40002000
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	fffffcff 	.word	0xfffffcff

08004040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	2201      	movs	r2, #1
 8004056:	4393      	bics	r3, r2
 8004058:	001a      	movs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2270      	movs	r2, #112	@ 0x70
 800406e:	4393      	bics	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2203      	movs	r2, #3
 8004076:	4393      	bics	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2202      	movs	r2, #2
 8004088:	4393      	bics	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a27      	ldr	r2, [pc, #156]	@ (8004138 <TIM_OC1_SetConfig+0xf8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_OC1_SetConfig+0x76>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a26      	ldr	r2, [pc, #152]	@ (800413c <TIM_OC1_SetConfig+0xfc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_OC1_SetConfig+0x76>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a25      	ldr	r2, [pc, #148]	@ (8004140 <TIM_OC1_SetConfig+0x100>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_OC1_SetConfig+0x76>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <TIM_OC1_SetConfig+0x104>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10c      	bne.n	80040d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2208      	movs	r2, #8
 80040ba:	4393      	bics	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2204      	movs	r2, #4
 80040cc:	4393      	bics	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <TIM_OC1_SetConfig+0xf8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <TIM_OC1_SetConfig+0xb0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a18      	ldr	r2, [pc, #96]	@ (800413c <TIM_OC1_SetConfig+0xfc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_OC1_SetConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <TIM_OC1_SetConfig+0x100>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC1_SetConfig+0xb0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a16      	ldr	r2, [pc, #88]	@ (8004144 <TIM_OC1_SetConfig+0x104>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d111      	bne.n	8004114 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <TIM_OC1_SetConfig+0x108>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4a14      	ldr	r2, [pc, #80]	@ (800414c <TIM_OC1_SetConfig+0x10c>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b006      	add	sp, #24
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800
 8004148:	fffffeff 	.word	0xfffffeff
 800414c:	fffffdff 	.word	0xfffffdff

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	2210      	movs	r2, #16
 8004166:	4393      	bics	r3, r2
 8004168:	001a      	movs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <TIM_OC2_SetConfig+0xe8>)
 800417e:	4013      	ands	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a2d      	ldr	r2, [pc, #180]	@ (800423c <TIM_OC2_SetConfig+0xec>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2220      	movs	r2, #32
 800419a:	4393      	bics	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a24      	ldr	r2, [pc, #144]	@ (8004240 <TIM_OC2_SetConfig+0xf0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10d      	bne.n	80041ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	4393      	bics	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2240      	movs	r2, #64	@ 0x40
 80041ca:	4393      	bics	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <TIM_OC2_SetConfig+0xf0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_OC2_SetConfig+0x9e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004244 <TIM_OC2_SetConfig+0xf4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_OC2_SetConfig+0x9e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <TIM_OC2_SetConfig+0xf8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC2_SetConfig+0x9e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a18      	ldr	r2, [pc, #96]	@ (800424c <TIM_OC2_SetConfig+0xfc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d113      	bne.n	8004216 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4a17      	ldr	r2, [pc, #92]	@ (8004250 <TIM_OC2_SetConfig+0x100>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4a16      	ldr	r2, [pc, #88]	@ (8004254 <TIM_OC2_SetConfig+0x104>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b006      	add	sp, #24
 8004236:	bd80      	pop	{r7, pc}
 8004238:	ffff8fff 	.word	0xffff8fff
 800423c:	fffffcff 	.word	0xfffffcff
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800
 8004250:	fffffbff 	.word	0xfffffbff
 8004254:	fffff7ff 	.word	0xfffff7ff

08004258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4a33      	ldr	r2, [pc, #204]	@ (800433c <TIM_OC3_SetConfig+0xe4>)
 800426e:	401a      	ands	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2270      	movs	r2, #112	@ 0x70
 8004284:	4393      	bics	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2203      	movs	r2, #3
 800428c:	4393      	bics	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	4a28      	ldr	r2, [pc, #160]	@ (8004340 <TIM_OC3_SetConfig+0xe8>)
 800429e:	4013      	ands	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a24      	ldr	r2, [pc, #144]	@ (8004344 <TIM_OC3_SetConfig+0xec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10d      	bne.n	80042d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4a23      	ldr	r2, [pc, #140]	@ (8004348 <TIM_OC3_SetConfig+0xf0>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <TIM_OC3_SetConfig+0xf4>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004344 <TIM_OC3_SetConfig+0xec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <TIM_OC3_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004350 <TIM_OC3_SetConfig+0xf8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <TIM_OC3_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004354 <TIM_OC3_SetConfig+0xfc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_OC3_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <TIM_OC3_SetConfig+0x100>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d113      	bne.n	800431a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4a19      	ldr	r2, [pc, #100]	@ (800435c <TIM_OC3_SetConfig+0x104>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <TIM_OC3_SetConfig+0x108>)
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	46c0      	nop			@ (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bd80      	pop	{r7, pc}
 800433c:	fffffeff 	.word	0xfffffeff
 8004340:	fffffdff 	.word	0xfffffdff
 8004344:	40012c00 	.word	0x40012c00
 8004348:	fffff7ff 	.word	0xfffff7ff
 800434c:	fffffbff 	.word	0xfffffbff
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800
 800435c:	ffffefff 	.word	0xffffefff
 8004360:	ffffdfff 	.word	0xffffdfff

08004364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4a26      	ldr	r2, [pc, #152]	@ (8004414 <TIM_OC4_SetConfig+0xb0>)
 800437a:	401a      	ands	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a22      	ldr	r2, [pc, #136]	@ (8004418 <TIM_OC4_SetConfig+0xb4>)
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a21      	ldr	r2, [pc, #132]	@ (800441c <TIM_OC4_SetConfig+0xb8>)
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004420 <TIM_OC4_SetConfig+0xbc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a19      	ldr	r2, [pc, #100]	@ (8004424 <TIM_OC4_SetConfig+0xc0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_OC4_SetConfig+0x78>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <TIM_OC4_SetConfig+0xc4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_OC4_SetConfig+0x78>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a17      	ldr	r2, [pc, #92]	@ (800442c <TIM_OC4_SetConfig+0xc8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_OC4_SetConfig+0x78>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <TIM_OC4_SetConfig+0xcc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d109      	bne.n	80043f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <TIM_OC4_SetConfig+0xd0>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b006      	add	sp, #24
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	ffffefff 	.word	0xffffefff
 8004418:	ffff8fff 	.word	0xffff8fff
 800441c:	fffffcff 	.word	0xfffffcff
 8004420:	ffffdfff 	.word	0xffffdfff
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800
 8004434:	ffffbfff 	.word	0xffffbfff

08004438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	2201      	movs	r2, #1
 8004450:	4393      	bics	r3, r2
 8004452:	001a      	movs	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	22f0      	movs	r2, #240	@ 0xf0
 8004462:	4393      	bics	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	220a      	movs	r2, #10
 8004474:	4393      	bics	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b006      	add	sp, #24
 8004492:	bd80      	pop	{r7, pc}

08004494 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	2210      	movs	r2, #16
 80044ac:	4393      	bics	r3, r2
 80044ae:	001a      	movs	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <TIM_TI2_ConfigInputStage+0x60>)
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	22a0      	movs	r2, #160	@ 0xa0
 80044d0:	4393      	bics	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b006      	add	sp, #24
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	ffff0fff 	.word	0xffff0fff

080044f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2270      	movs	r2, #112	@ 0x70
 800450c:	4393      	bics	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	2207      	movs	r2, #7
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	609a      	str	r2, [r3, #8]
}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	b004      	add	sp, #16
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4a09      	ldr	r2, [pc, #36]	@ (8004568 <TIM_ETR_SetConfig+0x3c>)
 8004544:	4013      	ands	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	431a      	orrs	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}
 8004568:	ffff00ff 	.word	0xffff00ff

0800456c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	221f      	movs	r2, #31
 800457c:	4013      	ands	r3, r2
 800457e:	2201      	movs	r2, #1
 8004580:	409a      	lsls	r2, r3
 8004582:	0013      	movs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	43d2      	mvns	r2, r2
 800458e:	401a      	ands	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	211f      	movs	r1, #31
 800459c:	400b      	ands	r3, r1
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4099      	lsls	r1, r3
 80045a2:	000b      	movs	r3, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b006      	add	sp, #24
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223c      	movs	r2, #60	@ 0x3c
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e047      	b.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	223c      	movs	r2, #60	@ 0x3c
 80045d0:	2101      	movs	r1, #1
 80045d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	223d      	movs	r2, #61	@ 0x3d
 80045d8:	2102      	movs	r1, #2
 80045da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2270      	movs	r2, #112	@ 0x70
 80045f0:	4393      	bics	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a16      	ldr	r2, [pc, #88]	@ (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00f      	beq.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2380      	movs	r3, #128	@ 0x80
 8004616:	05db      	lsls	r3, r3, #23
 8004618:	429a      	cmp	r2, r3
 800461a:	d009      	beq.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a11      	ldr	r2, [pc, #68]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a10      	ldr	r2, [pc, #64]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10c      	bne.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2280      	movs	r2, #128	@ 0x80
 8004634:	4393      	bics	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4313      	orrs	r3, r2
 8004640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223d      	movs	r2, #61	@ 0x3d
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	223c      	movs	r2, #60	@ 0x3c
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40000400 	.word	0x40000400
 800466c:	40014000 	.word	0x40014000

08004670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	223c      	movs	r2, #60	@ 0x3c
 8004682:	5c9b      	ldrb	r3, [r3, r2]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e03e      	b.n	800470a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	223c      	movs	r2, #60	@ 0x3c
 8004690:	2101      	movs	r1, #1
 8004692:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	22ff      	movs	r2, #255	@ 0xff
 8004698:	4393      	bics	r3, r2
 800469a:	001a      	movs	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80046a8:	401a      	ands	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80046b6:	401a      	ands	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80046c4:	401a      	ands	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a13      	ldr	r2, [pc, #76]	@ (8004720 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80046d2:	401a      	ands	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80046e0:	401a      	ands	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004728 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80046ee:	401a      	ands	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	223c      	movs	r2, #60	@ 0x3c
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b004      	add	sp, #16
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	fffffcff 	.word	0xfffffcff
 8004718:	fffffbff 	.word	0xfffffbff
 800471c:	fffff7ff 	.word	0xfffff7ff
 8004720:	ffffefff 	.word	0xffffefff
 8004724:	ffffdfff 	.word	0xffffdfff
 8004728:	ffffbfff 	.word	0xffffbfff

0800472c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004734:	46c0      	nop			@ (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004744:	46c0      	nop			@ (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e044      	b.n	80047e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2278      	movs	r2, #120	@ 0x78
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7fd fa93 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2224      	movs	r2, #36	@ 0x24
 800477a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	438a      	bics	r2, r1
 800478a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 fb3c 	bl	8004e14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f9b0 	bl	8004b04 <UART_SetConfig>
 80047a4:	0003      	movs	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e01c      	b.n	80047e8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	490d      	ldr	r1, [pc, #52]	@ (80047f0 <HAL_UART_Init+0xa4>)
 80047ba:	400a      	ands	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	212a      	movs	r1, #42	@ 0x2a
 80047ca:	438a      	bics	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 fbcb 	bl	8004f7c <UART_CheckIdleState>
 80047e6:	0003      	movs	r3, r0
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	ffffb7ff 	.word	0xffffb7ff

080047f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	@ 0x28
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	1dbb      	adds	r3, r7, #6
 8004802:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004808:	2b20      	cmp	r3, #32
 800480a:	d000      	beq.n	800480e <HAL_UART_Transmit+0x1a>
 800480c:	e08c      	b.n	8004928 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_UART_Transmit+0x28>
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e084      	b.n	800492a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	015b      	lsls	r3, r3, #5
 8004828:	429a      	cmp	r2, r3
 800482a:	d109      	bne.n	8004840 <HAL_UART_Transmit+0x4c>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2201      	movs	r2, #1
 8004838:	4013      	ands	r3, r2
 800483a:	d001      	beq.n	8004840 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e074      	b.n	800492a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2284      	movs	r2, #132	@ 0x84
 8004844:	2100      	movs	r1, #0
 8004846:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2221      	movs	r2, #33	@ 0x21
 800484c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800484e:	f7fd faf5 	bl	8001e3c <HAL_GetTick>
 8004852:	0003      	movs	r3, r0
 8004854:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1dba      	adds	r2, r7, #6
 800485a:	2150      	movs	r1, #80	@ 0x50
 800485c:	8812      	ldrh	r2, [r2, #0]
 800485e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1dba      	adds	r2, r7, #6
 8004864:	2152      	movs	r1, #82	@ 0x52
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	2380      	movs	r3, #128	@ 0x80
 8004870:	015b      	lsls	r3, r3, #5
 8004872:	429a      	cmp	r2, r3
 8004874:	d108      	bne.n	8004888 <HAL_UART_Transmit+0x94>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	e003      	b.n	8004890 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004890:	e02f      	b.n	80048f2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0013      	movs	r3, r2
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	f000 fc14 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e03b      	b.n	800492a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	05d2      	lsls	r2, r2, #23
 80048c2:	0dd2      	lsrs	r2, r2, #23
 80048c4:	b292      	uxth	r2, r2
 80048c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	3302      	adds	r3, #2
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e007      	b.n	80048e0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	781a      	ldrb	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3301      	adds	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2252      	movs	r2, #82	@ 0x52
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b299      	uxth	r1, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2252      	movs	r2, #82	@ 0x52
 80048f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2252      	movs	r2, #82	@ 0x52
 80048f6:	5a9b      	ldrh	r3, [r3, r2]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1c9      	bne.n	8004892 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	0013      	movs	r3, r2
 8004908:	2200      	movs	r2, #0
 800490a:	2140      	movs	r1, #64	@ 0x40
 800490c:	f000 fbde 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d004      	beq.n	800491e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e005      	b.n	800492a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b008      	add	sp, #32
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	1dbb      	adds	r3, r7, #6
 8004942:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2280      	movs	r2, #128	@ 0x80
 8004948:	589b      	ldr	r3, [r3, r2]
 800494a:	2b20      	cmp	r3, #32
 800494c:	d000      	beq.n	8004950 <HAL_UART_Receive+0x1c>
 800494e:	e0d1      	b.n	8004af4 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_UART_Receive+0x2a>
 8004956:	1dbb      	adds	r3, r7, #6
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0c9      	b.n	8004af6 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	015b      	lsls	r3, r3, #5
 800496a:	429a      	cmp	r2, r3
 800496c:	d109      	bne.n	8004982 <HAL_UART_Receive+0x4e>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	d001      	beq.n	8004982 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0b9      	b.n	8004af6 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2284      	movs	r2, #132	@ 0x84
 8004986:	2100      	movs	r1, #0
 8004988:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2280      	movs	r2, #128	@ 0x80
 800498e:	2122      	movs	r1, #34	@ 0x22
 8004990:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004998:	f7fd fa50 	bl	8001e3c <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1dba      	adds	r2, r7, #6
 80049a4:	2158      	movs	r1, #88	@ 0x58
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1dba      	adds	r2, r7, #6
 80049ae:	215a      	movs	r1, #90	@ 0x5a
 80049b0:	8812      	ldrh	r2, [r2, #0]
 80049b2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	2380      	movs	r3, #128	@ 0x80
 80049ba:	015b      	lsls	r3, r3, #5
 80049bc:	429a      	cmp	r2, r3
 80049be:	d10d      	bne.n	80049dc <HAL_UART_Receive+0xa8>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <HAL_UART_Receive+0x9e>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	225c      	movs	r2, #92	@ 0x5c
 80049cc:	494c      	ldr	r1, [pc, #304]	@ (8004b00 <HAL_UART_Receive+0x1cc>)
 80049ce:	5299      	strh	r1, [r3, r2]
 80049d0:	e02e      	b.n	8004a30 <HAL_UART_Receive+0xfc>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	225c      	movs	r2, #92	@ 0x5c
 80049d6:	21ff      	movs	r1, #255	@ 0xff
 80049d8:	5299      	strh	r1, [r3, r2]
 80049da:	e029      	b.n	8004a30 <HAL_UART_Receive+0xfc>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <HAL_UART_Receive+0xcc>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_UART_Receive+0xc2>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	225c      	movs	r2, #92	@ 0x5c
 80049f0:	21ff      	movs	r1, #255	@ 0xff
 80049f2:	5299      	strh	r1, [r3, r2]
 80049f4:	e01c      	b.n	8004a30 <HAL_UART_Receive+0xfc>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	225c      	movs	r2, #92	@ 0x5c
 80049fa:	217f      	movs	r1, #127	@ 0x7f
 80049fc:	5299      	strh	r1, [r3, r2]
 80049fe:	e017      	b.n	8004a30 <HAL_UART_Receive+0xfc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	055b      	lsls	r3, r3, #21
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d10d      	bne.n	8004a28 <HAL_UART_Receive+0xf4>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <HAL_UART_Receive+0xea>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	225c      	movs	r2, #92	@ 0x5c
 8004a18:	217f      	movs	r1, #127	@ 0x7f
 8004a1a:	5299      	strh	r1, [r3, r2]
 8004a1c:	e008      	b.n	8004a30 <HAL_UART_Receive+0xfc>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	225c      	movs	r2, #92	@ 0x5c
 8004a22:	213f      	movs	r1, #63	@ 0x3f
 8004a24:	5299      	strh	r1, [r3, r2]
 8004a26:	e003      	b.n	8004a30 <HAL_UART_Receive+0xfc>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	225c      	movs	r2, #92	@ 0x5c
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004a30:	2312      	movs	r3, #18
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	215c      	movs	r1, #92	@ 0x5c
 8004a38:	5a52      	ldrh	r2, [r2, r1]
 8004a3a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	2380      	movs	r3, #128	@ 0x80
 8004a42:	015b      	lsls	r3, r3, #5
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d108      	bne.n	8004a5a <HAL_UART_Receive+0x126>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e003      	b.n	8004a62 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a62:	e03b      	b.n	8004adc <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2120      	movs	r1, #32
 8004a72:	f000 fb2b 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004a76:	1e03      	subs	r3, r0, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2280      	movs	r2, #128	@ 0x80
 8004a7e:	2120      	movs	r1, #32
 8004a80:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e037      	b.n	8004af6 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10e      	bne.n	8004aaa <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2212      	movs	r2, #18
 8004a96:	18ba      	adds	r2, r7, r2
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e00f      	b.n	8004aca <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2212      	movs	r2, #18
 8004ab6:	18ba      	adds	r2, r7, r2
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	4013      	ands	r3, r2
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	225a      	movs	r2, #90	@ 0x5a
 8004ace:	5a9b      	ldrh	r3, [r3, r2]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b299      	uxth	r1, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	225a      	movs	r2, #90	@ 0x5a
 8004ada:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	225a      	movs	r2, #90	@ 0x5a
 8004ae0:	5a9b      	ldrh	r3, [r3, r2]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1bd      	bne.n	8004a64 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2280      	movs	r2, #128	@ 0x80
 8004aec:	2120      	movs	r1, #32
 8004aee:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b008      	add	sp, #32
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	000001ff 	.word	0x000001ff

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0c:	231e      	movs	r3, #30
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4aaf      	ldr	r2, [pc, #700]	@ (8004df0 <UART_SetConfig+0x2ec>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4aaa      	ldr	r2, [pc, #680]	@ (8004df4 <UART_SetConfig+0x2f0>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4aa1      	ldr	r2, [pc, #644]	@ (8004df8 <UART_SetConfig+0x2f4>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a9d      	ldr	r2, [pc, #628]	@ (8004dfc <UART_SetConfig+0x2f8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d127      	bne.n	8004bda <UART_SetConfig+0xd6>
 8004b8a:	4b9d      	ldr	r3, [pc, #628]	@ (8004e00 <UART_SetConfig+0x2fc>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d00d      	beq.n	8004bb2 <UART_SetConfig+0xae>
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0xcc>
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d014      	beq.n	8004bc6 <UART_SetConfig+0xc2>
 8004b9c:	d818      	bhi.n	8004bd0 <UART_SetConfig+0xcc>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <UART_SetConfig+0xa4>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00a      	beq.n	8004bbc <UART_SetConfig+0xb8>
 8004ba6:	e013      	b.n	8004bd0 <UART_SetConfig+0xcc>
 8004ba8:	231f      	movs	r3, #31
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e065      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004bb2:	231f      	movs	r3, #31
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e060      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004bbc:	231f      	movs	r3, #31
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	e05b      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004bc6:	231f      	movs	r3, #31
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2208      	movs	r2, #8
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e056      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004bd0:	231f      	movs	r3, #31
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e051      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a89      	ldr	r2, [pc, #548]	@ (8004e04 <UART_SetConfig+0x300>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d134      	bne.n	8004c4e <UART_SetConfig+0x14a>
 8004be4:	4b86      	ldr	r3, [pc, #536]	@ (8004e00 <UART_SetConfig+0x2fc>)
 8004be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004be8:	23c0      	movs	r3, #192	@ 0xc0
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	4013      	ands	r3, r2
 8004bee:	22c0      	movs	r2, #192	@ 0xc0
 8004bf0:	0292      	lsls	r2, r2, #10
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d017      	beq.n	8004c26 <UART_SetConfig+0x122>
 8004bf6:	22c0      	movs	r2, #192	@ 0xc0
 8004bf8:	0292      	lsls	r2, r2, #10
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d822      	bhi.n	8004c44 <UART_SetConfig+0x140>
 8004bfe:	2280      	movs	r2, #128	@ 0x80
 8004c00:	0292      	lsls	r2, r2, #10
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d019      	beq.n	8004c3a <UART_SetConfig+0x136>
 8004c06:	2280      	movs	r2, #128	@ 0x80
 8004c08:	0292      	lsls	r2, r2, #10
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d81a      	bhi.n	8004c44 <UART_SetConfig+0x140>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <UART_SetConfig+0x118>
 8004c12:	2280      	movs	r2, #128	@ 0x80
 8004c14:	0252      	lsls	r2, r2, #9
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00a      	beq.n	8004c30 <UART_SetConfig+0x12c>
 8004c1a:	e013      	b.n	8004c44 <UART_SetConfig+0x140>
 8004c1c:	231f      	movs	r3, #31
 8004c1e:	18fb      	adds	r3, r7, r3
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e02b      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c26:	231f      	movs	r3, #31
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e026      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c30:	231f      	movs	r3, #31
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2204      	movs	r2, #4
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e021      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c3a:	231f      	movs	r3, #31
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2208      	movs	r2, #8
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e01c      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c44:	231f      	movs	r3, #31
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2210      	movs	r2, #16
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e017      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6d      	ldr	r2, [pc, #436]	@ (8004e08 <UART_SetConfig+0x304>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d104      	bne.n	8004c62 <UART_SetConfig+0x15e>
 8004c58:	231f      	movs	r3, #31
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a69      	ldr	r2, [pc, #420]	@ (8004e0c <UART_SetConfig+0x308>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d104      	bne.n	8004c76 <UART_SetConfig+0x172>
 8004c6c:	231f      	movs	r3, #31
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e003      	b.n	8004c7e <UART_SetConfig+0x17a>
 8004c76:	231f      	movs	r3, #31
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	2210      	movs	r2, #16
 8004c7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d15c      	bne.n	8004d44 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004c8a:	231f      	movs	r3, #31
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d015      	beq.n	8004cc0 <UART_SetConfig+0x1bc>
 8004c94:	dc18      	bgt.n	8004cc8 <UART_SetConfig+0x1c4>
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d00d      	beq.n	8004cb6 <UART_SetConfig+0x1b2>
 8004c9a:	dc15      	bgt.n	8004cc8 <UART_SetConfig+0x1c4>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <UART_SetConfig+0x1a2>
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d005      	beq.n	8004cb0 <UART_SetConfig+0x1ac>
 8004ca4:	e010      	b.n	8004cc8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca6:	f7fe fa83 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004caa:	0003      	movs	r3, r0
 8004cac:	61bb      	str	r3, [r7, #24]
        break;
 8004cae:	e012      	b.n	8004cd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b57      	ldr	r3, [pc, #348]	@ (8004e10 <UART_SetConfig+0x30c>)
 8004cb2:	61bb      	str	r3, [r7, #24]
        break;
 8004cb4:	e00f      	b.n	8004cd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe f9ff 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	61bb      	str	r3, [r7, #24]
        break;
 8004cbe:	e00a      	b.n	8004cd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	61bb      	str	r3, [r7, #24]
        break;
 8004cc6:	e006      	b.n	8004cd6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ccc:	231e      	movs	r3, #30
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
        break;
 8004cd4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d100      	bne.n	8004cde <UART_SetConfig+0x1da>
 8004cdc:	e07a      	b.n	8004dd4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	005a      	lsls	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	18d2      	adds	r2, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	0019      	movs	r1, r3
 8004cf0:	0010      	movs	r0, r2
 8004cf2:	f7fb fa1b 	bl	800012c <__udivsi3>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d91c      	bls.n	8004d3a <UART_SetConfig+0x236>
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	2380      	movs	r3, #128	@ 0x80
 8004d04:	025b      	lsls	r3, r3, #9
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d217      	bcs.n	8004d3a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	200e      	movs	r0, #14
 8004d10:	183b      	adds	r3, r7, r0
 8004d12:	210f      	movs	r1, #15
 8004d14:	438a      	bics	r2, r1
 8004d16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2207      	movs	r2, #7
 8004d20:	4013      	ands	r3, r2
 8004d22:	b299      	uxth	r1, r3
 8004d24:	183b      	adds	r3, r7, r0
 8004d26:	183a      	adds	r2, r7, r0
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	183a      	adds	r2, r7, r0
 8004d34:	8812      	ldrh	r2, [r2, #0]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e04c      	b.n	8004dd4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3a:	231e      	movs	r3, #30
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e047      	b.n	8004dd4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d44:	231f      	movs	r3, #31
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d015      	beq.n	8004d7a <UART_SetConfig+0x276>
 8004d4e:	dc18      	bgt.n	8004d82 <UART_SetConfig+0x27e>
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d00d      	beq.n	8004d70 <UART_SetConfig+0x26c>
 8004d54:	dc15      	bgt.n	8004d82 <UART_SetConfig+0x27e>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <UART_SetConfig+0x25c>
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d005      	beq.n	8004d6a <UART_SetConfig+0x266>
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d60:	f7fe fa26 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004d64:	0003      	movs	r3, r0
 8004d66:	61bb      	str	r3, [r7, #24]
        break;
 8004d68:	e012      	b.n	8004d90 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d6a:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <UART_SetConfig+0x30c>)
 8004d6c:	61bb      	str	r3, [r7, #24]
        break;
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d70:	f7fe f9a2 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8004d74:	0003      	movs	r3, r0
 8004d76:	61bb      	str	r3, [r7, #24]
        break;
 8004d78:	e00a      	b.n	8004d90 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e006      	b.n	8004d90 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d86:	231e      	movs	r3, #30
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
        break;
 8004d8e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01e      	beq.n	8004dd4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	085a      	lsrs	r2, r3, #1
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	18d2      	adds	r2, r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0019      	movs	r1, r3
 8004da6:	0010      	movs	r0, r2
 8004da8:	f7fb f9c0 	bl	800012c <__udivsi3>
 8004dac:	0003      	movs	r3, r0
 8004dae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d90a      	bls.n	8004dcc <UART_SetConfig+0x2c8>
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	025b      	lsls	r3, r3, #9
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d205      	bcs.n	8004dcc <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	e003      	b.n	8004dd4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004dcc:	231e      	movs	r3, #30
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004de0:	231e      	movs	r3, #30
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	781b      	ldrb	r3, [r3, #0]
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b008      	add	sp, #32
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	efff69f3 	.word	0xefff69f3
 8004df4:	ffffcfff 	.word	0xffffcfff
 8004df8:	fffff4ff 	.word	0xfffff4ff
 8004dfc:	40013800 	.word	0x40013800
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40004400 	.word	0x40004400
 8004e08:	40004800 	.word	0x40004800
 8004e0c:	40004c00 	.word	0x40004c00
 8004e10:	007a1200 	.word	0x007a1200

08004e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	2208      	movs	r2, #8
 8004e22:	4013      	ands	r3, r2
 8004e24:	d00b      	beq.n	8004e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f58 <UART_AdvFeatureConfig+0x144>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	0019      	movs	r1, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	2201      	movs	r2, #1
 8004e44:	4013      	ands	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4a43      	ldr	r2, [pc, #268]	@ (8004f5c <UART_AdvFeatureConfig+0x148>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	2202      	movs	r2, #2
 8004e66:	4013      	ands	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a3b      	ldr	r2, [pc, #236]	@ (8004f60 <UART_AdvFeatureConfig+0x14c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	2204      	movs	r2, #4
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a34      	ldr	r2, [pc, #208]	@ (8004f64 <UART_AdvFeatureConfig+0x150>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f68 <UART_AdvFeatureConfig+0x154>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	2220      	movs	r2, #32
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4a25      	ldr	r2, [pc, #148]	@ (8004f6c <UART_AdvFeatureConfig+0x158>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	2240      	movs	r2, #64	@ 0x40
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d01d      	beq.n	8004f2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <UART_AdvFeatureConfig+0x15c>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	0019      	movs	r1, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f0e:	2380      	movs	r3, #128	@ 0x80
 8004f10:	035b      	lsls	r3, r3, #13
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d10b      	bne.n	8004f2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a15      	ldr	r2, [pc, #84]	@ (8004f74 <UART_AdvFeatureConfig+0x160>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	2280      	movs	r2, #128	@ 0x80
 8004f34:	4013      	ands	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f78 <UART_AdvFeatureConfig+0x164>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }
}
 8004f50:	46c0      	nop			@ (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	ffff7fff 	.word	0xffff7fff
 8004f5c:	fffdffff 	.word	0xfffdffff
 8004f60:	fffeffff 	.word	0xfffeffff
 8004f64:	fffbffff 	.word	0xfffbffff
 8004f68:	ffffefff 	.word	0xffffefff
 8004f6c:	ffffdfff 	.word	0xffffdfff
 8004f70:	ffefffff 	.word	0xffefffff
 8004f74:	ff9fffff 	.word	0xff9fffff
 8004f78:	fff7ffff 	.word	0xfff7ffff

08004f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b092      	sub	sp, #72	@ 0x48
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2284      	movs	r2, #132	@ 0x84
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f8c:	f7fc ff56 	bl	8001e3c <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d12c      	bne.n	8004ffc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	2280      	movs	r2, #128	@ 0x80
 8004fa6:	0391      	lsls	r1, r2, #14
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4a46      	ldr	r2, [pc, #280]	@ (80050c4 <UART_CheckIdleState+0x148>)
 8004fac:	9200      	str	r2, [sp, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f000 f88c 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004fb4:	1e03      	subs	r3, r0, #0
 8004fb6:	d021      	beq.n	8004ffc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	f383 8810 	msr	PRIMASK, r3
}
 8004fcc:	46c0      	nop			@ (mov r8, r8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2180      	movs	r1, #128	@ 0x80
 8004fda:	438a      	bics	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe4:	f383 8810 	msr	PRIMASK, r3
}
 8004fe8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2278      	movs	r2, #120	@ 0x78
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e05f      	b.n	80050bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2204      	movs	r2, #4
 8005004:	4013      	ands	r3, r2
 8005006:	2b04      	cmp	r3, #4
 8005008:	d146      	bne.n	8005098 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500c:	2280      	movs	r2, #128	@ 0x80
 800500e:	03d1      	lsls	r1, r2, #15
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4a2c      	ldr	r2, [pc, #176]	@ (80050c4 <UART_CheckIdleState+0x148>)
 8005014:	9200      	str	r2, [sp, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	f000 f858 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d03b      	beq.n	8005098 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	60fb      	str	r3, [r7, #12]
  return(result);
 8005026:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
 800502a:	2301      	movs	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			@ (mov r8, r8)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4921      	ldr	r1, [pc, #132]	@ (80050c8 <UART_CheckIdleState+0x14c>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005052:	f3ef 8310 	mrs	r3, PRIMASK
 8005056:	61bb      	str	r3, [r7, #24]
  return(result);
 8005058:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	633b      	str	r3, [r7, #48]	@ 0x30
 800505c:	2301      	movs	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2101      	movs	r1, #1
 8005074:	438a      	bics	r2, r1
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	f383 8810 	msr	PRIMASK, r3
}
 8005082:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	2120      	movs	r1, #32
 800508a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2278      	movs	r2, #120	@ 0x78
 8005090:	2100      	movs	r1, #0
 8005092:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e011      	b.n	80050bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2280      	movs	r2, #128	@ 0x80
 80050a2:	2120      	movs	r1, #32
 80050a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2278      	movs	r2, #120	@ 0x78
 80050b6:	2100      	movs	r1, #0
 80050b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b010      	add	sp, #64	@ 0x40
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	01ffffff 	.word	0x01ffffff
 80050c8:	fffffedf 	.word	0xfffffedf

080050cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	e051      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	3301      	adds	r3, #1
 80050e2:	d04e      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fc feaa 	bl	8001e3c <HAL_GetTick>
 80050e8:	0002      	movs	r2, r0
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e051      	b.n	80051a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2204      	movs	r2, #4
 8005106:	4013      	ands	r3, r2
 8005108:	d03b      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb6>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b80      	cmp	r3, #128	@ 0x80
 800510e:	d038      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b40      	cmp	r3, #64	@ 0x40
 8005114:	d035      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	2208      	movs	r2, #8
 800511e:	4013      	ands	r3, r2
 8005120:	2b08      	cmp	r3, #8
 8005122:	d111      	bne.n	8005148 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2208      	movs	r2, #8
 800512a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0018      	movs	r0, r3
 8005130:	f000 f83c 	bl	80051ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2284      	movs	r2, #132	@ 0x84
 8005138:	2108      	movs	r1, #8
 800513a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2278      	movs	r2, #120	@ 0x78
 8005140:	2100      	movs	r1, #0
 8005142:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e02c      	b.n	80051a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	401a      	ands	r2, r3
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	429a      	cmp	r2, r3
 800515a:	d112      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2280      	movs	r2, #128	@ 0x80
 8005162:	0112      	lsls	r2, r2, #4
 8005164:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	0018      	movs	r0, r3
 800516a:	f000 f81f 	bl	80051ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2284      	movs	r2, #132	@ 0x84
 8005172:	2120      	movs	r1, #32
 8005174:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2278      	movs	r2, #120	@ 0x78
 800517a:	2100      	movs	r1, #0
 800517c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	425a      	negs	r2, r3
 8005192:	4153      	adcs	r3, r2
 8005194:	b2db      	uxtb	r3, r3
 8005196:	001a      	movs	r2, r3
 8005198:	1dfb      	adds	r3, r7, #7
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d09e      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b004      	add	sp, #16
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08e      	sub	sp, #56	@ 0x38
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b4:	f3ef 8310 	mrs	r3, PRIMASK
 80051b8:	617b      	str	r3, [r7, #20]
  return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051be:	2301      	movs	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4926      	ldr	r1, [pc, #152]	@ (8005270 <UART_EndRxTransfer+0xc4>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ea:	623b      	str	r3, [r7, #32]
  return(result);
 80051ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f0:	2301      	movs	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2101      	movs	r1, #1
 8005208:	438a      	bics	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	f383 8810 	msr	PRIMASK, r3
}
 8005216:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521c:	2b01      	cmp	r3, #1
 800521e:	d118      	bne.n	8005252 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005220:	f3ef 8310 	mrs	r3, PRIMASK
 8005224:	60bb      	str	r3, [r7, #8]
  return(result);
 8005226:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522a:	2301      	movs	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2110      	movs	r1, #16
 8005242:	438a      	bics	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2280      	movs	r2, #128	@ 0x80
 8005256:	2120      	movs	r1, #32
 8005258:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b00e      	add	sp, #56	@ 0x38
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	fffffedf 	.word	0xfffffedf

08005274 <siprintf>:
 8005274:	b40e      	push	{r1, r2, r3}
 8005276:	b510      	push	{r4, lr}
 8005278:	2400      	movs	r4, #0
 800527a:	490c      	ldr	r1, [pc, #48]	@ (80052ac <siprintf+0x38>)
 800527c:	b09d      	sub	sp, #116	@ 0x74
 800527e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005280:	9002      	str	r0, [sp, #8]
 8005282:	9006      	str	r0, [sp, #24]
 8005284:	9107      	str	r1, [sp, #28]
 8005286:	9104      	str	r1, [sp, #16]
 8005288:	4809      	ldr	r0, [pc, #36]	@ (80052b0 <siprintf+0x3c>)
 800528a:	490a      	ldr	r1, [pc, #40]	@ (80052b4 <siprintf+0x40>)
 800528c:	cb04      	ldmia	r3!, {r2}
 800528e:	9105      	str	r1, [sp, #20]
 8005290:	6800      	ldr	r0, [r0, #0]
 8005292:	a902      	add	r1, sp, #8
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005298:	f000 f9d4 	bl	8005644 <_svfiprintf_r>
 800529c:	9b02      	ldr	r3, [sp, #8]
 800529e:	701c      	strb	r4, [r3, #0]
 80052a0:	b01d      	add	sp, #116	@ 0x74
 80052a2:	bc10      	pop	{r4}
 80052a4:	bc08      	pop	{r3}
 80052a6:	b003      	add	sp, #12
 80052a8:	4718      	bx	r3
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	7fffffff 	.word	0x7fffffff
 80052b0:	2000000c 	.word	0x2000000c
 80052b4:	ffff0208 	.word	0xffff0208

080052b8 <siscanf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	2381      	movs	r3, #129	@ 0x81
 80052be:	b09d      	sub	sp, #116	@ 0x74
 80052c0:	466a      	mov	r2, sp
 80052c2:	2500      	movs	r5, #0
 80052c4:	ac21      	add	r4, sp, #132	@ 0x84
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	cc40      	ldmia	r4!, {r6}
 80052ca:	8293      	strh	r3, [r2, #20]
 80052cc:	951b      	str	r5, [sp, #108]	@ 0x6c
 80052ce:	9002      	str	r0, [sp, #8]
 80052d0:	9006      	str	r0, [sp, #24]
 80052d2:	f7fa ff19 	bl	8000108 <strlen>
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <siscanf+0x4c>)
 80052d8:	466a      	mov	r2, sp
 80052da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052dc:	2301      	movs	r3, #1
 80052de:	9003      	str	r0, [sp, #12]
 80052e0:	9007      	str	r0, [sp, #28]
 80052e2:	4809      	ldr	r0, [pc, #36]	@ (8005308 <siscanf+0x50>)
 80052e4:	425b      	negs	r3, r3
 80052e6:	82d3      	strh	r3, [r2, #22]
 80052e8:	a902      	add	r1, sp, #8
 80052ea:	0023      	movs	r3, r4
 80052ec:	0032      	movs	r2, r6
 80052ee:	6800      	ldr	r0, [r0, #0]
 80052f0:	950f      	str	r5, [sp, #60]	@ 0x3c
 80052f2:	9514      	str	r5, [sp, #80]	@ 0x50
 80052f4:	9401      	str	r4, [sp, #4]
 80052f6:	f000 faff 	bl	80058f8 <__ssvfiscanf_r>
 80052fa:	b01d      	add	sp, #116	@ 0x74
 80052fc:	bc70      	pop	{r4, r5, r6}
 80052fe:	bc08      	pop	{r3}
 8005300:	b003      	add	sp, #12
 8005302:	4718      	bx	r3
 8005304:	0800530d 	.word	0x0800530d
 8005308:	2000000c 	.word	0x2000000c

0800530c <__seofread>:
 800530c:	2000      	movs	r0, #0
 800530e:	4770      	bx	lr

08005310 <memset>:
 8005310:	0003      	movs	r3, r0
 8005312:	1882      	adds	r2, r0, r2
 8005314:	4293      	cmp	r3, r2
 8005316:	d100      	bne.n	800531a <memset+0xa>
 8005318:	4770      	bx	lr
 800531a:	7019      	strb	r1, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	e7f9      	b.n	8005314 <memset+0x4>

08005320 <__errno>:
 8005320:	4b01      	ldr	r3, [pc, #4]	@ (8005328 <__errno+0x8>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	4770      	bx	lr
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	2000000c 	.word	0x2000000c

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	2600      	movs	r6, #0
 8005330:	4c0c      	ldr	r4, [pc, #48]	@ (8005364 <__libc_init_array+0x38>)
 8005332:	4d0d      	ldr	r5, [pc, #52]	@ (8005368 <__libc_init_array+0x3c>)
 8005334:	1b64      	subs	r4, r4, r5
 8005336:	10a4      	asrs	r4, r4, #2
 8005338:	42a6      	cmp	r6, r4
 800533a:	d109      	bne.n	8005350 <__libc_init_array+0x24>
 800533c:	2600      	movs	r6, #0
 800533e:	f001 f90f 	bl	8006560 <_init>
 8005342:	4c0a      	ldr	r4, [pc, #40]	@ (800536c <__libc_init_array+0x40>)
 8005344:	4d0a      	ldr	r5, [pc, #40]	@ (8005370 <__libc_init_array+0x44>)
 8005346:	1b64      	subs	r4, r4, r5
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	42a6      	cmp	r6, r4
 800534c:	d105      	bne.n	800535a <__libc_init_array+0x2e>
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	00b3      	lsls	r3, r6, #2
 8005352:	58eb      	ldr	r3, [r5, r3]
 8005354:	4798      	blx	r3
 8005356:	3601      	adds	r6, #1
 8005358:	e7ee      	b.n	8005338 <__libc_init_array+0xc>
 800535a:	00b3      	lsls	r3, r6, #2
 800535c:	58eb      	ldr	r3, [r5, r3]
 800535e:	4798      	blx	r3
 8005360:	3601      	adds	r6, #1
 8005362:	e7f2      	b.n	800534a <__libc_init_array+0x1e>
 8005364:	08006784 	.word	0x08006784
 8005368:	08006784 	.word	0x08006784
 800536c:	08006788 	.word	0x08006788
 8005370:	08006784 	.word	0x08006784

08005374 <__retarget_lock_acquire_recursive>:
 8005374:	4770      	bx	lr

08005376 <__retarget_lock_release_recursive>:
 8005376:	4770      	bx	lr

08005378 <memcpy>:
 8005378:	2300      	movs	r3, #0
 800537a:	b510      	push	{r4, lr}
 800537c:	429a      	cmp	r2, r3
 800537e:	d100      	bne.n	8005382 <memcpy+0xa>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	5ccc      	ldrb	r4, [r1, r3]
 8005384:	54c4      	strb	r4, [r0, r3]
 8005386:	3301      	adds	r3, #1
 8005388:	e7f8      	b.n	800537c <memcpy+0x4>
	...

0800538c <_free_r>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	0005      	movs	r5, r0
 8005390:	1e0c      	subs	r4, r1, #0
 8005392:	d010      	beq.n	80053b6 <_free_r+0x2a>
 8005394:	3c04      	subs	r4, #4
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	da00      	bge.n	800539e <_free_r+0x12>
 800539c:	18e4      	adds	r4, r4, r3
 800539e:	0028      	movs	r0, r5
 80053a0:	f000 f8e0 	bl	8005564 <__malloc_lock>
 80053a4:	4a1d      	ldr	r2, [pc, #116]	@ (800541c <_free_r+0x90>)
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <_free_r+0x2c>
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	6014      	str	r4, [r2, #0]
 80053b0:	0028      	movs	r0, r5
 80053b2:	f000 f8df 	bl	8005574 <__malloc_unlock>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d908      	bls.n	80053ce <_free_r+0x42>
 80053bc:	6820      	ldr	r0, [r4, #0]
 80053be:	1821      	adds	r1, r4, r0
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d1f3      	bne.n	80053ac <_free_r+0x20>
 80053c4:	6819      	ldr	r1, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	1809      	adds	r1, r1, r0
 80053ca:	6021      	str	r1, [r4, #0]
 80053cc:	e7ee      	b.n	80053ac <_free_r+0x20>
 80053ce:	001a      	movs	r2, r3
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <_free_r+0x4e>
 80053d6:	42a3      	cmp	r3, r4
 80053d8:	d9f9      	bls.n	80053ce <_free_r+0x42>
 80053da:	6811      	ldr	r1, [r2, #0]
 80053dc:	1850      	adds	r0, r2, r1
 80053de:	42a0      	cmp	r0, r4
 80053e0:	d10b      	bne.n	80053fa <_free_r+0x6e>
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	1809      	adds	r1, r1, r0
 80053e6:	1850      	adds	r0, r2, r1
 80053e8:	6011      	str	r1, [r2, #0]
 80053ea:	4283      	cmp	r3, r0
 80053ec:	d1e0      	bne.n	80053b0 <_free_r+0x24>
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	1841      	adds	r1, r0, r1
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	6053      	str	r3, [r2, #4]
 80053f8:	e7da      	b.n	80053b0 <_free_r+0x24>
 80053fa:	42a0      	cmp	r0, r4
 80053fc:	d902      	bls.n	8005404 <_free_r+0x78>
 80053fe:	230c      	movs	r3, #12
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	e7d5      	b.n	80053b0 <_free_r+0x24>
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	1821      	adds	r1, r4, r0
 8005408:	428b      	cmp	r3, r1
 800540a:	d103      	bne.n	8005414 <_free_r+0x88>
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	1809      	adds	r1, r1, r0
 8005412:	6021      	str	r1, [r4, #0]
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6054      	str	r4, [r2, #4]
 8005418:	e7ca      	b.n	80053b0 <_free_r+0x24>
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	200004a4 	.word	0x200004a4

08005420 <sbrk_aligned>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4e0f      	ldr	r6, [pc, #60]	@ (8005460 <sbrk_aligned+0x40>)
 8005424:	000d      	movs	r5, r1
 8005426:	6831      	ldr	r1, [r6, #0]
 8005428:	0004      	movs	r4, r0
 800542a:	2900      	cmp	r1, #0
 800542c:	d102      	bne.n	8005434 <sbrk_aligned+0x14>
 800542e:	f000 ff2d 	bl	800628c <_sbrk_r>
 8005432:	6030      	str	r0, [r6, #0]
 8005434:	0029      	movs	r1, r5
 8005436:	0020      	movs	r0, r4
 8005438:	f000 ff28 	bl	800628c <_sbrk_r>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d103      	bne.n	8005448 <sbrk_aligned+0x28>
 8005440:	2501      	movs	r5, #1
 8005442:	426d      	negs	r5, r5
 8005444:	0028      	movs	r0, r5
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	2303      	movs	r3, #3
 800544a:	1cc5      	adds	r5, r0, #3
 800544c:	439d      	bics	r5, r3
 800544e:	42a8      	cmp	r0, r5
 8005450:	d0f8      	beq.n	8005444 <sbrk_aligned+0x24>
 8005452:	1a29      	subs	r1, r5, r0
 8005454:	0020      	movs	r0, r4
 8005456:	f000 ff19 	bl	800628c <_sbrk_r>
 800545a:	3001      	adds	r0, #1
 800545c:	d1f2      	bne.n	8005444 <sbrk_aligned+0x24>
 800545e:	e7ef      	b.n	8005440 <sbrk_aligned+0x20>
 8005460:	200004a0 	.word	0x200004a0

08005464 <_malloc_r>:
 8005464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005466:	2203      	movs	r2, #3
 8005468:	1ccb      	adds	r3, r1, #3
 800546a:	4393      	bics	r3, r2
 800546c:	3308      	adds	r3, #8
 800546e:	0005      	movs	r5, r0
 8005470:	001f      	movs	r7, r3
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d234      	bcs.n	80054e0 <_malloc_r+0x7c>
 8005476:	270c      	movs	r7, #12
 8005478:	42b9      	cmp	r1, r7
 800547a:	d833      	bhi.n	80054e4 <_malloc_r+0x80>
 800547c:	0028      	movs	r0, r5
 800547e:	f000 f871 	bl	8005564 <__malloc_lock>
 8005482:	4e37      	ldr	r6, [pc, #220]	@ (8005560 <_malloc_r+0xfc>)
 8005484:	6833      	ldr	r3, [r6, #0]
 8005486:	001c      	movs	r4, r3
 8005488:	2c00      	cmp	r4, #0
 800548a:	d12f      	bne.n	80054ec <_malloc_r+0x88>
 800548c:	0039      	movs	r1, r7
 800548e:	0028      	movs	r0, r5
 8005490:	f7ff ffc6 	bl	8005420 <sbrk_aligned>
 8005494:	0004      	movs	r4, r0
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	d15f      	bne.n	800555a <_malloc_r+0xf6>
 800549a:	6834      	ldr	r4, [r6, #0]
 800549c:	9400      	str	r4, [sp, #0]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d14a      	bne.n	800553a <_malloc_r+0xd6>
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	d052      	beq.n	800554e <_malloc_r+0xea>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	0028      	movs	r0, r5
 80054ac:	18e3      	adds	r3, r4, r3
 80054ae:	9900      	ldr	r1, [sp, #0]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	f000 feeb 	bl	800628c <_sbrk_r>
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	4283      	cmp	r3, r0
 80054ba:	d148      	bne.n	800554e <_malloc_r+0xea>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	0028      	movs	r0, r5
 80054c0:	1aff      	subs	r7, r7, r3
 80054c2:	0039      	movs	r1, r7
 80054c4:	f7ff ffac 	bl	8005420 <sbrk_aligned>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d040      	beq.n	800554e <_malloc_r+0xea>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	19db      	adds	r3, r3, r7
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	6833      	ldr	r3, [r6, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	d133      	bne.n	8005542 <_malloc_r+0xde>
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	e019      	b.n	8005514 <_malloc_r+0xb0>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dac9      	bge.n	8005478 <_malloc_r+0x14>
 80054e4:	230c      	movs	r3, #12
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	2000      	movs	r0, #0
 80054ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054ec:	6821      	ldr	r1, [r4, #0]
 80054ee:	1bc9      	subs	r1, r1, r7
 80054f0:	d420      	bmi.n	8005534 <_malloc_r+0xd0>
 80054f2:	290b      	cmp	r1, #11
 80054f4:	d90a      	bls.n	800550c <_malloc_r+0xa8>
 80054f6:	19e2      	adds	r2, r4, r7
 80054f8:	6027      	str	r7, [r4, #0]
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	d104      	bne.n	8005508 <_malloc_r+0xa4>
 80054fe:	6032      	str	r2, [r6, #0]
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	6011      	str	r1, [r2, #0]
 8005504:	6053      	str	r3, [r2, #4]
 8005506:	e005      	b.n	8005514 <_malloc_r+0xb0>
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	e7f9      	b.n	8005500 <_malloc_r+0x9c>
 800550c:	6862      	ldr	r2, [r4, #4]
 800550e:	42a3      	cmp	r3, r4
 8005510:	d10e      	bne.n	8005530 <_malloc_r+0xcc>
 8005512:	6032      	str	r2, [r6, #0]
 8005514:	0028      	movs	r0, r5
 8005516:	f000 f82d 	bl	8005574 <__malloc_unlock>
 800551a:	0020      	movs	r0, r4
 800551c:	2207      	movs	r2, #7
 800551e:	300b      	adds	r0, #11
 8005520:	1d23      	adds	r3, r4, #4
 8005522:	4390      	bics	r0, r2
 8005524:	1ac2      	subs	r2, r0, r3
 8005526:	4298      	cmp	r0, r3
 8005528:	d0df      	beq.n	80054ea <_malloc_r+0x86>
 800552a:	1a1b      	subs	r3, r3, r0
 800552c:	50a3      	str	r3, [r4, r2]
 800552e:	e7dc      	b.n	80054ea <_malloc_r+0x86>
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	e7ef      	b.n	8005514 <_malloc_r+0xb0>
 8005534:	0023      	movs	r3, r4
 8005536:	6864      	ldr	r4, [r4, #4]
 8005538:	e7a6      	b.n	8005488 <_malloc_r+0x24>
 800553a:	9c00      	ldr	r4, [sp, #0]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	e7ad      	b.n	800549e <_malloc_r+0x3a>
 8005542:	001a      	movs	r2, r3
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	42a3      	cmp	r3, r4
 8005548:	d1fb      	bne.n	8005542 <_malloc_r+0xde>
 800554a:	2300      	movs	r3, #0
 800554c:	e7da      	b.n	8005504 <_malloc_r+0xa0>
 800554e:	230c      	movs	r3, #12
 8005550:	0028      	movs	r0, r5
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	f000 f80e 	bl	8005574 <__malloc_unlock>
 8005558:	e7c6      	b.n	80054e8 <_malloc_r+0x84>
 800555a:	6007      	str	r7, [r0, #0]
 800555c:	e7da      	b.n	8005514 <_malloc_r+0xb0>
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	200004a4 	.word	0x200004a4

08005564 <__malloc_lock>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4802      	ldr	r0, [pc, #8]	@ (8005570 <__malloc_lock+0xc>)
 8005568:	f7ff ff04 	bl	8005374 <__retarget_lock_acquire_recursive>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	2000049c 	.word	0x2000049c

08005574 <__malloc_unlock>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4802      	ldr	r0, [pc, #8]	@ (8005580 <__malloc_unlock+0xc>)
 8005578:	f7ff fefd 	bl	8005376 <__retarget_lock_release_recursive>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	2000049c 	.word	0x2000049c

08005584 <__ssputs_r>:
 8005584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005586:	688e      	ldr	r6, [r1, #8]
 8005588:	b085      	sub	sp, #20
 800558a:	001f      	movs	r7, r3
 800558c:	000c      	movs	r4, r1
 800558e:	680b      	ldr	r3, [r1, #0]
 8005590:	9002      	str	r0, [sp, #8]
 8005592:	9203      	str	r2, [sp, #12]
 8005594:	42be      	cmp	r6, r7
 8005596:	d830      	bhi.n	80055fa <__ssputs_r+0x76>
 8005598:	210c      	movs	r1, #12
 800559a:	5e62      	ldrsh	r2, [r4, r1]
 800559c:	2190      	movs	r1, #144	@ 0x90
 800559e:	00c9      	lsls	r1, r1, #3
 80055a0:	420a      	tst	r2, r1
 80055a2:	d028      	beq.n	80055f6 <__ssputs_r+0x72>
 80055a4:	2003      	movs	r0, #3
 80055a6:	6921      	ldr	r1, [r4, #16]
 80055a8:	1a5b      	subs	r3, r3, r1
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6963      	ldr	r3, [r4, #20]
 80055ae:	4343      	muls	r3, r0
 80055b0:	9801      	ldr	r0, [sp, #4]
 80055b2:	0fdd      	lsrs	r5, r3, #31
 80055b4:	18ed      	adds	r5, r5, r3
 80055b6:	1c7b      	adds	r3, r7, #1
 80055b8:	181b      	adds	r3, r3, r0
 80055ba:	106d      	asrs	r5, r5, #1
 80055bc:	42ab      	cmp	r3, r5
 80055be:	d900      	bls.n	80055c2 <__ssputs_r+0x3e>
 80055c0:	001d      	movs	r5, r3
 80055c2:	0552      	lsls	r2, r2, #21
 80055c4:	d528      	bpl.n	8005618 <__ssputs_r+0x94>
 80055c6:	0029      	movs	r1, r5
 80055c8:	9802      	ldr	r0, [sp, #8]
 80055ca:	f7ff ff4b 	bl	8005464 <_malloc_r>
 80055ce:	1e06      	subs	r6, r0, #0
 80055d0:	d02c      	beq.n	800562c <__ssputs_r+0xa8>
 80055d2:	9a01      	ldr	r2, [sp, #4]
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	f7ff fecf 	bl	8005378 <memcpy>
 80055da:	89a2      	ldrh	r2, [r4, #12]
 80055dc:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <__ssputs_r+0xbc>)
 80055de:	401a      	ands	r2, r3
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	4313      	orrs	r3, r2
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	6126      	str	r6, [r4, #16]
 80055ea:	18f6      	adds	r6, r6, r3
 80055ec:	6026      	str	r6, [r4, #0]
 80055ee:	003e      	movs	r6, r7
 80055f0:	6165      	str	r5, [r4, #20]
 80055f2:	1aed      	subs	r5, r5, r3
 80055f4:	60a5      	str	r5, [r4, #8]
 80055f6:	42be      	cmp	r6, r7
 80055f8:	d900      	bls.n	80055fc <__ssputs_r+0x78>
 80055fa:	003e      	movs	r6, r7
 80055fc:	0032      	movs	r2, r6
 80055fe:	9903      	ldr	r1, [sp, #12]
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	f000 fe31 	bl	8006268 <memmove>
 8005606:	2000      	movs	r0, #0
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	1b9b      	subs	r3, r3, r6
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	199b      	adds	r3, r3, r6
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	b005      	add	sp, #20
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	002a      	movs	r2, r5
 800561a:	9802      	ldr	r0, [sp, #8]
 800561c:	f000 fe53 	bl	80062c6 <_realloc_r>
 8005620:	1e06      	subs	r6, r0, #0
 8005622:	d1e0      	bne.n	80055e6 <__ssputs_r+0x62>
 8005624:	6921      	ldr	r1, [r4, #16]
 8005626:	9802      	ldr	r0, [sp, #8]
 8005628:	f7ff feb0 	bl	800538c <_free_r>
 800562c:	230c      	movs	r3, #12
 800562e:	2001      	movs	r0, #1
 8005630:	9a02      	ldr	r2, [sp, #8]
 8005632:	4240      	negs	r0, r0
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	89a2      	ldrh	r2, [r4, #12]
 8005638:	3334      	adds	r3, #52	@ 0x34
 800563a:	4313      	orrs	r3, r2
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	e7e9      	b.n	8005614 <__ssputs_r+0x90>
 8005640:	fffffb7f 	.word	0xfffffb7f

08005644 <_svfiprintf_r>:
 8005644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005646:	b0a1      	sub	sp, #132	@ 0x84
 8005648:	9003      	str	r0, [sp, #12]
 800564a:	001d      	movs	r5, r3
 800564c:	898b      	ldrh	r3, [r1, #12]
 800564e:	000f      	movs	r7, r1
 8005650:	0016      	movs	r6, r2
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	d511      	bpl.n	800567a <_svfiprintf_r+0x36>
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10e      	bne.n	800567a <_svfiprintf_r+0x36>
 800565c:	2140      	movs	r1, #64	@ 0x40
 800565e:	f7ff ff01 	bl	8005464 <_malloc_r>
 8005662:	6038      	str	r0, [r7, #0]
 8005664:	6138      	str	r0, [r7, #16]
 8005666:	2800      	cmp	r0, #0
 8005668:	d105      	bne.n	8005676 <_svfiprintf_r+0x32>
 800566a:	230c      	movs	r3, #12
 800566c:	9a03      	ldr	r2, [sp, #12]
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	2001      	movs	r0, #1
 8005672:	4240      	negs	r0, r0
 8005674:	e0cf      	b.n	8005816 <_svfiprintf_r+0x1d2>
 8005676:	2340      	movs	r3, #64	@ 0x40
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	2300      	movs	r3, #0
 800567c:	ac08      	add	r4, sp, #32
 800567e:	6163      	str	r3, [r4, #20]
 8005680:	3320      	adds	r3, #32
 8005682:	7663      	strb	r3, [r4, #25]
 8005684:	3310      	adds	r3, #16
 8005686:	76a3      	strb	r3, [r4, #26]
 8005688:	9507      	str	r5, [sp, #28]
 800568a:	0035      	movs	r5, r6
 800568c:	782b      	ldrb	r3, [r5, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <_svfiprintf_r+0x52>
 8005692:	2b25      	cmp	r3, #37	@ 0x25
 8005694:	d148      	bne.n	8005728 <_svfiprintf_r+0xe4>
 8005696:	1bab      	subs	r3, r5, r6
 8005698:	9305      	str	r3, [sp, #20]
 800569a:	42b5      	cmp	r5, r6
 800569c:	d00b      	beq.n	80056b6 <_svfiprintf_r+0x72>
 800569e:	0032      	movs	r2, r6
 80056a0:	0039      	movs	r1, r7
 80056a2:	9803      	ldr	r0, [sp, #12]
 80056a4:	f7ff ff6e 	bl	8005584 <__ssputs_r>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d100      	bne.n	80056ae <_svfiprintf_r+0x6a>
 80056ac:	e0ae      	b.n	800580c <_svfiprintf_r+0x1c8>
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	9a05      	ldr	r2, [sp, #20]
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	6163      	str	r3, [r4, #20]
 80056b6:	782b      	ldrb	r3, [r5, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d100      	bne.n	80056be <_svfiprintf_r+0x7a>
 80056bc:	e0a6      	b.n	800580c <_svfiprintf_r+0x1c8>
 80056be:	2201      	movs	r2, #1
 80056c0:	2300      	movs	r3, #0
 80056c2:	4252      	negs	r2, r2
 80056c4:	6062      	str	r2, [r4, #4]
 80056c6:	a904      	add	r1, sp, #16
 80056c8:	3254      	adds	r2, #84	@ 0x54
 80056ca:	1852      	adds	r2, r2, r1
 80056cc:	1c6e      	adds	r6, r5, #1
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	60e3      	str	r3, [r4, #12]
 80056d2:	60a3      	str	r3, [r4, #8]
 80056d4:	7013      	strb	r3, [r2, #0]
 80056d6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80056d8:	4b54      	ldr	r3, [pc, #336]	@ (800582c <_svfiprintf_r+0x1e8>)
 80056da:	2205      	movs	r2, #5
 80056dc:	0018      	movs	r0, r3
 80056de:	7831      	ldrb	r1, [r6, #0]
 80056e0:	9305      	str	r3, [sp, #20]
 80056e2:	f000 fde5 	bl	80062b0 <memchr>
 80056e6:	1c75      	adds	r5, r6, #1
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d11f      	bne.n	800572c <_svfiprintf_r+0xe8>
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	06d3      	lsls	r3, r2, #27
 80056f0:	d504      	bpl.n	80056fc <_svfiprintf_r+0xb8>
 80056f2:	2353      	movs	r3, #83	@ 0x53
 80056f4:	a904      	add	r1, sp, #16
 80056f6:	185b      	adds	r3, r3, r1
 80056f8:	2120      	movs	r1, #32
 80056fa:	7019      	strb	r1, [r3, #0]
 80056fc:	0713      	lsls	r3, r2, #28
 80056fe:	d504      	bpl.n	800570a <_svfiprintf_r+0xc6>
 8005700:	2353      	movs	r3, #83	@ 0x53
 8005702:	a904      	add	r1, sp, #16
 8005704:	185b      	adds	r3, r3, r1
 8005706:	212b      	movs	r1, #43	@ 0x2b
 8005708:	7019      	strb	r1, [r3, #0]
 800570a:	7833      	ldrb	r3, [r6, #0]
 800570c:	2b2a      	cmp	r3, #42	@ 0x2a
 800570e:	d016      	beq.n	800573e <_svfiprintf_r+0xfa>
 8005710:	0035      	movs	r5, r6
 8005712:	2100      	movs	r1, #0
 8005714:	200a      	movs	r0, #10
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	782a      	ldrb	r2, [r5, #0]
 800571a:	1c6e      	adds	r6, r5, #1
 800571c:	3a30      	subs	r2, #48	@ 0x30
 800571e:	2a09      	cmp	r2, #9
 8005720:	d950      	bls.n	80057c4 <_svfiprintf_r+0x180>
 8005722:	2900      	cmp	r1, #0
 8005724:	d111      	bne.n	800574a <_svfiprintf_r+0x106>
 8005726:	e017      	b.n	8005758 <_svfiprintf_r+0x114>
 8005728:	3501      	adds	r5, #1
 800572a:	e7af      	b.n	800568c <_svfiprintf_r+0x48>
 800572c:	9b05      	ldr	r3, [sp, #20]
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	1ac0      	subs	r0, r0, r3
 8005732:	2301      	movs	r3, #1
 8005734:	4083      	lsls	r3, r0
 8005736:	4313      	orrs	r3, r2
 8005738:	002e      	movs	r6, r5
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	e7cc      	b.n	80056d8 <_svfiprintf_r+0x94>
 800573e:	9b07      	ldr	r3, [sp, #28]
 8005740:	1d19      	adds	r1, r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	9107      	str	r1, [sp, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	db01      	blt.n	800574e <_svfiprintf_r+0x10a>
 800574a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800574c:	e004      	b.n	8005758 <_svfiprintf_r+0x114>
 800574e:	425b      	negs	r3, r3
 8005750:	60e3      	str	r3, [r4, #12]
 8005752:	2302      	movs	r3, #2
 8005754:	4313      	orrs	r3, r2
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	782b      	ldrb	r3, [r5, #0]
 800575a:	2b2e      	cmp	r3, #46	@ 0x2e
 800575c:	d10c      	bne.n	8005778 <_svfiprintf_r+0x134>
 800575e:	786b      	ldrb	r3, [r5, #1]
 8005760:	2b2a      	cmp	r3, #42	@ 0x2a
 8005762:	d134      	bne.n	80057ce <_svfiprintf_r+0x18a>
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	3502      	adds	r5, #2
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	da01      	bge.n	8005776 <_svfiprintf_r+0x132>
 8005772:	2301      	movs	r3, #1
 8005774:	425b      	negs	r3, r3
 8005776:	9309      	str	r3, [sp, #36]	@ 0x24
 8005778:	4e2d      	ldr	r6, [pc, #180]	@ (8005830 <_svfiprintf_r+0x1ec>)
 800577a:	2203      	movs	r2, #3
 800577c:	0030      	movs	r0, r6
 800577e:	7829      	ldrb	r1, [r5, #0]
 8005780:	f000 fd96 	bl	80062b0 <memchr>
 8005784:	2800      	cmp	r0, #0
 8005786:	d006      	beq.n	8005796 <_svfiprintf_r+0x152>
 8005788:	2340      	movs	r3, #64	@ 0x40
 800578a:	1b80      	subs	r0, r0, r6
 800578c:	4083      	lsls	r3, r0
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	3501      	adds	r5, #1
 8005792:	4313      	orrs	r3, r2
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	7829      	ldrb	r1, [r5, #0]
 8005798:	2206      	movs	r2, #6
 800579a:	4826      	ldr	r0, [pc, #152]	@ (8005834 <_svfiprintf_r+0x1f0>)
 800579c:	1c6e      	adds	r6, r5, #1
 800579e:	7621      	strb	r1, [r4, #24]
 80057a0:	f000 fd86 	bl	80062b0 <memchr>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d038      	beq.n	800581a <_svfiprintf_r+0x1d6>
 80057a8:	4b23      	ldr	r3, [pc, #140]	@ (8005838 <_svfiprintf_r+0x1f4>)
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d122      	bne.n	80057f4 <_svfiprintf_r+0x1b0>
 80057ae:	2207      	movs	r2, #7
 80057b0:	9b07      	ldr	r3, [sp, #28]
 80057b2:	3307      	adds	r3, #7
 80057b4:	4393      	bics	r3, r2
 80057b6:	3308      	adds	r3, #8
 80057b8:	9307      	str	r3, [sp, #28]
 80057ba:	6963      	ldr	r3, [r4, #20]
 80057bc:	9a04      	ldr	r2, [sp, #16]
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	6163      	str	r3, [r4, #20]
 80057c2:	e762      	b.n	800568a <_svfiprintf_r+0x46>
 80057c4:	4343      	muls	r3, r0
 80057c6:	0035      	movs	r5, r6
 80057c8:	2101      	movs	r1, #1
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	e7a4      	b.n	8005718 <_svfiprintf_r+0xd4>
 80057ce:	2300      	movs	r3, #0
 80057d0:	200a      	movs	r0, #10
 80057d2:	0019      	movs	r1, r3
 80057d4:	3501      	adds	r5, #1
 80057d6:	6063      	str	r3, [r4, #4]
 80057d8:	782a      	ldrb	r2, [r5, #0]
 80057da:	1c6e      	adds	r6, r5, #1
 80057dc:	3a30      	subs	r2, #48	@ 0x30
 80057de:	2a09      	cmp	r2, #9
 80057e0:	d903      	bls.n	80057ea <_svfiprintf_r+0x1a6>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0c8      	beq.n	8005778 <_svfiprintf_r+0x134>
 80057e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80057e8:	e7c6      	b.n	8005778 <_svfiprintf_r+0x134>
 80057ea:	4341      	muls	r1, r0
 80057ec:	0035      	movs	r5, r6
 80057ee:	2301      	movs	r3, #1
 80057f0:	1889      	adds	r1, r1, r2
 80057f2:	e7f1      	b.n	80057d8 <_svfiprintf_r+0x194>
 80057f4:	aa07      	add	r2, sp, #28
 80057f6:	9200      	str	r2, [sp, #0]
 80057f8:	0021      	movs	r1, r4
 80057fa:	003a      	movs	r2, r7
 80057fc:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <_svfiprintf_r+0x1f8>)
 80057fe:	9803      	ldr	r0, [sp, #12]
 8005800:	e000      	b.n	8005804 <_svfiprintf_r+0x1c0>
 8005802:	bf00      	nop
 8005804:	9004      	str	r0, [sp, #16]
 8005806:	9b04      	ldr	r3, [sp, #16]
 8005808:	3301      	adds	r3, #1
 800580a:	d1d6      	bne.n	80057ba <_svfiprintf_r+0x176>
 800580c:	89bb      	ldrh	r3, [r7, #12]
 800580e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005810:	065b      	lsls	r3, r3, #25
 8005812:	d500      	bpl.n	8005816 <_svfiprintf_r+0x1d2>
 8005814:	e72c      	b.n	8005670 <_svfiprintf_r+0x2c>
 8005816:	b021      	add	sp, #132	@ 0x84
 8005818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581a:	aa07      	add	r2, sp, #28
 800581c:	9200      	str	r2, [sp, #0]
 800581e:	0021      	movs	r1, r4
 8005820:	003a      	movs	r2, r7
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <_svfiprintf_r+0x1f8>)
 8005824:	9803      	ldr	r0, [sp, #12]
 8005826:	f000 fa3b 	bl	8005ca0 <_printf_i>
 800582a:	e7eb      	b.n	8005804 <_svfiprintf_r+0x1c0>
 800582c:	08006634 	.word	0x08006634
 8005830:	0800663a 	.word	0x0800663a
 8005834:	0800663e 	.word	0x0800663e
 8005838:	00000000 	.word	0x00000000
 800583c:	08005585 	.word	0x08005585

08005840 <_sungetc_r>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	0014      	movs	r4, r2
 8005844:	1c4b      	adds	r3, r1, #1
 8005846:	d103      	bne.n	8005850 <_sungetc_r+0x10>
 8005848:	2501      	movs	r5, #1
 800584a:	426d      	negs	r5, r5
 800584c:	0028      	movs	r0, r5
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	8993      	ldrh	r3, [r2, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	4393      	bics	r3, r2
 8005856:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	b2ce      	uxtb	r6, r1
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	b2cd      	uxtb	r5, r1
 8005860:	2a00      	cmp	r2, #0
 8005862:	d010      	beq.n	8005886 <_sungetc_r+0x46>
 8005864:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005866:	429a      	cmp	r2, r3
 8005868:	dd07      	ble.n	800587a <_sungetc_r+0x3a>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	701e      	strb	r6, [r3, #0]
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	3301      	adds	r3, #1
 8005876:	6063      	str	r3, [r4, #4]
 8005878:	e7e8      	b.n	800584c <_sungetc_r+0xc>
 800587a:	0021      	movs	r1, r4
 800587c:	f000 fcb6 	bl	80061ec <__submore>
 8005880:	2800      	cmp	r0, #0
 8005882:	d0f2      	beq.n	800586a <_sungetc_r+0x2a>
 8005884:	e7e0      	b.n	8005848 <_sungetc_r+0x8>
 8005886:	6921      	ldr	r1, [r4, #16]
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	2900      	cmp	r1, #0
 800588c:	d007      	beq.n	800589e <_sungetc_r+0x5e>
 800588e:	4291      	cmp	r1, r2
 8005890:	d205      	bcs.n	800589e <_sungetc_r+0x5e>
 8005892:	1e51      	subs	r1, r2, #1
 8005894:	7808      	ldrb	r0, [r1, #0]
 8005896:	42a8      	cmp	r0, r5
 8005898:	d101      	bne.n	800589e <_sungetc_r+0x5e>
 800589a:	6021      	str	r1, [r4, #0]
 800589c:	e7ea      	b.n	8005874 <_sungetc_r+0x34>
 800589e:	6423      	str	r3, [r4, #64]	@ 0x40
 80058a0:	0023      	movs	r3, r4
 80058a2:	3344      	adds	r3, #68	@ 0x44
 80058a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80058a6:	2303      	movs	r3, #3
 80058a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80058aa:	0023      	movs	r3, r4
 80058ac:	3346      	adds	r3, #70	@ 0x46
 80058ae:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80058b0:	701e      	strb	r6, [r3, #0]
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	2301      	movs	r3, #1
 80058b6:	e7de      	b.n	8005876 <_sungetc_r+0x36>

080058b8 <__ssrefill_r>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	000c      	movs	r4, r1
 80058bc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80058be:	2900      	cmp	r1, #0
 80058c0:	d00e      	beq.n	80058e0 <__ssrefill_r+0x28>
 80058c2:	0023      	movs	r3, r4
 80058c4:	3344      	adds	r3, #68	@ 0x44
 80058c6:	4299      	cmp	r1, r3
 80058c8:	d001      	beq.n	80058ce <__ssrefill_r+0x16>
 80058ca:	f7ff fd5f 	bl	800538c <_free_r>
 80058ce:	2000      	movs	r0, #0
 80058d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	4283      	cmp	r3, r0
 80058d8:	d002      	beq.n	80058e0 <__ssrefill_r+0x28>
 80058da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd10      	pop	{r4, pc}
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	2001      	movs	r0, #1
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	89a2      	ldrh	r2, [r4, #12]
 80058ea:	6063      	str	r3, [r4, #4]
 80058ec:	3320      	adds	r3, #32
 80058ee:	4313      	orrs	r3, r2
 80058f0:	81a3      	strh	r3, [r4, #12]
 80058f2:	4240      	negs	r0, r0
 80058f4:	e7f3      	b.n	80058de <__ssrefill_r+0x26>
	...

080058f8 <__ssvfiscanf_r>:
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	4cab      	ldr	r4, [pc, #684]	@ (8005ba8 <__ssvfiscanf_r+0x2b0>)
 80058fc:	44a5      	add	sp, r4
 80058fe:	000c      	movs	r4, r1
 8005900:	2100      	movs	r1, #0
 8005902:	9000      	str	r0, [sp, #0]
 8005904:	20be      	movs	r0, #190	@ 0xbe
 8005906:	9146      	str	r1, [sp, #280]	@ 0x118
 8005908:	9147      	str	r1, [sp, #284]	@ 0x11c
 800590a:	a903      	add	r1, sp, #12
 800590c:	9148      	str	r1, [sp, #288]	@ 0x120
 800590e:	49a7      	ldr	r1, [pc, #668]	@ (8005bac <__ssvfiscanf_r+0x2b4>)
 8005910:	0040      	lsls	r0, r0, #1
 8005912:	ad43      	add	r5, sp, #268	@ 0x10c
 8005914:	5029      	str	r1, [r5, r0]
 8005916:	49a6      	ldr	r1, [pc, #664]	@ (8005bb0 <__ssvfiscanf_r+0x2b8>)
 8005918:	3004      	adds	r0, #4
 800591a:	ad43      	add	r5, sp, #268	@ 0x10c
 800591c:	5029      	str	r1, [r5, r0]
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	7816      	ldrb	r6, [r2, #0]
 8005922:	2e00      	cmp	r6, #0
 8005924:	d100      	bne.n	8005928 <__ssvfiscanf_r+0x30>
 8005926:	e13c      	b.n	8005ba2 <__ssvfiscanf_r+0x2aa>
 8005928:	2308      	movs	r3, #8
 800592a:	2008      	movs	r0, #8
 800592c:	4da1      	ldr	r5, [pc, #644]	@ (8005bb4 <__ssvfiscanf_r+0x2bc>)
 800592e:	1c57      	adds	r7, r2, #1
 8005930:	5da9      	ldrb	r1, [r5, r6]
 8005932:	400b      	ands	r3, r1
 8005934:	4201      	tst	r1, r0
 8005936:	d01d      	beq.n	8005974 <__ssvfiscanf_r+0x7c>
 8005938:	0006      	movs	r6, r0
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	dd0f      	ble.n	8005960 <__ssvfiscanf_r+0x68>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	5caa      	ldrb	r2, [r5, r2]
 8005946:	4232      	tst	r2, r6
 8005948:	d101      	bne.n	800594e <__ssvfiscanf_r+0x56>
 800594a:	003a      	movs	r2, r7
 800594c:	e7e8      	b.n	8005920 <__ssvfiscanf_r+0x28>
 800594e:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005950:	3301      	adds	r3, #1
 8005952:	3201      	adds	r2, #1
 8005954:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	3a01      	subs	r2, #1
 800595c:	6062      	str	r2, [r4, #4]
 800595e:	e7ec      	b.n	800593a <__ssvfiscanf_r+0x42>
 8005960:	22c0      	movs	r2, #192	@ 0xc0
 8005962:	ab43      	add	r3, sp, #268	@ 0x10c
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	0021      	movs	r1, r4
 8005968:	589b      	ldr	r3, [r3, r2]
 800596a:	9800      	ldr	r0, [sp, #0]
 800596c:	4798      	blx	r3
 800596e:	2800      	cmp	r0, #0
 8005970:	d0e6      	beq.n	8005940 <__ssvfiscanf_r+0x48>
 8005972:	e7ea      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005974:	2e25      	cmp	r6, #37	@ 0x25
 8005976:	d162      	bne.n	8005a3e <__ssvfiscanf_r+0x146>
 8005978:	9345      	str	r3, [sp, #276]	@ 0x114
 800597a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800597c:	7853      	ldrb	r3, [r2, #1]
 800597e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005980:	d102      	bne.n	8005988 <__ssvfiscanf_r+0x90>
 8005982:	3b1a      	subs	r3, #26
 8005984:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005986:	1c97      	adds	r7, r2, #2
 8005988:	003d      	movs	r5, r7
 800598a:	220a      	movs	r2, #10
 800598c:	7829      	ldrb	r1, [r5, #0]
 800598e:	1c6f      	adds	r7, r5, #1
 8005990:	000b      	movs	r3, r1
 8005992:	3b30      	subs	r3, #48	@ 0x30
 8005994:	2b09      	cmp	r3, #9
 8005996:	d91f      	bls.n	80059d8 <__ssvfiscanf_r+0xe0>
 8005998:	4b87      	ldr	r3, [pc, #540]	@ (8005bb8 <__ssvfiscanf_r+0x2c0>)
 800599a:	2203      	movs	r2, #3
 800599c:	0018      	movs	r0, r3
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	f000 fc86 	bl	80062b0 <memchr>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d007      	beq.n	80059b8 <__ssvfiscanf_r+0xc0>
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	003d      	movs	r5, r7
 80059ac:	1ac0      	subs	r0, r0, r3
 80059ae:	2301      	movs	r3, #1
 80059b0:	4083      	lsls	r3, r0
 80059b2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80059b4:	4313      	orrs	r3, r2
 80059b6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80059b8:	782b      	ldrb	r3, [r5, #0]
 80059ba:	1c6f      	adds	r7, r5, #1
 80059bc:	2b78      	cmp	r3, #120	@ 0x78
 80059be:	d806      	bhi.n	80059ce <__ssvfiscanf_r+0xd6>
 80059c0:	2b57      	cmp	r3, #87	@ 0x57
 80059c2:	d810      	bhi.n	80059e6 <__ssvfiscanf_r+0xee>
 80059c4:	2b25      	cmp	r3, #37	@ 0x25
 80059c6:	d03a      	beq.n	8005a3e <__ssvfiscanf_r+0x146>
 80059c8:	d834      	bhi.n	8005a34 <__ssvfiscanf_r+0x13c>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d055      	beq.n	8005a7a <__ssvfiscanf_r+0x182>
 80059ce:	2303      	movs	r3, #3
 80059d0:	9349      	str	r3, [sp, #292]	@ 0x124
 80059d2:	3307      	adds	r3, #7
 80059d4:	9344      	str	r3, [sp, #272]	@ 0x110
 80059d6:	e069      	b.n	8005aac <__ssvfiscanf_r+0x1b4>
 80059d8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80059da:	003d      	movs	r5, r7
 80059dc:	4353      	muls	r3, r2
 80059de:	3b30      	subs	r3, #48	@ 0x30
 80059e0:	185b      	adds	r3, r3, r1
 80059e2:	9345      	str	r3, [sp, #276]	@ 0x114
 80059e4:	e7d2      	b.n	800598c <__ssvfiscanf_r+0x94>
 80059e6:	0018      	movs	r0, r3
 80059e8:	3858      	subs	r0, #88	@ 0x58
 80059ea:	2820      	cmp	r0, #32
 80059ec:	d8ef      	bhi.n	80059ce <__ssvfiscanf_r+0xd6>
 80059ee:	f7fa fb93 	bl	8000118 <__gnu_thumb1_case_shi>
 80059f2:	004b      	.short	0x004b
 80059f4:	ffeeffee 	.word	0xffeeffee
 80059f8:	ffee007d 	.word	0xffee007d
 80059fc:	ffeeffee 	.word	0xffeeffee
 8005a00:	ffeeffee 	.word	0xffeeffee
 8005a04:	ffeeffee 	.word	0xffeeffee
 8005a08:	007b0088 	.word	0x007b0088
 8005a0c:	00240024 	.word	0x00240024
 8005a10:	ffee0024 	.word	0xffee0024
 8005a14:	ffee0055 	.word	0xffee0055
 8005a18:	ffeeffee 	.word	0xffeeffee
 8005a1c:	0090ffee 	.word	0x0090ffee
 8005a20:	00470059 	.word	0x00470059
 8005a24:	ffeeffee 	.word	0xffeeffee
 8005a28:	ffee008e 	.word	0xffee008e
 8005a2c:	ffee007b 	.word	0xffee007b
 8005a30:	004bffee 	.word	0x004bffee
 8005a34:	3b45      	subs	r3, #69	@ 0x45
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d8c9      	bhi.n	80059ce <__ssvfiscanf_r+0xd6>
 8005a3a:	2305      	movs	r3, #5
 8005a3c:	e035      	b.n	8005aaa <__ssvfiscanf_r+0x1b2>
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dd0d      	ble.n	8005a60 <__ssvfiscanf_r+0x168>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	781a      	ldrb	r2, [r3, #0]
 8005a48:	42b2      	cmp	r2, r6
 8005a4a:	d000      	beq.n	8005a4e <__ssvfiscanf_r+0x156>
 8005a4c:	e0a9      	b.n	8005ba2 <__ssvfiscanf_r+0x2aa>
 8005a4e:	3301      	adds	r3, #1
 8005a50:	6862      	ldr	r2, [r4, #4]
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005a56:	3a01      	subs	r2, #1
 8005a58:	3301      	adds	r3, #1
 8005a5a:	6062      	str	r2, [r4, #4]
 8005a5c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005a5e:	e774      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005a60:	23c0      	movs	r3, #192	@ 0xc0
 8005a62:	aa43      	add	r2, sp, #268	@ 0x10c
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	0021      	movs	r1, r4
 8005a68:	58d3      	ldr	r3, [r2, r3]
 8005a6a:	9800      	ldr	r0, [sp, #0]
 8005a6c:	4798      	blx	r3
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0e8      	beq.n	8005a44 <__ssvfiscanf_r+0x14c>
 8005a72:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d000      	beq.n	8005a7a <__ssvfiscanf_r+0x182>
 8005a78:	e08b      	b.n	8005b92 <__ssvfiscanf_r+0x29a>
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	4240      	negs	r0, r0
 8005a7e:	e08c      	b.n	8005b9a <__ssvfiscanf_r+0x2a2>
 8005a80:	2220      	movs	r2, #32
 8005a82:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005a84:	430a      	orrs	r2, r1
 8005a86:	9243      	str	r2, [sp, #268]	@ 0x10c
 8005a88:	2280      	movs	r2, #128	@ 0x80
 8005a8a:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005a8c:	0092      	lsls	r2, r2, #2
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	9243      	str	r2, [sp, #268]	@ 0x10c
 8005a92:	2210      	movs	r2, #16
 8005a94:	9244      	str	r2, [sp, #272]	@ 0x110
 8005a96:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a98:	d902      	bls.n	8005aa0 <__ssvfiscanf_r+0x1a8>
 8005a9a:	e005      	b.n	8005aa8 <__ssvfiscanf_r+0x1b0>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9344      	str	r3, [sp, #272]	@ 0x110
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e002      	b.n	8005aaa <__ssvfiscanf_r+0x1b2>
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	9344      	str	r3, [sp, #272]	@ 0x110
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	9349      	str	r3, [sp, #292]	@ 0x124
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	dd3e      	ble.n	8005b30 <__ssvfiscanf_r+0x238>
 8005ab2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005ab4:	065b      	lsls	r3, r3, #25
 8005ab6:	d408      	bmi.n	8005aca <__ssvfiscanf_r+0x1d2>
 8005ab8:	26c0      	movs	r6, #192	@ 0xc0
 8005aba:	2508      	movs	r5, #8
 8005abc:	0076      	lsls	r6, r6, #1
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	493c      	ldr	r1, [pc, #240]	@ (8005bb4 <__ssvfiscanf_r+0x2bc>)
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	5c8a      	ldrb	r2, [r1, r2]
 8005ac6:	422a      	tst	r2, r5
 8005ac8:	d13c      	bne.n	8005b44 <__ssvfiscanf_r+0x24c>
 8005aca:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	dc4c      	bgt.n	8005b6a <__ssvfiscanf_r+0x272>
 8005ad0:	0022      	movs	r2, r4
 8005ad2:	9800      	ldr	r0, [sp, #0]
 8005ad4:	ab02      	add	r3, sp, #8
 8005ad6:	a943      	add	r1, sp, #268	@ 0x10c
 8005ad8:	f000 f9ee 	bl	8005eb8 <_scanf_chars>
 8005adc:	2801      	cmp	r0, #1
 8005ade:	d060      	beq.n	8005ba2 <__ssvfiscanf_r+0x2aa>
 8005ae0:	2802      	cmp	r0, #2
 8005ae2:	d000      	beq.n	8005ae6 <__ssvfiscanf_r+0x1ee>
 8005ae4:	e731      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005ae6:	e7c4      	b.n	8005a72 <__ssvfiscanf_r+0x17a>
 8005ae8:	220a      	movs	r2, #10
 8005aea:	e7d3      	b.n	8005a94 <__ssvfiscanf_r+0x19c>
 8005aec:	0039      	movs	r1, r7
 8005aee:	a803      	add	r0, sp, #12
 8005af0:	f000 fb42 	bl	8006178 <__sccl>
 8005af4:	2340      	movs	r3, #64	@ 0x40
 8005af6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005af8:	0007      	movs	r7, r0
 8005afa:	4313      	orrs	r3, r2
 8005afc:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005afe:	2301      	movs	r3, #1
 8005b00:	e7d3      	b.n	8005aaa <__ssvfiscanf_r+0x1b2>
 8005b02:	2340      	movs	r3, #64	@ 0x40
 8005b04:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005b06:	4313      	orrs	r3, r2
 8005b08:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e7cd      	b.n	8005aaa <__ssvfiscanf_r+0x1b2>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e7cb      	b.n	8005aaa <__ssvfiscanf_r+0x1b2>
 8005b12:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005b14:	06d3      	lsls	r3, r2, #27
 8005b16:	d500      	bpl.n	8005b1a <__ssvfiscanf_r+0x222>
 8005b18:	e717      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005b1a:	9b02      	ldr	r3, [sp, #8]
 8005b1c:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8005b1e:	1d18      	adds	r0, r3, #4
 8005b20:	9002      	str	r0, [sp, #8]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	07d5      	lsls	r5, r2, #31
 8005b26:	d501      	bpl.n	8005b2c <__ssvfiscanf_r+0x234>
 8005b28:	8019      	strh	r1, [r3, #0]
 8005b2a:	e70e      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005b2c:	6019      	str	r1, [r3, #0]
 8005b2e:	e70c      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005b30:	23c0      	movs	r3, #192	@ 0xc0
 8005b32:	aa43      	add	r2, sp, #268	@ 0x10c
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	0021      	movs	r1, r4
 8005b38:	58d3      	ldr	r3, [r2, r3]
 8005b3a:	9800      	ldr	r0, [sp, #0]
 8005b3c:	4798      	blx	r3
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d0b7      	beq.n	8005ab2 <__ssvfiscanf_r+0x1ba>
 8005b42:	e796      	b.n	8005a72 <__ssvfiscanf_r+0x17a>
 8005b44:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005b46:	3201      	adds	r2, #1
 8005b48:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	6062      	str	r2, [r4, #4]
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	dd02      	ble.n	8005b5a <__ssvfiscanf_r+0x262>
 8005b54:	3301      	adds	r3, #1
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	e7b1      	b.n	8005abe <__ssvfiscanf_r+0x1c6>
 8005b5a:	ab43      	add	r3, sp, #268	@ 0x10c
 8005b5c:	0021      	movs	r1, r4
 8005b5e:	599b      	ldr	r3, [r3, r6]
 8005b60:	9800      	ldr	r0, [sp, #0]
 8005b62:	4798      	blx	r3
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d0aa      	beq.n	8005abe <__ssvfiscanf_r+0x1c6>
 8005b68:	e783      	b.n	8005a72 <__ssvfiscanf_r+0x17a>
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	dc06      	bgt.n	8005b7c <__ssvfiscanf_r+0x284>
 8005b6e:	0022      	movs	r2, r4
 8005b70:	9800      	ldr	r0, [sp, #0]
 8005b72:	ab02      	add	r3, sp, #8
 8005b74:	a943      	add	r1, sp, #268	@ 0x10c
 8005b76:	f000 f9ff 	bl	8005f78 <_scanf_i>
 8005b7a:	e7af      	b.n	8005adc <__ssvfiscanf_r+0x1e4>
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bbc <__ssvfiscanf_r+0x2c4>)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d100      	bne.n	8005b84 <__ssvfiscanf_r+0x28c>
 8005b82:	e6e2      	b.n	800594a <__ssvfiscanf_r+0x52>
 8005b84:	0022      	movs	r2, r4
 8005b86:	9800      	ldr	r0, [sp, #0]
 8005b88:	ab02      	add	r3, sp, #8
 8005b8a:	a943      	add	r1, sp, #268	@ 0x10c
 8005b8c:	e000      	b.n	8005b90 <__ssvfiscanf_r+0x298>
 8005b8e:	bf00      	nop
 8005b90:	e7a4      	b.n	8005adc <__ssvfiscanf_r+0x1e4>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	065b      	lsls	r3, r3, #25
 8005b96:	d500      	bpl.n	8005b9a <__ssvfiscanf_r+0x2a2>
 8005b98:	e76f      	b.n	8005a7a <__ssvfiscanf_r+0x182>
 8005b9a:	23a5      	movs	r3, #165	@ 0xa5
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	449d      	add	sp, r3
 8005ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba2:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005ba4:	e7f9      	b.n	8005b9a <__ssvfiscanf_r+0x2a2>
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	fffffd6c 	.word	0xfffffd6c
 8005bac:	08005841 	.word	0x08005841
 8005bb0:	080058b9 	.word	0x080058b9
 8005bb4:	08006683 	.word	0x08006683
 8005bb8:	0800663a 	.word	0x0800663a
 8005bbc:	00000000 	.word	0x00000000

08005bc0 <_printf_common>:
 8005bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc2:	0016      	movs	r6, r2
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	688a      	ldr	r2, [r1, #8]
 8005bc8:	690b      	ldr	r3, [r1, #16]
 8005bca:	000c      	movs	r4, r1
 8005bcc:	9000      	str	r0, [sp, #0]
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	da00      	bge.n	8005bd4 <_printf_common+0x14>
 8005bd2:	0013      	movs	r3, r2
 8005bd4:	0022      	movs	r2, r4
 8005bd6:	6033      	str	r3, [r6, #0]
 8005bd8:	3243      	adds	r2, #67	@ 0x43
 8005bda:	7812      	ldrb	r2, [r2, #0]
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d001      	beq.n	8005be4 <_printf_common+0x24>
 8005be0:	3301      	adds	r3, #1
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	069b      	lsls	r3, r3, #26
 8005be8:	d502      	bpl.n	8005bf0 <_printf_common+0x30>
 8005bea:	6833      	ldr	r3, [r6, #0]
 8005bec:	3302      	adds	r3, #2
 8005bee:	6033      	str	r3, [r6, #0]
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	2306      	movs	r3, #6
 8005bf4:	0015      	movs	r5, r2
 8005bf6:	401d      	ands	r5, r3
 8005bf8:	421a      	tst	r2, r3
 8005bfa:	d027      	beq.n	8005c4c <_printf_common+0x8c>
 8005bfc:	0023      	movs	r3, r4
 8005bfe:	3343      	adds	r3, #67	@ 0x43
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	1e5a      	subs	r2, r3, #1
 8005c04:	4193      	sbcs	r3, r2
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	0692      	lsls	r2, r2, #26
 8005c0a:	d430      	bmi.n	8005c6e <_printf_common+0xae>
 8005c0c:	0022      	movs	r2, r4
 8005c0e:	9901      	ldr	r1, [sp, #4]
 8005c10:	9800      	ldr	r0, [sp, #0]
 8005c12:	9d08      	ldr	r5, [sp, #32]
 8005c14:	3243      	adds	r2, #67	@ 0x43
 8005c16:	47a8      	blx	r5
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d025      	beq.n	8005c68 <_printf_common+0xa8>
 8005c1c:	2206      	movs	r2, #6
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	2500      	movs	r5, #0
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d105      	bne.n	8005c34 <_printf_common+0x74>
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	68e5      	ldr	r5, [r4, #12]
 8005c2c:	1aed      	subs	r5, r5, r3
 8005c2e:	43eb      	mvns	r3, r5
 8005c30:	17db      	asrs	r3, r3, #31
 8005c32:	401d      	ands	r5, r3
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	6922      	ldr	r2, [r4, #16]
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	dd01      	ble.n	8005c40 <_printf_common+0x80>
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	18ed      	adds	r5, r5, r3
 8005c40:	2600      	movs	r6, #0
 8005c42:	42b5      	cmp	r5, r6
 8005c44:	d120      	bne.n	8005c88 <_printf_common+0xc8>
 8005c46:	2000      	movs	r0, #0
 8005c48:	e010      	b.n	8005c6c <_printf_common+0xac>
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	68e3      	ldr	r3, [r4, #12]
 8005c4e:	6832      	ldr	r2, [r6, #0]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	ddd2      	ble.n	8005bfc <_printf_common+0x3c>
 8005c56:	0022      	movs	r2, r4
 8005c58:	2301      	movs	r3, #1
 8005c5a:	9901      	ldr	r1, [sp, #4]
 8005c5c:	9800      	ldr	r0, [sp, #0]
 8005c5e:	9f08      	ldr	r7, [sp, #32]
 8005c60:	3219      	adds	r2, #25
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1f0      	bne.n	8005c4a <_printf_common+0x8a>
 8005c68:	2001      	movs	r0, #1
 8005c6a:	4240      	negs	r0, r0
 8005c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c6e:	2030      	movs	r0, #48	@ 0x30
 8005c70:	18e1      	adds	r1, r4, r3
 8005c72:	3143      	adds	r1, #67	@ 0x43
 8005c74:	7008      	strb	r0, [r1, #0]
 8005c76:	0021      	movs	r1, r4
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	3145      	adds	r1, #69	@ 0x45
 8005c7c:	7809      	ldrb	r1, [r1, #0]
 8005c7e:	18a2      	adds	r2, r4, r2
 8005c80:	3243      	adds	r2, #67	@ 0x43
 8005c82:	3302      	adds	r3, #2
 8005c84:	7011      	strb	r1, [r2, #0]
 8005c86:	e7c1      	b.n	8005c0c <_printf_common+0x4c>
 8005c88:	0022      	movs	r2, r4
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	9901      	ldr	r1, [sp, #4]
 8005c8e:	9800      	ldr	r0, [sp, #0]
 8005c90:	9f08      	ldr	r7, [sp, #32]
 8005c92:	321a      	adds	r2, #26
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d0e6      	beq.n	8005c68 <_printf_common+0xa8>
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7d1      	b.n	8005c42 <_printf_common+0x82>
	...

08005ca0 <_printf_i>:
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	b08b      	sub	sp, #44	@ 0x2c
 8005ca4:	9206      	str	r2, [sp, #24]
 8005ca6:	000a      	movs	r2, r1
 8005ca8:	3243      	adds	r2, #67	@ 0x43
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	9005      	str	r0, [sp, #20]
 8005cae:	9203      	str	r2, [sp, #12]
 8005cb0:	7e0a      	ldrb	r2, [r1, #24]
 8005cb2:	000c      	movs	r4, r1
 8005cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cb6:	2a78      	cmp	r2, #120	@ 0x78
 8005cb8:	d809      	bhi.n	8005cce <_printf_i+0x2e>
 8005cba:	2a62      	cmp	r2, #98	@ 0x62
 8005cbc:	d80b      	bhi.n	8005cd6 <_printf_i+0x36>
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	d100      	bne.n	8005cc4 <_printf_i+0x24>
 8005cc2:	e0ba      	b.n	8005e3a <_printf_i+0x19a>
 8005cc4:	497a      	ldr	r1, [pc, #488]	@ (8005eb0 <_printf_i+0x210>)
 8005cc6:	9104      	str	r1, [sp, #16]
 8005cc8:	2a58      	cmp	r2, #88	@ 0x58
 8005cca:	d100      	bne.n	8005cce <_printf_i+0x2e>
 8005ccc:	e08e      	b.n	8005dec <_printf_i+0x14c>
 8005cce:	0025      	movs	r5, r4
 8005cd0:	3542      	adds	r5, #66	@ 0x42
 8005cd2:	702a      	strb	r2, [r5, #0]
 8005cd4:	e022      	b.n	8005d1c <_printf_i+0x7c>
 8005cd6:	0010      	movs	r0, r2
 8005cd8:	3863      	subs	r0, #99	@ 0x63
 8005cda:	2815      	cmp	r0, #21
 8005cdc:	d8f7      	bhi.n	8005cce <_printf_i+0x2e>
 8005cde:	f7fa fa1b 	bl	8000118 <__gnu_thumb1_case_shi>
 8005ce2:	0016      	.short	0x0016
 8005ce4:	fff6001f 	.word	0xfff6001f
 8005ce8:	fff6fff6 	.word	0xfff6fff6
 8005cec:	001ffff6 	.word	0x001ffff6
 8005cf0:	fff6fff6 	.word	0xfff6fff6
 8005cf4:	fff6fff6 	.word	0xfff6fff6
 8005cf8:	0036009f 	.word	0x0036009f
 8005cfc:	fff6007e 	.word	0xfff6007e
 8005d00:	00b0fff6 	.word	0x00b0fff6
 8005d04:	0036fff6 	.word	0x0036fff6
 8005d08:	fff6fff6 	.word	0xfff6fff6
 8005d0c:	0082      	.short	0x0082
 8005d0e:	0025      	movs	r5, r4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	3542      	adds	r5, #66	@ 0x42
 8005d14:	1d11      	adds	r1, r2, #4
 8005d16:	6019      	str	r1, [r3, #0]
 8005d18:	6813      	ldr	r3, [r2, #0]
 8005d1a:	702b      	strb	r3, [r5, #0]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e09e      	b.n	8005e5e <_printf_i+0x1be>
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	6809      	ldr	r1, [r1, #0]
 8005d24:	1d02      	adds	r2, r0, #4
 8005d26:	060d      	lsls	r5, r1, #24
 8005d28:	d50b      	bpl.n	8005d42 <_printf_i+0xa2>
 8005d2a:	6806      	ldr	r6, [r0, #0]
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	da03      	bge.n	8005d3a <_printf_i+0x9a>
 8005d32:	232d      	movs	r3, #45	@ 0x2d
 8005d34:	9a03      	ldr	r2, [sp, #12]
 8005d36:	4276      	negs	r6, r6
 8005d38:	7013      	strb	r3, [r2, #0]
 8005d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8005eb0 <_printf_i+0x210>)
 8005d3c:	270a      	movs	r7, #10
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	e018      	b.n	8005d74 <_printf_i+0xd4>
 8005d42:	6806      	ldr	r6, [r0, #0]
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	0649      	lsls	r1, r1, #25
 8005d48:	d5f1      	bpl.n	8005d2e <_printf_i+0x8e>
 8005d4a:	b236      	sxth	r6, r6
 8005d4c:	e7ef      	b.n	8005d2e <_printf_i+0x8e>
 8005d4e:	6808      	ldr	r0, [r1, #0]
 8005d50:	6819      	ldr	r1, [r3, #0]
 8005d52:	c940      	ldmia	r1!, {r6}
 8005d54:	0605      	lsls	r5, r0, #24
 8005d56:	d402      	bmi.n	8005d5e <_printf_i+0xbe>
 8005d58:	0640      	lsls	r0, r0, #25
 8005d5a:	d500      	bpl.n	8005d5e <_printf_i+0xbe>
 8005d5c:	b2b6      	uxth	r6, r6
 8005d5e:	6019      	str	r1, [r3, #0]
 8005d60:	4b53      	ldr	r3, [pc, #332]	@ (8005eb0 <_printf_i+0x210>)
 8005d62:	270a      	movs	r7, #10
 8005d64:	9304      	str	r3, [sp, #16]
 8005d66:	2a6f      	cmp	r2, #111	@ 0x6f
 8005d68:	d100      	bne.n	8005d6c <_printf_i+0xcc>
 8005d6a:	3f02      	subs	r7, #2
 8005d6c:	0023      	movs	r3, r4
 8005d6e:	2200      	movs	r2, #0
 8005d70:	3343      	adds	r3, #67	@ 0x43
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	db06      	blt.n	8005d8a <_printf_i+0xea>
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	9d03      	ldr	r5, [sp, #12]
 8005d82:	438a      	bics	r2, r1
 8005d84:	6022      	str	r2, [r4, #0]
 8005d86:	4333      	orrs	r3, r6
 8005d88:	d00c      	beq.n	8005da4 <_printf_i+0x104>
 8005d8a:	9d03      	ldr	r5, [sp, #12]
 8005d8c:	0030      	movs	r0, r6
 8005d8e:	0039      	movs	r1, r7
 8005d90:	f7fa fa52 	bl	8000238 <__aeabi_uidivmod>
 8005d94:	9b04      	ldr	r3, [sp, #16]
 8005d96:	3d01      	subs	r5, #1
 8005d98:	5c5b      	ldrb	r3, [r3, r1]
 8005d9a:	702b      	strb	r3, [r5, #0]
 8005d9c:	0033      	movs	r3, r6
 8005d9e:	0006      	movs	r6, r0
 8005da0:	429f      	cmp	r7, r3
 8005da2:	d9f3      	bls.n	8005d8c <_printf_i+0xec>
 8005da4:	2f08      	cmp	r7, #8
 8005da6:	d109      	bne.n	8005dbc <_printf_i+0x11c>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07db      	lsls	r3, r3, #31
 8005dac:	d506      	bpl.n	8005dbc <_printf_i+0x11c>
 8005dae:	6862      	ldr	r2, [r4, #4]
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	dc02      	bgt.n	8005dbc <_printf_i+0x11c>
 8005db6:	2330      	movs	r3, #48	@ 0x30
 8005db8:	3d01      	subs	r5, #1
 8005dba:	702b      	strb	r3, [r5, #0]
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1b5b      	subs	r3, r3, r5
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	9b07      	ldr	r3, [sp, #28]
 8005dc4:	0021      	movs	r1, r4
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	9805      	ldr	r0, [sp, #20]
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	aa09      	add	r2, sp, #36	@ 0x24
 8005dce:	f7ff fef7 	bl	8005bc0 <_printf_common>
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d148      	bne.n	8005e68 <_printf_i+0x1c8>
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	4240      	negs	r0, r0
 8005dda:	b00b      	add	sp, #44	@ 0x2c
 8005ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dde:	2220      	movs	r2, #32
 8005de0:	6809      	ldr	r1, [r1, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	2278      	movs	r2, #120	@ 0x78
 8005de8:	4932      	ldr	r1, [pc, #200]	@ (8005eb4 <_printf_i+0x214>)
 8005dea:	9104      	str	r1, [sp, #16]
 8005dec:	0021      	movs	r1, r4
 8005dee:	3145      	adds	r1, #69	@ 0x45
 8005df0:	700a      	strb	r2, [r1, #0]
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	c940      	ldmia	r1!, {r6}
 8005df8:	0610      	lsls	r0, r2, #24
 8005dfa:	d402      	bmi.n	8005e02 <_printf_i+0x162>
 8005dfc:	0650      	lsls	r0, r2, #25
 8005dfe:	d500      	bpl.n	8005e02 <_printf_i+0x162>
 8005e00:	b2b6      	uxth	r6, r6
 8005e02:	6019      	str	r1, [r3, #0]
 8005e04:	07d3      	lsls	r3, r2, #31
 8005e06:	d502      	bpl.n	8005e0e <_printf_i+0x16e>
 8005e08:	2320      	movs	r3, #32
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	d001      	beq.n	8005e16 <_printf_i+0x176>
 8005e12:	2710      	movs	r7, #16
 8005e14:	e7aa      	b.n	8005d6c <_printf_i+0xcc>
 8005e16:	2220      	movs	r2, #32
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	e7f8      	b.n	8005e12 <_printf_i+0x172>
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	680d      	ldr	r5, [r1, #0]
 8005e24:	1d10      	adds	r0, r2, #4
 8005e26:	6949      	ldr	r1, [r1, #20]
 8005e28:	6018      	str	r0, [r3, #0]
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	062e      	lsls	r6, r5, #24
 8005e2e:	d501      	bpl.n	8005e34 <_printf_i+0x194>
 8005e30:	6019      	str	r1, [r3, #0]
 8005e32:	e002      	b.n	8005e3a <_printf_i+0x19a>
 8005e34:	066d      	lsls	r5, r5, #25
 8005e36:	d5fb      	bpl.n	8005e30 <_printf_i+0x190>
 8005e38:	8019      	strh	r1, [r3, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9d03      	ldr	r5, [sp, #12]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	e7bf      	b.n	8005dc2 <_printf_i+0x122>
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	1d11      	adds	r1, r2, #4
 8005e46:	6019      	str	r1, [r3, #0]
 8005e48:	6815      	ldr	r5, [r2, #0]
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	0028      	movs	r0, r5
 8005e4e:	6862      	ldr	r2, [r4, #4]
 8005e50:	f000 fa2e 	bl	80062b0 <memchr>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d001      	beq.n	8005e5c <_printf_i+0x1bc>
 8005e58:	1b40      	subs	r0, r0, r5
 8005e5a:	6060      	str	r0, [r4, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	2300      	movs	r3, #0
 8005e62:	9a03      	ldr	r2, [sp, #12]
 8005e64:	7013      	strb	r3, [r2, #0]
 8005e66:	e7ac      	b.n	8005dc2 <_printf_i+0x122>
 8005e68:	002a      	movs	r2, r5
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	9906      	ldr	r1, [sp, #24]
 8005e6e:	9805      	ldr	r0, [sp, #20]
 8005e70:	9d07      	ldr	r5, [sp, #28]
 8005e72:	47a8      	blx	r5
 8005e74:	3001      	adds	r0, #1
 8005e76:	d0ae      	beq.n	8005dd6 <_printf_i+0x136>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	079b      	lsls	r3, r3, #30
 8005e7c:	d415      	bmi.n	8005eaa <_printf_i+0x20a>
 8005e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e80:	68e0      	ldr	r0, [r4, #12]
 8005e82:	4298      	cmp	r0, r3
 8005e84:	daa9      	bge.n	8005dda <_printf_i+0x13a>
 8005e86:	0018      	movs	r0, r3
 8005e88:	e7a7      	b.n	8005dda <_printf_i+0x13a>
 8005e8a:	0022      	movs	r2, r4
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	9906      	ldr	r1, [sp, #24]
 8005e90:	9805      	ldr	r0, [sp, #20]
 8005e92:	9e07      	ldr	r6, [sp, #28]
 8005e94:	3219      	adds	r2, #25
 8005e96:	47b0      	blx	r6
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d09c      	beq.n	8005dd6 <_printf_i+0x136>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dcf0      	bgt.n	8005e8a <_printf_i+0x1ea>
 8005ea8:	e7e9      	b.n	8005e7e <_printf_i+0x1de>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	e7f7      	b.n	8005e9e <_printf_i+0x1fe>
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	08006645 	.word	0x08006645
 8005eb4:	08006656 	.word	0x08006656

08005eb8 <_scanf_chars>:
 8005eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eba:	0015      	movs	r5, r2
 8005ebc:	688a      	ldr	r2, [r1, #8]
 8005ebe:	000c      	movs	r4, r1
 8005ec0:	9001      	str	r0, [sp, #4]
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d104      	bne.n	8005ed0 <_scanf_chars+0x18>
 8005ec6:	698a      	ldr	r2, [r1, #24]
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	d117      	bne.n	8005efc <_scanf_chars+0x44>
 8005ecc:	3201      	adds	r2, #1
 8005ece:	60a2      	str	r2, [r4, #8]
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	06d2      	lsls	r2, r2, #27
 8005ed4:	d403      	bmi.n	8005ede <_scanf_chars+0x26>
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	1d11      	adds	r1, r2, #4
 8005eda:	6019      	str	r1, [r3, #0]
 8005edc:	6817      	ldr	r7, [r2, #0]
 8005ede:	2600      	movs	r6, #0
 8005ee0:	69a0      	ldr	r0, [r4, #24]
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d016      	beq.n	8005f14 <_scanf_chars+0x5c>
 8005ee6:	2801      	cmp	r0, #1
 8005ee8:	d10b      	bne.n	8005f02 <_scanf_chars+0x4a>
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	6962      	ldr	r2, [r4, #20]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10e      	bne.n	8005f14 <_scanf_chars+0x5c>
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d03b      	beq.n	8005f72 <_scanf_chars+0xba>
 8005efa:	e029      	b.n	8005f50 <_scanf_chars+0x98>
 8005efc:	2201      	movs	r2, #1
 8005efe:	4252      	negs	r2, r2
 8005f00:	e7e5      	b.n	8005ece <_scanf_chars+0x16>
 8005f02:	2802      	cmp	r0, #2
 8005f04:	d124      	bne.n	8005f50 <_scanf_chars+0x98>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	4a1a      	ldr	r2, [pc, #104]	@ (8005f74 <_scanf_chars+0xbc>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	5cd3      	ldrb	r3, [r2, r3]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	4213      	tst	r3, r2
 8005f12:	d11d      	bne.n	8005f50 <_scanf_chars+0x98>
 8005f14:	2210      	movs	r2, #16
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	3601      	adds	r6, #1
 8005f1a:	4213      	tst	r3, r2
 8005f1c:	d103      	bne.n	8005f26 <_scanf_chars+0x6e>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	703b      	strb	r3, [r7, #0]
 8005f24:	3701      	adds	r7, #1
 8005f26:	682a      	ldr	r2, [r5, #0]
 8005f28:	686b      	ldr	r3, [r5, #4]
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	68a2      	ldr	r2, [r4, #8]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	3a01      	subs	r2, #1
 8005f34:	606b      	str	r3, [r5, #4]
 8005f36:	60a2      	str	r2, [r4, #8]
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	d009      	beq.n	8005f50 <_scanf_chars+0x98>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dccf      	bgt.n	8005ee0 <_scanf_chars+0x28>
 8005f40:	23c0      	movs	r3, #192	@ 0xc0
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	0029      	movs	r1, r5
 8005f46:	58e3      	ldr	r3, [r4, r3]
 8005f48:	9801      	ldr	r0, [sp, #4]
 8005f4a:	4798      	blx	r3
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d0c7      	beq.n	8005ee0 <_scanf_chars+0x28>
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	2310      	movs	r3, #16
 8005f54:	0011      	movs	r1, r2
 8005f56:	4019      	ands	r1, r3
 8005f58:	421a      	tst	r2, r3
 8005f5a:	d106      	bne.n	8005f6a <_scanf_chars+0xb2>
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60e3      	str	r3, [r4, #12]
 8005f62:	69a3      	ldr	r3, [r4, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d000      	beq.n	8005f6a <_scanf_chars+0xb2>
 8005f68:	7039      	strb	r1, [r7, #0]
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	199b      	adds	r3, r3, r6
 8005f70:	6123      	str	r3, [r4, #16]
 8005f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f74:	08006683 	.word	0x08006683

08005f78 <_scanf_i>:
 8005f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7a:	b08b      	sub	sp, #44	@ 0x2c
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	4b78      	ldr	r3, [pc, #480]	@ (8006160 <_scanf_i+0x1e8>)
 8005f80:	0016      	movs	r6, r2
 8005f82:	9004      	str	r0, [sp, #16]
 8005f84:	aa07      	add	r2, sp, #28
 8005f86:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005f88:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005f8a:	4a76      	ldr	r2, [pc, #472]	@ (8006164 <_scanf_i+0x1ec>)
 8005f8c:	698b      	ldr	r3, [r1, #24]
 8005f8e:	000c      	movs	r4, r1
 8005f90:	9205      	str	r2, [sp, #20]
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d101      	bne.n	8005f9a <_scanf_i+0x22>
 8005f96:	4b74      	ldr	r3, [pc, #464]	@ (8006168 <_scanf_i+0x1f0>)
 8005f98:	9305      	str	r3, [sp, #20]
 8005f9a:	22ae      	movs	r2, #174	@ 0xae
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	0052      	lsls	r2, r2, #1
 8005fa2:	1e59      	subs	r1, r3, #1
 8005fa4:	9003      	str	r0, [sp, #12]
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	d905      	bls.n	8005fb6 <_scanf_i+0x3e>
 8005faa:	3b5e      	subs	r3, #94	@ 0x5e
 8005fac:	3bff      	subs	r3, #255	@ 0xff
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	235e      	movs	r3, #94	@ 0x5e
 8005fb2:	33ff      	adds	r3, #255	@ 0xff
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	0023      	movs	r3, r4
 8005fb8:	331c      	adds	r3, #28
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	23d0      	movs	r3, #208	@ 0xd0
 8005fbe:	2700      	movs	r7, #0
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	9b00      	ldr	r3, [sp, #0]
 8005fca:	9302      	str	r3, [sp, #8]
 8005fcc:	6833      	ldr	r3, [r6, #0]
 8005fce:	a807      	add	r0, sp, #28
 8005fd0:	7819      	ldrb	r1, [r3, #0]
 8005fd2:	00bb      	lsls	r3, r7, #2
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	5818      	ldr	r0, [r3, r0]
 8005fd8:	f000 f96a 	bl	80062b0 <memchr>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d029      	beq.n	8006034 <_scanf_i+0xbc>
 8005fe0:	2f01      	cmp	r7, #1
 8005fe2:	d15e      	bne.n	80060a2 <_scanf_i+0x12a>
 8005fe4:	6863      	ldr	r3, [r4, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <_scanf_i+0x80>
 8005fea:	3308      	adds	r3, #8
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	33f9      	adds	r3, #249	@ 0xf9
 8005ff2:	33ff      	adds	r3, #255	@ 0xff
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800616c <_scanf_i+0x1f4>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	68a3      	ldr	r3, [r4, #8]
 8006002:	1e5a      	subs	r2, r3, #1
 8006004:	60a2      	str	r2, [r4, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d014      	beq.n	8006034 <_scanf_i+0xbc>
 800600a:	6833      	ldr	r3, [r6, #0]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	6032      	str	r2, [r6, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	9a02      	ldr	r2, [sp, #8]
 8006014:	7013      	strb	r3, [r2, #0]
 8006016:	6873      	ldr	r3, [r6, #4]
 8006018:	1c55      	adds	r5, r2, #1
 800601a:	3b01      	subs	r3, #1
 800601c:	6073      	str	r3, [r6, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dc07      	bgt.n	8006032 <_scanf_i+0xba>
 8006022:	23c0      	movs	r3, #192	@ 0xc0
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	0031      	movs	r1, r6
 8006028:	58e3      	ldr	r3, [r4, r3]
 800602a:	9804      	ldr	r0, [sp, #16]
 800602c:	4798      	blx	r3
 800602e:	2800      	cmp	r0, #0
 8006030:	d17e      	bne.n	8006130 <_scanf_i+0x1b8>
 8006032:	9502      	str	r5, [sp, #8]
 8006034:	3701      	adds	r7, #1
 8006036:	2f03      	cmp	r7, #3
 8006038:	d1c8      	bne.n	8005fcc <_scanf_i+0x54>
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <_scanf_i+0xcc>
 8006040:	330a      	adds	r3, #10
 8006042:	6063      	str	r3, [r4, #4]
 8006044:	2700      	movs	r7, #0
 8006046:	6863      	ldr	r3, [r4, #4]
 8006048:	4949      	ldr	r1, [pc, #292]	@ (8006170 <_scanf_i+0x1f8>)
 800604a:	6960      	ldr	r0, [r4, #20]
 800604c:	1ac9      	subs	r1, r1, r3
 800604e:	f000 f893 	bl	8006178 <__sccl>
 8006052:	9d02      	ldr	r5, [sp, #8]
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	6820      	ldr	r0, [r4, #0]
 8006058:	9302      	str	r3, [sp, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d03f      	beq.n	80060de <_scanf_i+0x166>
 800605e:	6831      	ldr	r1, [r6, #0]
 8006060:	6963      	ldr	r3, [r4, #20]
 8006062:	780a      	ldrb	r2, [r1, #0]
 8006064:	5c9b      	ldrb	r3, [r3, r2]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d039      	beq.n	80060de <_scanf_i+0x166>
 800606a:	2a30      	cmp	r2, #48	@ 0x30
 800606c:	d128      	bne.n	80060c0 <_scanf_i+0x148>
 800606e:	2380      	movs	r3, #128	@ 0x80
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	4218      	tst	r0, r3
 8006074:	d024      	beq.n	80060c0 <_scanf_i+0x148>
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	3701      	adds	r7, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <_scanf_i+0x112>
 800607e:	001a      	movs	r2, r3
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	3a01      	subs	r2, #1
 8006084:	3301      	adds	r3, #1
 8006086:	9203      	str	r2, [sp, #12]
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	6873      	ldr	r3, [r6, #4]
 800608c:	3b01      	subs	r3, #1
 800608e:	6073      	str	r3, [r6, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd1c      	ble.n	80060ce <_scanf_i+0x156>
 8006094:	6833      	ldr	r3, [r6, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	6033      	str	r3, [r6, #0]
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	3b01      	subs	r3, #1
 800609e:	60a3      	str	r3, [r4, #8]
 80060a0:	e7d8      	b.n	8006054 <_scanf_i+0xdc>
 80060a2:	2f02      	cmp	r7, #2
 80060a4:	d1ac      	bne.n	8006000 <_scanf_i+0x88>
 80060a6:	23c0      	movs	r3, #192	@ 0xc0
 80060a8:	2180      	movs	r1, #128	@ 0x80
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4013      	ands	r3, r2
 80060b0:	0089      	lsls	r1, r1, #2
 80060b2:	428b      	cmp	r3, r1
 80060b4:	d1c1      	bne.n	800603a <_scanf_i+0xc2>
 80060b6:	2310      	movs	r3, #16
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	33f0      	adds	r3, #240	@ 0xf0
 80060bc:	4313      	orrs	r3, r2
 80060be:	e79e      	b.n	8005ffe <_scanf_i+0x86>
 80060c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006174 <_scanf_i+0x1fc>)
 80060c2:	4003      	ands	r3, r0
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	780b      	ldrb	r3, [r1, #0]
 80060c8:	702b      	strb	r3, [r5, #0]
 80060ca:	3501      	adds	r5, #1
 80060cc:	e7dd      	b.n	800608a <_scanf_i+0x112>
 80060ce:	23c0      	movs	r3, #192	@ 0xc0
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	0031      	movs	r1, r6
 80060d4:	58e3      	ldr	r3, [r4, r3]
 80060d6:	9804      	ldr	r0, [sp, #16]
 80060d8:	4798      	blx	r3
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0dd      	beq.n	800609a <_scanf_i+0x122>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	05db      	lsls	r3, r3, #23
 80060e2:	d50e      	bpl.n	8006102 <_scanf_i+0x18a>
 80060e4:	9b00      	ldr	r3, [sp, #0]
 80060e6:	429d      	cmp	r5, r3
 80060e8:	d907      	bls.n	80060fa <_scanf_i+0x182>
 80060ea:	23be      	movs	r3, #190	@ 0xbe
 80060ec:	3d01      	subs	r5, #1
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	0032      	movs	r2, r6
 80060f2:	7829      	ldrb	r1, [r5, #0]
 80060f4:	58e3      	ldr	r3, [r4, r3]
 80060f6:	9804      	ldr	r0, [sp, #16]
 80060f8:	4798      	blx	r3
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	2001      	movs	r0, #1
 80060fe:	429d      	cmp	r5, r3
 8006100:	d029      	beq.n	8006156 <_scanf_i+0x1de>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	2310      	movs	r3, #16
 8006106:	000a      	movs	r2, r1
 8006108:	401a      	ands	r2, r3
 800610a:	4219      	tst	r1, r3
 800610c:	d11c      	bne.n	8006148 <_scanf_i+0x1d0>
 800610e:	702a      	strb	r2, [r5, #0]
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	9900      	ldr	r1, [sp, #0]
 8006114:	9804      	ldr	r0, [sp, #16]
 8006116:	9e05      	ldr	r6, [sp, #20]
 8006118:	47b0      	blx	r6
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	0691      	lsls	r1, r2, #26
 8006122:	d507      	bpl.n	8006134 <_scanf_i+0x1bc>
 8006124:	9901      	ldr	r1, [sp, #4]
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	600a      	str	r2, [r1, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6018      	str	r0, [r3, #0]
 800612e:	e008      	b.n	8006142 <_scanf_i+0x1ca>
 8006130:	2700      	movs	r7, #0
 8006132:	e7d4      	b.n	80060de <_scanf_i+0x166>
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	07d6      	lsls	r6, r2, #31
 8006138:	d50f      	bpl.n	800615a <_scanf_i+0x1e2>
 800613a:	9a01      	ldr	r2, [sp, #4]
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	8018      	strh	r0, [r3, #0]
 8006142:	68e3      	ldr	r3, [r4, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60e3      	str	r3, [r4, #12]
 8006148:	2000      	movs	r0, #0
 800614a:	9b00      	ldr	r3, [sp, #0]
 800614c:	1aed      	subs	r5, r5, r3
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	19ed      	adds	r5, r5, r7
 8006152:	195b      	adds	r3, r3, r5
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	b00b      	add	sp, #44	@ 0x2c
 8006158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800615a:	9a01      	ldr	r2, [sp, #4]
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	e7e4      	b.n	800612a <_scanf_i+0x1b2>
 8006160:	080065f0 	.word	0x080065f0
 8006164:	08006549 	.word	0x08006549
 8006168:	0800643d 	.word	0x0800643d
 800616c:	fffffaff 	.word	0xfffffaff
 8006170:	08006677 	.word	0x08006677
 8006174:	fffff6ff 	.word	0xfffff6ff

08006178 <__sccl>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	780b      	ldrb	r3, [r1, #0]
 800617c:	0004      	movs	r4, r0
 800617e:	2b5e      	cmp	r3, #94	@ 0x5e
 8006180:	d019      	beq.n	80061b6 <__sccl+0x3e>
 8006182:	1c4d      	adds	r5, r1, #1
 8006184:	2100      	movs	r1, #0
 8006186:	0022      	movs	r2, r4
 8006188:	1c60      	adds	r0, r4, #1
 800618a:	30ff      	adds	r0, #255	@ 0xff
 800618c:	7011      	strb	r1, [r2, #0]
 800618e:	3201      	adds	r2, #1
 8006190:	4282      	cmp	r2, r0
 8006192:	d1fb      	bne.n	800618c <__sccl+0x14>
 8006194:	1e68      	subs	r0, r5, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d026      	beq.n	80061e8 <__sccl+0x70>
 800619a:	2601      	movs	r6, #1
 800619c:	404e      	eors	r6, r1
 800619e:	0028      	movs	r0, r5
 80061a0:	54e6      	strb	r6, [r4, r3]
 80061a2:	7801      	ldrb	r1, [r0, #0]
 80061a4:	1c45      	adds	r5, r0, #1
 80061a6:	292d      	cmp	r1, #45	@ 0x2d
 80061a8:	d009      	beq.n	80061be <__sccl+0x46>
 80061aa:	295d      	cmp	r1, #93	@ 0x5d
 80061ac:	d01b      	beq.n	80061e6 <__sccl+0x6e>
 80061ae:	2900      	cmp	r1, #0
 80061b0:	d01a      	beq.n	80061e8 <__sccl+0x70>
 80061b2:	000b      	movs	r3, r1
 80061b4:	e7f3      	b.n	800619e <__sccl+0x26>
 80061b6:	784b      	ldrb	r3, [r1, #1]
 80061b8:	1c8d      	adds	r5, r1, #2
 80061ba:	2101      	movs	r1, #1
 80061bc:	e7e3      	b.n	8006186 <__sccl+0xe>
 80061be:	7842      	ldrb	r2, [r0, #1]
 80061c0:	2a5d      	cmp	r2, #93	@ 0x5d
 80061c2:	d0f6      	beq.n	80061b2 <__sccl+0x3a>
 80061c4:	4293      	cmp	r3, r2
 80061c6:	dcf4      	bgt.n	80061b2 <__sccl+0x3a>
 80061c8:	0019      	movs	r1, r3
 80061ca:	3002      	adds	r0, #2
 80061cc:	3101      	adds	r1, #1
 80061ce:	5466      	strb	r6, [r4, r1]
 80061d0:	428a      	cmp	r2, r1
 80061d2:	dcfb      	bgt.n	80061cc <__sccl+0x54>
 80061d4:	1c59      	adds	r1, r3, #1
 80061d6:	4293      	cmp	r3, r2
 80061d8:	db02      	blt.n	80061e0 <__sccl+0x68>
 80061da:	2200      	movs	r2, #0
 80061dc:	188b      	adds	r3, r1, r2
 80061de:	e7e0      	b.n	80061a2 <__sccl+0x2a>
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	3a01      	subs	r2, #1
 80061e4:	e7fa      	b.n	80061dc <__sccl+0x64>
 80061e6:	0028      	movs	r0, r5
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080061ec <__submore>:
 80061ec:	000b      	movs	r3, r1
 80061ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f0:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 80061f2:	3344      	adds	r3, #68	@ 0x44
 80061f4:	000c      	movs	r4, r1
 80061f6:	429d      	cmp	r5, r3
 80061f8:	d11c      	bne.n	8006234 <__submore+0x48>
 80061fa:	2680      	movs	r6, #128	@ 0x80
 80061fc:	00f6      	lsls	r6, r6, #3
 80061fe:	0031      	movs	r1, r6
 8006200:	f7ff f930 	bl	8005464 <_malloc_r>
 8006204:	2800      	cmp	r0, #0
 8006206:	d102      	bne.n	800620e <__submore+0x22>
 8006208:	2001      	movs	r0, #1
 800620a:	4240      	negs	r0, r0
 800620c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800620e:	0023      	movs	r3, r4
 8006210:	6360      	str	r0, [r4, #52]	@ 0x34
 8006212:	63a6      	str	r6, [r4, #56]	@ 0x38
 8006214:	3346      	adds	r3, #70	@ 0x46
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	4b10      	ldr	r3, [pc, #64]	@ (800625c <__submore+0x70>)
 800621a:	54c2      	strb	r2, [r0, r3]
 800621c:	0023      	movs	r3, r4
 800621e:	3345      	adds	r3, #69	@ 0x45
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <__submore+0x74>)
 8006224:	54c2      	strb	r2, [r0, r3]
 8006226:	782a      	ldrb	r2, [r5, #0]
 8006228:	4b0e      	ldr	r3, [pc, #56]	@ (8006264 <__submore+0x78>)
 800622a:	54c2      	strb	r2, [r0, r3]
 800622c:	18c0      	adds	r0, r0, r3
 800622e:	6020      	str	r0, [r4, #0]
 8006230:	2000      	movs	r0, #0
 8006232:	e7eb      	b.n	800620c <__submore+0x20>
 8006234:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8006236:	0029      	movs	r1, r5
 8006238:	0073      	lsls	r3, r6, #1
 800623a:	001a      	movs	r2, r3
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	f000 f842 	bl	80062c6 <_realloc_r>
 8006242:	1e05      	subs	r5, r0, #0
 8006244:	d0e0      	beq.n	8006208 <__submore+0x1c>
 8006246:	1987      	adds	r7, r0, r6
 8006248:	0001      	movs	r1, r0
 800624a:	0032      	movs	r2, r6
 800624c:	0038      	movs	r0, r7
 800624e:	f7ff f893 	bl	8005378 <memcpy>
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	6027      	str	r7, [r4, #0]
 8006256:	6365      	str	r5, [r4, #52]	@ 0x34
 8006258:	63a3      	str	r3, [r4, #56]	@ 0x38
 800625a:	e7e9      	b.n	8006230 <__submore+0x44>
 800625c:	000003ff 	.word	0x000003ff
 8006260:	000003fe 	.word	0x000003fe
 8006264:	000003fd 	.word	0x000003fd

08006268 <memmove>:
 8006268:	b510      	push	{r4, lr}
 800626a:	4288      	cmp	r0, r1
 800626c:	d902      	bls.n	8006274 <memmove+0xc>
 800626e:	188b      	adds	r3, r1, r2
 8006270:	4298      	cmp	r0, r3
 8006272:	d308      	bcc.n	8006286 <memmove+0x1e>
 8006274:	2300      	movs	r3, #0
 8006276:	429a      	cmp	r2, r3
 8006278:	d007      	beq.n	800628a <memmove+0x22>
 800627a:	5ccc      	ldrb	r4, [r1, r3]
 800627c:	54c4      	strb	r4, [r0, r3]
 800627e:	3301      	adds	r3, #1
 8006280:	e7f9      	b.n	8006276 <memmove+0xe>
 8006282:	5c8b      	ldrb	r3, [r1, r2]
 8006284:	5483      	strb	r3, [r0, r2]
 8006286:	3a01      	subs	r2, #1
 8006288:	d2fb      	bcs.n	8006282 <memmove+0x1a>
 800628a:	bd10      	pop	{r4, pc}

0800628c <_sbrk_r>:
 800628c:	2300      	movs	r3, #0
 800628e:	b570      	push	{r4, r5, r6, lr}
 8006290:	4d06      	ldr	r5, [pc, #24]	@ (80062ac <_sbrk_r+0x20>)
 8006292:	0004      	movs	r4, r0
 8006294:	0008      	movs	r0, r1
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	f7fb f9be 	bl	8001618 <_sbrk>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d103      	bne.n	80062a8 <_sbrk_r+0x1c>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d000      	beq.n	80062a8 <_sbrk_r+0x1c>
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	20000498 	.word	0x20000498

080062b0 <memchr>:
 80062b0:	b2c9      	uxtb	r1, r1
 80062b2:	1882      	adds	r2, r0, r2
 80062b4:	4290      	cmp	r0, r2
 80062b6:	d101      	bne.n	80062bc <memchr+0xc>
 80062b8:	2000      	movs	r0, #0
 80062ba:	4770      	bx	lr
 80062bc:	7803      	ldrb	r3, [r0, #0]
 80062be:	428b      	cmp	r3, r1
 80062c0:	d0fb      	beq.n	80062ba <memchr+0xa>
 80062c2:	3001      	adds	r0, #1
 80062c4:	e7f6      	b.n	80062b4 <memchr+0x4>

080062c6 <_realloc_r>:
 80062c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062c8:	0006      	movs	r6, r0
 80062ca:	000c      	movs	r4, r1
 80062cc:	0015      	movs	r5, r2
 80062ce:	2900      	cmp	r1, #0
 80062d0:	d105      	bne.n	80062de <_realloc_r+0x18>
 80062d2:	0011      	movs	r1, r2
 80062d4:	f7ff f8c6 	bl	8005464 <_malloc_r>
 80062d8:	0004      	movs	r4, r0
 80062da:	0020      	movs	r0, r4
 80062dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062de:	2a00      	cmp	r2, #0
 80062e0:	d103      	bne.n	80062ea <_realloc_r+0x24>
 80062e2:	f7ff f853 	bl	800538c <_free_r>
 80062e6:	002c      	movs	r4, r5
 80062e8:	e7f7      	b.n	80062da <_realloc_r+0x14>
 80062ea:	f000 f931 	bl	8006550 <_malloc_usable_size_r>
 80062ee:	0007      	movs	r7, r0
 80062f0:	4285      	cmp	r5, r0
 80062f2:	d802      	bhi.n	80062fa <_realloc_r+0x34>
 80062f4:	0843      	lsrs	r3, r0, #1
 80062f6:	42ab      	cmp	r3, r5
 80062f8:	d3ef      	bcc.n	80062da <_realloc_r+0x14>
 80062fa:	0029      	movs	r1, r5
 80062fc:	0030      	movs	r0, r6
 80062fe:	f7ff f8b1 	bl	8005464 <_malloc_r>
 8006302:	9001      	str	r0, [sp, #4]
 8006304:	2800      	cmp	r0, #0
 8006306:	d101      	bne.n	800630c <_realloc_r+0x46>
 8006308:	9c01      	ldr	r4, [sp, #4]
 800630a:	e7e6      	b.n	80062da <_realloc_r+0x14>
 800630c:	002a      	movs	r2, r5
 800630e:	42bd      	cmp	r5, r7
 8006310:	d900      	bls.n	8006314 <_realloc_r+0x4e>
 8006312:	003a      	movs	r2, r7
 8006314:	0021      	movs	r1, r4
 8006316:	9801      	ldr	r0, [sp, #4]
 8006318:	f7ff f82e 	bl	8005378 <memcpy>
 800631c:	0021      	movs	r1, r4
 800631e:	0030      	movs	r0, r6
 8006320:	f7ff f834 	bl	800538c <_free_r>
 8006324:	e7f0      	b.n	8006308 <_realloc_r+0x42>
	...

08006328 <_strtol_l.isra.0>:
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	0017      	movs	r7, r2
 800632e:	001e      	movs	r6, r3
 8006330:	9003      	str	r0, [sp, #12]
 8006332:	9101      	str	r1, [sp, #4]
 8006334:	2b24      	cmp	r3, #36	@ 0x24
 8006336:	d823      	bhi.n	8006380 <_strtol_l.isra.0+0x58>
 8006338:	000c      	movs	r4, r1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d020      	beq.n	8006380 <_strtol_l.isra.0+0x58>
 800633e:	4b3d      	ldr	r3, [pc, #244]	@ (8006434 <_strtol_l.isra.0+0x10c>)
 8006340:	2208      	movs	r2, #8
 8006342:	469c      	mov	ip, r3
 8006344:	0023      	movs	r3, r4
 8006346:	4661      	mov	r1, ip
 8006348:	781d      	ldrb	r5, [r3, #0]
 800634a:	3401      	adds	r4, #1
 800634c:	5d48      	ldrb	r0, [r1, r5]
 800634e:	0001      	movs	r1, r0
 8006350:	4011      	ands	r1, r2
 8006352:	4210      	tst	r0, r2
 8006354:	d1f6      	bne.n	8006344 <_strtol_l.isra.0+0x1c>
 8006356:	2d2d      	cmp	r5, #45	@ 0x2d
 8006358:	d119      	bne.n	800638e <_strtol_l.isra.0+0x66>
 800635a:	7825      	ldrb	r5, [r4, #0]
 800635c:	1c9c      	adds	r4, r3, #2
 800635e:	2301      	movs	r3, #1
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2210      	movs	r2, #16
 8006364:	0033      	movs	r3, r6
 8006366:	4393      	bics	r3, r2
 8006368:	d11d      	bne.n	80063a6 <_strtol_l.isra.0+0x7e>
 800636a:	2d30      	cmp	r5, #48	@ 0x30
 800636c:	d115      	bne.n	800639a <_strtol_l.isra.0+0x72>
 800636e:	2120      	movs	r1, #32
 8006370:	7823      	ldrb	r3, [r4, #0]
 8006372:	438b      	bics	r3, r1
 8006374:	2b58      	cmp	r3, #88	@ 0x58
 8006376:	d110      	bne.n	800639a <_strtol_l.isra.0+0x72>
 8006378:	7865      	ldrb	r5, [r4, #1]
 800637a:	3402      	adds	r4, #2
 800637c:	2610      	movs	r6, #16
 800637e:	e012      	b.n	80063a6 <_strtol_l.isra.0+0x7e>
 8006380:	f7fe ffce 	bl	8005320 <__errno>
 8006384:	2316      	movs	r3, #22
 8006386:	6003      	str	r3, [r0, #0]
 8006388:	2000      	movs	r0, #0
 800638a:	b005      	add	sp, #20
 800638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638e:	9100      	str	r1, [sp, #0]
 8006390:	2d2b      	cmp	r5, #43	@ 0x2b
 8006392:	d1e6      	bne.n	8006362 <_strtol_l.isra.0+0x3a>
 8006394:	7825      	ldrb	r5, [r4, #0]
 8006396:	1c9c      	adds	r4, r3, #2
 8006398:	e7e3      	b.n	8006362 <_strtol_l.isra.0+0x3a>
 800639a:	2e00      	cmp	r6, #0
 800639c:	d1ee      	bne.n	800637c <_strtol_l.isra.0+0x54>
 800639e:	360a      	adds	r6, #10
 80063a0:	2d30      	cmp	r5, #48	@ 0x30
 80063a2:	d100      	bne.n	80063a6 <_strtol_l.isra.0+0x7e>
 80063a4:	3e02      	subs	r6, #2
 80063a6:	4a24      	ldr	r2, [pc, #144]	@ (8006438 <_strtol_l.isra.0+0x110>)
 80063a8:	9b00      	ldr	r3, [sp, #0]
 80063aa:	4694      	mov	ip, r2
 80063ac:	4463      	add	r3, ip
 80063ae:	0031      	movs	r1, r6
 80063b0:	0018      	movs	r0, r3
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	f7f9 ff40 	bl	8000238 <__aeabi_uidivmod>
 80063b8:	2200      	movs	r2, #0
 80063ba:	4684      	mov	ip, r0
 80063bc:	0010      	movs	r0, r2
 80063be:	002b      	movs	r3, r5
 80063c0:	3b30      	subs	r3, #48	@ 0x30
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	d811      	bhi.n	80063ea <_strtol_l.isra.0+0xc2>
 80063c6:	001d      	movs	r5, r3
 80063c8:	42ae      	cmp	r6, r5
 80063ca:	dd1d      	ble.n	8006408 <_strtol_l.isra.0+0xe0>
 80063cc:	1c53      	adds	r3, r2, #1
 80063ce:	d009      	beq.n	80063e4 <_strtol_l.isra.0+0xbc>
 80063d0:	2201      	movs	r2, #1
 80063d2:	4252      	negs	r2, r2
 80063d4:	4584      	cmp	ip, r0
 80063d6:	d305      	bcc.n	80063e4 <_strtol_l.isra.0+0xbc>
 80063d8:	d101      	bne.n	80063de <_strtol_l.isra.0+0xb6>
 80063da:	42a9      	cmp	r1, r5
 80063dc:	db11      	blt.n	8006402 <_strtol_l.isra.0+0xda>
 80063de:	2201      	movs	r2, #1
 80063e0:	4370      	muls	r0, r6
 80063e2:	1828      	adds	r0, r5, r0
 80063e4:	7825      	ldrb	r5, [r4, #0]
 80063e6:	3401      	adds	r4, #1
 80063e8:	e7e9      	b.n	80063be <_strtol_l.isra.0+0x96>
 80063ea:	002b      	movs	r3, r5
 80063ec:	3b41      	subs	r3, #65	@ 0x41
 80063ee:	2b19      	cmp	r3, #25
 80063f0:	d801      	bhi.n	80063f6 <_strtol_l.isra.0+0xce>
 80063f2:	3d37      	subs	r5, #55	@ 0x37
 80063f4:	e7e8      	b.n	80063c8 <_strtol_l.isra.0+0xa0>
 80063f6:	002b      	movs	r3, r5
 80063f8:	3b61      	subs	r3, #97	@ 0x61
 80063fa:	2b19      	cmp	r3, #25
 80063fc:	d804      	bhi.n	8006408 <_strtol_l.isra.0+0xe0>
 80063fe:	3d57      	subs	r5, #87	@ 0x57
 8006400:	e7e2      	b.n	80063c8 <_strtol_l.isra.0+0xa0>
 8006402:	2201      	movs	r2, #1
 8006404:	4252      	negs	r2, r2
 8006406:	e7ed      	b.n	80063e4 <_strtol_l.isra.0+0xbc>
 8006408:	1c53      	adds	r3, r2, #1
 800640a:	d108      	bne.n	800641e <_strtol_l.isra.0+0xf6>
 800640c:	2322      	movs	r3, #34	@ 0x22
 800640e:	9a03      	ldr	r2, [sp, #12]
 8006410:	9802      	ldr	r0, [sp, #8]
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	2f00      	cmp	r7, #0
 8006416:	d0b8      	beq.n	800638a <_strtol_l.isra.0+0x62>
 8006418:	1e63      	subs	r3, r4, #1
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	e007      	b.n	800642e <_strtol_l.isra.0+0x106>
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d000      	beq.n	8006426 <_strtol_l.isra.0+0xfe>
 8006424:	4240      	negs	r0, r0
 8006426:	2f00      	cmp	r7, #0
 8006428:	d0af      	beq.n	800638a <_strtol_l.isra.0+0x62>
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1f4      	bne.n	8006418 <_strtol_l.isra.0+0xf0>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	e7aa      	b.n	800638a <_strtol_l.isra.0+0x62>
 8006434:	08006683 	.word	0x08006683
 8006438:	7fffffff 	.word	0x7fffffff

0800643c <_strtol_r>:
 800643c:	b510      	push	{r4, lr}
 800643e:	f7ff ff73 	bl	8006328 <_strtol_l.isra.0>
 8006442:	bd10      	pop	{r4, pc}

08006444 <_strtoul_l.isra.0>:
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	001e      	movs	r6, r3
 8006448:	4b3e      	ldr	r3, [pc, #248]	@ (8006544 <_strtoul_l.isra.0+0x100>)
 800644a:	0017      	movs	r7, r2
 800644c:	000c      	movs	r4, r1
 800644e:	469c      	mov	ip, r3
 8006450:	2208      	movs	r2, #8
 8006452:	b085      	sub	sp, #20
 8006454:	9003      	str	r0, [sp, #12]
 8006456:	9100      	str	r1, [sp, #0]
 8006458:	0023      	movs	r3, r4
 800645a:	4661      	mov	r1, ip
 800645c:	781d      	ldrb	r5, [r3, #0]
 800645e:	3401      	adds	r4, #1
 8006460:	5d48      	ldrb	r0, [r1, r5]
 8006462:	0001      	movs	r1, r0
 8006464:	4011      	ands	r1, r2
 8006466:	4210      	tst	r0, r2
 8006468:	d1f6      	bne.n	8006458 <_strtoul_l.isra.0+0x14>
 800646a:	2d2d      	cmp	r5, #45	@ 0x2d
 800646c:	d112      	bne.n	8006494 <_strtoul_l.isra.0+0x50>
 800646e:	7825      	ldrb	r5, [r4, #0]
 8006470:	1c9c      	adds	r4, r3, #2
 8006472:	2301      	movs	r3, #1
 8006474:	9302      	str	r3, [sp, #8]
 8006476:	2210      	movs	r2, #16
 8006478:	0033      	movs	r3, r6
 800647a:	4393      	bics	r3, r2
 800647c:	d116      	bne.n	80064ac <_strtoul_l.isra.0+0x68>
 800647e:	2d30      	cmp	r5, #48	@ 0x30
 8006480:	d10e      	bne.n	80064a0 <_strtoul_l.isra.0+0x5c>
 8006482:	2120      	movs	r1, #32
 8006484:	7823      	ldrb	r3, [r4, #0]
 8006486:	438b      	bics	r3, r1
 8006488:	2b58      	cmp	r3, #88	@ 0x58
 800648a:	d109      	bne.n	80064a0 <_strtoul_l.isra.0+0x5c>
 800648c:	7865      	ldrb	r5, [r4, #1]
 800648e:	3402      	adds	r4, #2
 8006490:	2610      	movs	r6, #16
 8006492:	e00b      	b.n	80064ac <_strtoul_l.isra.0+0x68>
 8006494:	9102      	str	r1, [sp, #8]
 8006496:	2d2b      	cmp	r5, #43	@ 0x2b
 8006498:	d1ed      	bne.n	8006476 <_strtoul_l.isra.0+0x32>
 800649a:	7825      	ldrb	r5, [r4, #0]
 800649c:	1c9c      	adds	r4, r3, #2
 800649e:	e7ea      	b.n	8006476 <_strtoul_l.isra.0+0x32>
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	d1f5      	bne.n	8006490 <_strtoul_l.isra.0+0x4c>
 80064a4:	360a      	adds	r6, #10
 80064a6:	2d30      	cmp	r5, #48	@ 0x30
 80064a8:	d100      	bne.n	80064ac <_strtoul_l.isra.0+0x68>
 80064aa:	3e02      	subs	r6, #2
 80064ac:	2001      	movs	r0, #1
 80064ae:	0031      	movs	r1, r6
 80064b0:	4240      	negs	r0, r0
 80064b2:	f7f9 fe3b 	bl	800012c <__udivsi3>
 80064b6:	9001      	str	r0, [sp, #4]
 80064b8:	2001      	movs	r0, #1
 80064ba:	0031      	movs	r1, r6
 80064bc:	4240      	negs	r0, r0
 80064be:	f7f9 febb 	bl	8000238 <__aeabi_uidivmod>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2201      	movs	r2, #1
 80064c6:	0018      	movs	r0, r3
 80064c8:	4694      	mov	ip, r2
 80064ca:	002a      	movs	r2, r5
 80064cc:	3a30      	subs	r2, #48	@ 0x30
 80064ce:	2a09      	cmp	r2, #9
 80064d0:	d812      	bhi.n	80064f8 <_strtoul_l.isra.0+0xb4>
 80064d2:	0015      	movs	r5, r2
 80064d4:	42ae      	cmp	r6, r5
 80064d6:	dd1e      	ble.n	8006516 <_strtoul_l.isra.0+0xd2>
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	d00a      	beq.n	80064f2 <_strtoul_l.isra.0+0xae>
 80064dc:	2301      	movs	r3, #1
 80064de:	9a01      	ldr	r2, [sp, #4]
 80064e0:	425b      	negs	r3, r3
 80064e2:	4282      	cmp	r2, r0
 80064e4:	d305      	bcc.n	80064f2 <_strtoul_l.isra.0+0xae>
 80064e6:	d101      	bne.n	80064ec <_strtoul_l.isra.0+0xa8>
 80064e8:	42a9      	cmp	r1, r5
 80064ea:	db11      	blt.n	8006510 <_strtoul_l.isra.0+0xcc>
 80064ec:	4663      	mov	r3, ip
 80064ee:	4370      	muls	r0, r6
 80064f0:	1828      	adds	r0, r5, r0
 80064f2:	7825      	ldrb	r5, [r4, #0]
 80064f4:	3401      	adds	r4, #1
 80064f6:	e7e8      	b.n	80064ca <_strtoul_l.isra.0+0x86>
 80064f8:	002a      	movs	r2, r5
 80064fa:	3a41      	subs	r2, #65	@ 0x41
 80064fc:	2a19      	cmp	r2, #25
 80064fe:	d801      	bhi.n	8006504 <_strtoul_l.isra.0+0xc0>
 8006500:	3d37      	subs	r5, #55	@ 0x37
 8006502:	e7e7      	b.n	80064d4 <_strtoul_l.isra.0+0x90>
 8006504:	002a      	movs	r2, r5
 8006506:	3a61      	subs	r2, #97	@ 0x61
 8006508:	2a19      	cmp	r2, #25
 800650a:	d804      	bhi.n	8006516 <_strtoul_l.isra.0+0xd2>
 800650c:	3d57      	subs	r5, #87	@ 0x57
 800650e:	e7e1      	b.n	80064d4 <_strtoul_l.isra.0+0x90>
 8006510:	2301      	movs	r3, #1
 8006512:	425b      	negs	r3, r3
 8006514:	e7ed      	b.n	80064f2 <_strtoul_l.isra.0+0xae>
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	d107      	bne.n	800652a <_strtoul_l.isra.0+0xe6>
 800651a:	2222      	movs	r2, #34	@ 0x22
 800651c:	9903      	ldr	r1, [sp, #12]
 800651e:	0018      	movs	r0, r3
 8006520:	600a      	str	r2, [r1, #0]
 8006522:	2f00      	cmp	r7, #0
 8006524:	d109      	bne.n	800653a <_strtoul_l.isra.0+0xf6>
 8006526:	b005      	add	sp, #20
 8006528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652a:	9a02      	ldr	r2, [sp, #8]
 800652c:	2a00      	cmp	r2, #0
 800652e:	d000      	beq.n	8006532 <_strtoul_l.isra.0+0xee>
 8006530:	4240      	negs	r0, r0
 8006532:	2f00      	cmp	r7, #0
 8006534:	d0f7      	beq.n	8006526 <_strtoul_l.isra.0+0xe2>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <_strtoul_l.isra.0+0xfa>
 800653a:	1e63      	subs	r3, r4, #1
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	e7f0      	b.n	8006526 <_strtoul_l.isra.0+0xe2>
 8006544:	08006683 	.word	0x08006683

08006548 <_strtoul_r>:
 8006548:	b510      	push	{r4, lr}
 800654a:	f7ff ff7b 	bl	8006444 <_strtoul_l.isra.0>
 800654e:	bd10      	pop	{r4, pc}

08006550 <_malloc_usable_size_r>:
 8006550:	1f0b      	subs	r3, r1, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	1f18      	subs	r0, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	da01      	bge.n	800655e <_malloc_usable_size_r+0xe>
 800655a:	580b      	ldr	r3, [r1, r0]
 800655c:	18c0      	adds	r0, r0, r3
 800655e:	4770      	bx	lr

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	46c0      	nop			@ (mov r8, r8)
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
